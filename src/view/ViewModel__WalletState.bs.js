// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var BTC = require("../application/wallet/BTC.bs.js");
var List = require("bs-platform/lib/js/list.js");
var Address = require("../application/wallet/Address.bs.js");
var PayoutTransaction = require("../application/wallet/PayoutTransaction.bs.js");

function make() {
  return /* record */[
          /* network : Testnet */1,
          /* accountKeyChains : [] */0,
          /* balance : [] */0,
          /* exposedCoordinates : [] */0,
          /* payoutProcesses : [] */0
        ];
}

function getAccountIndexOfAddress(address, param) {
  var accountKeyChains = param[/* accountKeyChains */1];
  return List.find((function (param) {
                  return List.mem(address, param[1]);
                }), List.map((function (param) {
                      return /* tuple */[
                              param[0],
                              List.map((function (a) {
                                      return a[/* address */5];
                                    }), List.map((function (c) {
                                          return Address.find(c, accountKeyChains);
                                        }), param[1]))
                            ];
                    }), param[/* exposedCoordinates */3]))[0];
}

function apply($$event, state) {
  switch ($$event.tag | 0) {
    case 0 : 
        return /* record */[
                /* network */$$event[0][/* network */6],
                /* accountKeyChains */state[/* accountKeyChains */1],
                /* balance */state[/* balance */2],
                /* exposedCoordinates */state[/* exposedCoordinates */3],
                /* payoutProcesses */state[/* payoutProcesses */4]
              ];
    case 12 : 
        var data = $$event[0][/* data */2];
        return /* record */[
                /* network */state[/* network */0],
                /* accountKeyChains : :: */[
                  /* tuple */[
                    data[/* accountIdx */0],
                    /* [] */0
                  ],
                  state[/* accountKeyChains */1]
                ],
                /* balance : :: */[
                  /* tuple */[
                    data[/* accountIdx */0],
                    /* record */[
                      /* currentSpendable */BTC.zero,
                      /* reserved */BTC.zero
                    ]
                  ],
                  state[/* balance */2]
                ],
                /* exposedCoordinates : :: */[
                  /* tuple */[
                    data[/* accountIdx */0],
                    /* [] */0
                  ],
                  state[/* exposedCoordinates */3]
                ],
                /* payoutProcesses */state[/* payoutProcesses */4]
              ];
    case 21 : 
        var match = $$event[0];
        var data$1 = match[/* data */5];
        var balance = List.assoc(data$1[/* accountIdx */0], state[/* balance */2]);
        var payoutSummary = PayoutTransaction.summary(state[/* network */0], data$1[/* payoutTx */1]);
        var match$1 = data$1[/* changeAddressCoordinates */2];
        return /* record */[
                /* network */state[/* network */0],
                /* accountKeyChains */state[/* accountKeyChains */1],
                /* balance : :: */[
                  /* tuple */[
                    data$1[/* accountIdx */0],
                    /* record */[
                      /* currentSpendable */balance[/* currentSpendable */0].minus(payoutSummary[/* reserved */0]),
                      /* reserved */balance[/* reserved */1].plus(payoutSummary[/* reserved */0])
                    ]
                  ],
                  List.remove_assoc(data$1[/* accountIdx */0], state[/* balance */2])
                ],
                /* exposedCoordinates */match$1 ? /* :: */[
                    /* tuple */[
                      data$1[/* accountIdx */0],
                      /* :: */[
                        match$1[0],
                        List.assoc(data$1[/* accountIdx */0], state[/* exposedCoordinates */3])
                      ]
                    ],
                    List.remove_assoc(data$1[/* accountIdx */0], state[/* exposedCoordinates */3])
                  ] : state[/* exposedCoordinates */3],
                /* payoutProcesses : :: */[
                  /* tuple */[
                    match[/* processId */0],
                    /* tuple */[
                      data$1[/* accountIdx */0],
                      data$1[/* payoutTx */1]
                    ]
                  ],
                  state[/* payoutProcesses */4]
                ]
              ];
    case 26 : 
        var match$2 = List.assoc($$event[0][/* processId */0], state[/* payoutProcesses */4]);
        var accountIdx = match$2[0];
        var balance$1 = List.assoc(accountIdx, state[/* balance */2]);
        var payoutSummary$1 = PayoutTransaction.summary(state[/* network */0], match$2[1]);
        return /* record */[
                /* network */state[/* network */0],
                /* accountKeyChains */state[/* accountKeyChains */1],
                /* balance : :: */[
                  /* tuple */[
                    accountIdx,
                    /* record */[
                      /* currentSpendable */balance$1[/* currentSpendable */0].plus(payoutSummary$1[/* reserved */0]).minus(payoutSummary$1[/* spentWithFees */1]),
                      /* reserved */balance$1[/* reserved */1].minus(payoutSummary$1[/* reserved */0])
                    ]
                  ],
                  List.remove_assoc(accountIdx, state[/* balance */2])
                ],
                /* exposedCoordinates */state[/* exposedCoordinates */3],
                /* payoutProcesses */state[/* payoutProcesses */4]
              ];
    case 28 : 
        var match$3 = List.assoc($$event[0][/* processId */0], state[/* payoutProcesses */4]);
        var accountIdx$1 = match$3[0];
        var balance$2 = List.assoc(accountIdx$1, state[/* balance */2]);
        var payoutSummary$2 = PayoutTransaction.summary(state[/* network */0], match$3[1]);
        return /* record */[
                /* network */state[/* network */0],
                /* accountKeyChains */state[/* accountKeyChains */1],
                /* balance : :: */[
                  /* tuple */[
                    accountIdx$1,
                    /* record */[
                      /* currentSpendable */balance$2[/* currentSpendable */0].plus(payoutSummary$2[/* reserved */0]),
                      /* reserved */balance$2[/* reserved */1].minus(payoutSummary$2[/* reserved */0])
                    ]
                  ],
                  List.remove_assoc(accountIdx$1, state[/* balance */2])
                ],
                /* exposedCoordinates */state[/* exposedCoordinates */3],
                /* payoutProcesses */state[/* payoutProcesses */4]
              ];
    case 32 : 
        var keyChain = $$event[0][/* keyChain */0];
        return /* record */[
                /* network */state[/* network */0],
                /* accountKeyChains : :: */[
                  /* tuple */[
                    keyChain[/* accountIdx */0],
                    /* :: */[
                      /* tuple */[
                        keyChain[/* keyChainIdx */1],
                        keyChain
                      ],
                      List.assoc(keyChain[/* accountIdx */0], state[/* accountKeyChains */1])
                    ]
                  ],
                  List.remove_assoc(keyChain[/* accountIdx */0], state[/* accountKeyChains */1])
                ],
                /* balance */state[/* balance */2],
                /* exposedCoordinates */state[/* exposedCoordinates */3],
                /* payoutProcesses */state[/* payoutProcesses */4]
              ];
    case 33 : 
        var coordinates = $$event[0][/* coordinates */0];
        var accountIdx$2 = Address.Coordinates[/* accountIdx */3](coordinates);
        return /* record */[
                /* network */state[/* network */0],
                /* accountKeyChains */state[/* accountKeyChains */1],
                /* balance */state[/* balance */2],
                /* exposedCoordinates : :: */[
                  /* tuple */[
                    accountIdx$2,
                    /* :: */[
                      coordinates,
                      List.assoc(accountIdx$2, state[/* exposedCoordinates */3])
                    ]
                  ],
                  List.remove_assoc(accountIdx$2, state[/* exposedCoordinates */3])
                ],
                /* payoutProcesses */state[/* payoutProcesses */4]
              ];
    case 34 : 
        var match$4 = $$event[0];
        var accountIdx$3 = getAccountIndexOfAddress(match$4[/* address */0], state);
        var balance$3 = List.assoc(accountIdx$3, state[/* balance */2]);
        return /* record */[
                /* network */state[/* network */0],
                /* accountKeyChains */state[/* accountKeyChains */1],
                /* balance : :: */[
                  /* tuple */[
                    accountIdx$3,
                    /* record */[
                      /* currentSpendable */balance$3[/* currentSpendable */0].plus(match$4[/* amount */2]),
                      /* reserved */balance$3[/* reserved */1]
                    ]
                  ],
                  List.remove_assoc(accountIdx$3, state[/* balance */2])
                ],
                /* exposedCoordinates */state[/* exposedCoordinates */3],
                /* payoutProcesses */state[/* payoutProcesses */4]
              ];
    default:
      return state;
  }
}

exports.make = make;
exports.getAccountIndexOfAddress = getAccountIndexOfAddress;
exports.apply = apply;
/* BTC Not a pure module */
