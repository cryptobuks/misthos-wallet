// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Belt_Map = require("bs-platform/lib/js/belt_Map.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var PrimitiveTypes = require("../../application/PrimitiveTypes.bs.js");
var PayoutTransaction = require("../../application/wallet/PayoutTransaction.bs.js");

function make() {
  return /* record */[
          /* payoutProcesses */PrimitiveTypes.ProcessId[/* makeMap */8](/* () */0),
          /* confirmedTxs : [] */0,
          /* unconfirmedTxs : [] */0,
          /* network : Regtest */0
        ];
}

function mapConfirmation(param, state) {
  var unconfirmedTxs = state[/* unconfirmedTxs */2];
  var unixTime = param[/* unixTime */2];
  var txId = param[/* txId */0];
  var newTxs = Belt_List.keepMap(unconfirmedTxs, (function (param) {
          if (param.tag) {
            if (param[0] === txId) {
              return /* Some */[/* ConfirmedPayout */Block.__(1, [
                          txId,
                          param[1],
                          new Date(unixTime * 1000)
                        ])];
            } else {
              return /* None */0;
            }
          } else if (param[0] === txId) {
            return /* Some */[/* ConfirmedIncome */Block.__(0, [
                        txId,
                        param[1],
                        new Date(unixTime * 1000)
                      ])];
          } else {
            return /* None */0;
          }
        }));
  var newUnconf = Belt_List.keep(unconfirmedTxs, (function (param) {
          if (param[0] === txId) {
            return false;
          } else {
            return true;
          }
        }));
  return /* record */[
          /* payoutProcesses */state[/* payoutProcesses */0],
          /* confirmedTxs */Belt_List.concat(newTxs, state[/* confirmedTxs */1]),
          /* unconfirmedTxs */newUnconf,
          /* network */state[/* network */3]
        ];
}

function apply($$event, state) {
  switch ($$event.tag | 0) {
    case 0 : 
        return /* record */[
                /* payoutProcesses */state[/* payoutProcesses */0],
                /* confirmedTxs */state[/* confirmedTxs */1],
                /* unconfirmedTxs */state[/* unconfirmedTxs */2],
                /* network */$$event[0][/* network */6]
              ];
    case 21 : 
        var match = $$event[0];
        return /* record */[
                /* payoutProcesses */Belt_Map.set(state[/* payoutProcesses */0], match[/* processId */0], match[/* data */6][/* payoutTx */1]),
                /* confirmedTxs */state[/* confirmedTxs */1],
                /* unconfirmedTxs */state[/* unconfirmedTxs */2],
                /* network */state[/* network */3]
              ];
    case 26 : 
        var match$1 = $$event[0];
        var payoutTx = Belt_Map.getExn(state[/* payoutProcesses */0], match$1[/* processId */0]);
        return /* record */[
                /* payoutProcesses */state[/* payoutProcesses */0],
                /* confirmedTxs */state[/* confirmedTxs */1],
                /* unconfirmedTxs : :: */[
                  /* UnconfirmedPayout */Block.__(1, [
                      match$1[/* txId */1],
                      PayoutTransaction.summary(state[/* network */3], payoutTx)[/* spentWithFees */2]
                    ]),
                  state[/* unconfirmedTxs */2]
                ],
                /* network */state[/* network */3]
              ];
    case 33 : 
        var match$2 = $$event[0];
        return /* record */[
                /* payoutProcesses */state[/* payoutProcesses */0],
                /* confirmedTxs */state[/* confirmedTxs */1],
                /* unconfirmedTxs : :: */[
                  /* UnconfirmedIncome */Block.__(0, [
                      match$2[/* txId */2],
                      match$2[/* amount */4]
                    ]),
                  state[/* unconfirmedTxs */2]
                ],
                /* network */state[/* network */3]
              ];
    case 34 : 
        return mapConfirmation($$event[0], state);
    default:
      return state;
  }
}

exports.make = make;
exports.mapConfirmation = mapConfirmation;
exports.apply = apply;
/* PrimitiveTypes Not a pure module */
