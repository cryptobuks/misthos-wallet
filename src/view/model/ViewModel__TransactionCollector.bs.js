// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Belt_Map = require("bs-platform/lib/js/belt_Map.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var PrimitiveTypes = require("../../application/PrimitiveTypes.bs.js");
var PayoutTransaction = require("../../application/wallet/PayoutTransaction.bs.js");

function make() {
  return /* record */[
          /* ventureId */PrimitiveTypes.VentureId[/* fromString */1](""),
          /* payoutProcesses */PrimitiveTypes.ProcessId[/* makeMap */8](/* () */0),
          /* unconfirmedTxs : [] */0,
          /* confirmedTxs : [] */0,
          /* network : Regtest */0
        ];
}

function mapConfirmation(param, state) {
  var unconfirmedTxs = state[/* unconfirmedTxs */2];
  var unixTime = param[/* unixTime */2];
  var txId = param[/* txId */0];
  var newTxs = Belt_List.keepMap(unconfirmedTxs, (function (data) {
          if (data[/* txId */2] === txId) {
            return /* Some */[/* record */[
                      /* txType */data[/* txType */0],
                      /* status : Confirmed */0,
                      /* txId */data[/* txId */2],
                      /* amount */data[/* amount */3],
                      /* date : Some */[new Date(unixTime * 1000)],
                      /* detailsLink */data[/* detailsLink */5]
                    ]];
          } else {
            return /* None */0;
          }
        }));
  var newUnconf = Belt_List.keep(unconfirmedTxs, (function (param) {
          return param[/* txId */2] !== txId;
        }));
  return /* record */[
          /* ventureId */state[/* ventureId */0],
          /* payoutProcesses */state[/* payoutProcesses */1],
          /* unconfirmedTxs */newUnconf,
          /* confirmedTxs */Belt_List.concat(newTxs, state[/* confirmedTxs */3]),
          /* network */state[/* network */4]
        ];
}

function apply($$event, state) {
  switch ($$event.tag | 0) {
    case 0 : 
        var match = $$event[0];
        return /* record */[
                /* ventureId */match[/* ventureId */0],
                /* payoutProcesses */state[/* payoutProcesses */1],
                /* unconfirmedTxs */state[/* unconfirmedTxs */2],
                /* confirmedTxs */state[/* confirmedTxs */3],
                /* network */match[/* network */6]
              ];
    case 21 : 
        var match$1 = $$event[0];
        return /* record */[
                /* ventureId */state[/* ventureId */0],
                /* payoutProcesses */Belt_Map.set(state[/* payoutProcesses */1], match$1[/* processId */0], match$1[/* data */6][/* payoutTx */1]),
                /* unconfirmedTxs */state[/* unconfirmedTxs */2],
                /* confirmedTxs */state[/* confirmedTxs */3],
                /* network */state[/* network */4]
              ];
    case 26 : 
        var match$2 = $$event[0];
        var processId = match$2[/* processId */0];
        var payoutTx = Belt_Map.getExn(state[/* payoutProcesses */1], processId);
        return /* record */[
                /* ventureId */state[/* ventureId */0],
                /* payoutProcesses */state[/* payoutProcesses */1],
                /* unconfirmedTxs : :: */[
                  /* record */[
                    /* txType : Payout */1,
                    /* status : Unconfirmed */1,
                    /* txId */match$2[/* txId */1],
                    /* amount */PayoutTransaction.summary(state[/* network */4], payoutTx)[/* spentWithFees */2],
                    /* date : None */0,
                    /* detailsLink : Venture */Block.__(0, [
                        state[/* ventureId */0],
                        /* Payout */[processId]
                      ])
                  ],
                  state[/* unconfirmedTxs */2]
                ],
                /* confirmedTxs */state[/* confirmedTxs */3],
                /* network */state[/* network */4]
              ];
    case 33 : 
        var match$3 = $$event[0];
        return /* record */[
                /* ventureId */state[/* ventureId */0],
                /* payoutProcesses */state[/* payoutProcesses */1],
                /* unconfirmedTxs : :: */[
                  /* record */[
                    /* txType : Income */0,
                    /* status : Unconfirmed */1,
                    /* txId */match$3[/* txId */2],
                    /* amount */match$3[/* amount */4],
                    /* date : None */0,
                    /* detailsLink : Venture */Block.__(0, [
                        state[/* ventureId */0],
                        /* None */0
                      ])
                  ],
                  state[/* unconfirmedTxs */2]
                ],
                /* confirmedTxs */state[/* confirmedTxs */3],
                /* network */state[/* network */4]
              ];
    case 34 : 
        return mapConfirmation($$event[0], state);
    default:
      return state;
  }
}

exports.make = make;
exports.mapConfirmation = mapConfirmation;
exports.apply = apply;
/* PrimitiveTypes Not a pure module */
