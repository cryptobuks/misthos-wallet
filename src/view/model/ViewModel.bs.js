// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Policy = require("../../application/Policy.bs.js");
var Router = require("../Router.bs.js");
var WalletTypes = require("../../application/wallet/WalletTypes.bs.js");
var Belt_SetString = require("bs-platform/lib/js/belt_SetString.js");
var PrimitiveTypes = require("../../application/PrimitiveTypes.bs.js");
var ViewModel__BalanceCollector = require("./ViewModel__BalanceCollector.bs.js");
var ViewModel__PartnersCollector = require("./ViewModel__PartnersCollector.bs.js");
var ViewModel__TransactionCollector = require("./ViewModel__TransactionCollector.bs.js");

function fromViewModelState(param) {
  return /* record */[
          /* partners */param[/* partnersCollector */7][/* partners */1],
          /* joinVentureUrl */window.location.origin + Router.Config[/* routeToUrl */1](/* JoinVenture */Block.__(1, [
                  param[/* ventureId */1],
                  param[/* localUser */0]
                ]))
        ];
}

var ManagePartnersView = /* module */[/* fromViewModelState */fromViewModelState];

function fromViewModelState$1(param) {
  return /* record */[
          /* balance */ViewModel__BalanceCollector.accountBalance(WalletTypes.AccountIndex[/* default */9], param[/* balanceCollector */6])[/* currentSpendable */0],
          /* ventureName */param[/* name */2]
        ];
}

var PayoutView = /* module */[/* fromViewModelState */fromViewModelState$1];

function make(localUser) {
  return /* record */[
          /* localUser */localUser,
          /* ventureId */PrimitiveTypes.VentureId[/* fromString */1](""),
          /* name */"",
          /* processedItems */Belt_SetString.empty,
          /* metaPolicy */Policy.unanimous,
          /* payouts : [] */0,
          /* balanceCollector */ViewModel__BalanceCollector.make(/* () */0),
          /* partnersCollector */ViewModel__PartnersCollector.make(localUser),
          /* transactionCollector */ViewModel__TransactionCollector.make(/* () */0)
        ];
}

function apply(param, state) {
  var processedItems = state[/* processedItems */3];
  var hash = param[/* hash */1];
  var $$event = param[/* event */0];
  if (Belt_SetString.has(processedItems, hash)) {
    return state;
  } else {
    var state_000 = /* localUser */state[/* localUser */0];
    var state_001 = /* ventureId */state[/* ventureId */1];
    var state_002 = /* name */state[/* name */2];
    var state_003 = /* processedItems */Belt_SetString.add(processedItems, hash);
    var state_004 = /* metaPolicy */state[/* metaPolicy */4];
    var state_005 = /* payouts */state[/* payouts */5];
    var state_006 = /* balanceCollector */ViewModel__BalanceCollector.apply($$event, state[/* balanceCollector */6]);
    var state_007 = /* partnersCollector */ViewModel__PartnersCollector.apply($$event, state[/* partnersCollector */7]);
    var state_008 = /* transactionCollector */ViewModel__TransactionCollector.apply($$event, state[/* transactionCollector */8]);
    var state$1 = /* record */[
      state_000,
      state_001,
      state_002,
      state_003,
      state_004,
      state_005,
      state_006,
      state_007,
      state_008
    ];
    switch ($$event.tag | 0) {
      case 0 : 
          var match = $$event[0];
          return /* record */[
                  state_000,
                  /* ventureId */match[/* ventureId */0],
                  /* name */match[/* ventureName */1],
                  state_003,
                  /* metaPolicy */match[/* metaPolicy */4],
                  state_005,
                  state_006,
                  state_007,
                  state_008
                ];
      case 21 : 
          var match$1 = $$event[0];
          return /* record */[
                  state_000,
                  state_001,
                  state_002,
                  state_003,
                  state_004,
                  /* payouts : :: */[
                    /* record */[
                      /* processId */match$1[/* processId */0],
                      /* payoutTx */match$1[/* data */5][/* payoutTx */1],
                      /* endorsedBy : :: */[
                        match$1[/* supporterId */3],
                        /* [] */0
                      ],
                      /* rejectedBy : [] */0,
                      /* status : PayoutPending */0
                    ],
                    state_005
                  ],
                  state_006,
                  state_007,
                  state_008
                ];
      case 22 : 
          var match$2 = $$event[0];
          var rejectorId = match$2[/* rejectorId */1];
          var processId = match$2[/* processId */0];
          return /* record */[
                  state_000,
                  state_001,
                  state_002,
                  state_003,
                  state_004,
                  /* payouts */List.map((function (p) {
                          var match = PrimitiveTypes.ProcessId[/* eq */5](p[/* processId */0], processId);
                          if (match) {
                            return /* record */[
                                    /* processId */p[/* processId */0],
                                    /* payoutTx */p[/* payoutTx */1],
                                    /* endorsedBy */p[/* endorsedBy */2],
                                    /* rejectedBy : :: */[
                                      rejectorId,
                                      p[/* rejectedBy */3]
                                    ],
                                    /* status */p[/* status */4]
                                  ];
                          } else {
                            return p;
                          }
                        }), state_005),
                  state_006,
                  state_007,
                  state_008
                ];
      case 23 : 
          var match$3 = $$event[0];
          var supporterId = match$3[/* supporterId */1];
          var processId$1 = match$3[/* processId */0];
          return /* record */[
                  state_000,
                  state_001,
                  state_002,
                  state_003,
                  state_004,
                  /* payouts */List.map((function (p) {
                          var match = PrimitiveTypes.ProcessId[/* eq */5](p[/* processId */0], processId$1);
                          if (match) {
                            return /* record */[
                                    /* processId */p[/* processId */0],
                                    /* payoutTx */p[/* payoutTx */1],
                                    /* endorsedBy : :: */[
                                      supporterId,
                                      p[/* endorsedBy */2]
                                    ],
                                    /* rejectedBy */p[/* rejectedBy */3],
                                    /* status */p[/* status */4]
                                  ];
                          } else {
                            return p;
                          }
                        }), state_005),
                  state_006,
                  state_007,
                  state_008
                ];
      case 26 : 
          var match$4 = $$event[0];
          var txId = match$4[/* txId */1];
          var processId$2 = match$4[/* processId */0];
          return /* record */[
                  state_000,
                  state_001,
                  state_002,
                  state_003,
                  state_004,
                  /* payouts */List.map((function (p) {
                          var match = PrimitiveTypes.ProcessId[/* eq */5](p[/* processId */0], processId$2);
                          if (match) {
                            return /* record */[
                                    /* processId */p[/* processId */0],
                                    /* payoutTx */p[/* payoutTx */1],
                                    /* endorsedBy */p[/* endorsedBy */2],
                                    /* rejectedBy */p[/* rejectedBy */3],
                                    /* status : PayoutCompleted */Block.__(0, [txId])
                                  ];
                          } else {
                            return p;
                          }
                        }), state_005),
                  state_006,
                  state_007,
                  state_008
                ];
      case 28 : 
          var match$5 = $$event[0];
          var errorMessage = match$5[/* errorMessage */1];
          var processId$3 = match$5[/* processId */0];
          return /* record */[
                  state_000,
                  state_001,
                  state_002,
                  state_003,
                  state_004,
                  /* payouts */List.map((function (p) {
                          var match = PrimitiveTypes.ProcessId[/* eq */5](p[/* processId */0], processId$3);
                          if (match) {
                            return /* record */[
                                    /* processId */p[/* processId */0],
                                    /* payoutTx */p[/* payoutTx */1],
                                    /* endorsedBy */p[/* endorsedBy */2],
                                    /* rejectedBy */p[/* rejectedBy */3],
                                    /* status : PayoutFailed */Block.__(1, [errorMessage])
                                  ];
                          } else {
                            return p;
                          }
                        }), state_005),
                  state_006,
                  state_007,
                  state_008
                ];
      default:
        return state$1;
    }
  }
}

function init(localUser) {
  var partial_arg = make(localUser);
  return (function (param) {
      return $$Array.fold_left((function (m, item) {
                    return apply(item, m);
                  }), partial_arg, param);
    });
}

function applyAll(events, model) {
  return $$Array.fold_left((function (m, item) {
                return apply(item, m);
              }), model, events);
}

function ventureId(state) {
  return state[/* ventureId */1];
}

function partners(state) {
  return state[/* partnersCollector */7][/* partners */1];
}

function prospects(state) {
  return state[/* partnersCollector */7][/* prospects */2];
}

function removalProspects(state) {
  return state[/* partnersCollector */7][/* removalProspects */3];
}

function ventureName(state) {
  return state[/* name */2];
}

function payouts(state) {
  return state[/* payouts */5];
}

function balance(state) {
  return ViewModel__BalanceCollector.accountBalance(WalletTypes.AccountIndex[/* default */9], state[/* balanceCollector */6]);
}

function transactions(param) {
  var transactionCollector = param[/* transactionCollector */8];
  return /* tuple */[
          transactionCollector[/* confirmedTxs */1],
          transactionCollector[/* unconfirmedTxs */2]
        ];
}

function isPartner(id, param) {
  return ViewModel__PartnersCollector.isPartner(id, param[/* partnersCollector */7]);
}

var ItemsSet = 0;

var PartnersCollector = 0;

var BalanceCollector = 0;

var TransactionCollector = 0;

var managePartnersModal = fromViewModelState;

var payoutModal = fromViewModelState$1;

exports.ItemsSet = ItemsSet;
exports.PartnersCollector = PartnersCollector;
exports.BalanceCollector = BalanceCollector;
exports.TransactionCollector = TransactionCollector;
exports.ManagePartnersView = ManagePartnersView;
exports.PayoutView = PayoutView;
exports.make = make;
exports.apply = apply;
exports.init = init;
exports.applyAll = applyAll;
exports.ventureId = ventureId;
exports.partners = partners;
exports.prospects = prospects;
exports.removalProspects = removalProspects;
exports.ventureName = ventureName;
exports.payouts = payouts;
exports.balance = balance;
exports.transactions = transactions;
exports.isPartner = isPartner;
exports.managePartnersModal = managePartnersModal;
exports.payoutModal = payoutModal;
/* Policy Not a pure module */
