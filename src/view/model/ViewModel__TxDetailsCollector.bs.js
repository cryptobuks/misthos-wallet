// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var Utils = require("../../utils/Utils.bs.js");
var Belt_Map = require("bs-platform/lib/js/belt_Map.js");
var Belt_Set = require("bs-platform/lib/js/belt_Set.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_MapString = require("bs-platform/lib/js/belt_MapString.js");
var Belt_SetString = require("bs-platform/lib/js/belt_SetString.js");
var PrimitiveTypes = require("../../application/PrimitiveTypes.bs.js");
var PayoutTransaction = require("../../application/wallet/PayoutTransaction.bs.js");

function make(localUser) {
  return /* record */[
          /* network : Regtest */0,
          /* localUser */localUser,
          /* payouts */PrimitiveTypes.ProcessId[/* makeMap */8](/* () */0),
          /* txIdToProcessIdMap */Belt_MapString.empty,
          /* txIds */Belt_SetString.empty
        ];
}

function getPayout(processId, param) {
  return Belt_Map.getExn(param[/* payouts */2], processId);
}

function payoutsPendingApproval(param) {
  return Belt_List.keepU(Belt_List.fromArray(Belt_Map.valuesToArray(param[/* payouts */2])), (function (payout) {
                var match = payout[/* status */1];
                if (typeof match === "number" && match === 0) {
                  return true;
                } else {
                  return false;
                }
              }));
}

function apply($$event, state) {
  switch ($$event.tag | 0) {
    case 0 : 
        return /* record */[
                /* network */$$event[0][/* network */6],
                /* localUser */state[/* localUser */1],
                /* payouts */state[/* payouts */2],
                /* txIdToProcessIdMap */state[/* txIdToProcessIdMap */3],
                /* txIds */state[/* txIds */4]
              ];
    case 21 : 
        var match = $$event[0];
        var supporterId = match[/* supporterId */4];
        var eligibleWhenProposing = match[/* eligibleWhenProposing */3];
        var processId = match[/* processId */0];
        return /* record */[
                /* network */state[/* network */0],
                /* localUser */state[/* localUser */1],
                /* payouts */Belt_Map.set(state[/* payouts */2], processId, /* record */[
                      /* processId */processId,
                      /* status : PendingApproval */0,
                      /* canVote */PrimitiveTypes.UserId[/* neq */6](supporterId, state[/* localUser */1]) && Belt_Set.has(eligibleWhenProposing, state[/* localUser */1]),
                      /* summary */PayoutTransaction.summary(state[/* network */0], match[/* data */6][/* payoutTx */1]),
                      /* voters */Belt_List.mapU(Belt_Set.toList(eligibleWhenProposing), (function (userId) {
                              var match = PrimitiveTypes.UserId[/* eq */5](supporterId, userId);
                              return /* record */[
                                      /* userId */userId,
                                      /* voteStatus */match ? /* Endorsed */1 : /* Pending */0
                                    ];
                            })),
                      /* txId : None */0,
                      /* date : None */0
                    ]),
                /* txIdToProcessIdMap */state[/* txIdToProcessIdMap */3],
                /* txIds */state[/* txIds */4]
              ];
    case 22 : 
        var match$1 = $$event[0];
        var rejectorId = match$1[/* rejectorId */1];
        return /* record */[
                /* network */state[/* network */0],
                /* localUser */state[/* localUser */1],
                /* payouts */Belt_Map.update(state[/* payouts */2], match$1[/* processId */0], (function (param) {
                        return Utils.mapOption((function (payout) {
                                      return /* record */[
                                              /* processId */payout[/* processId */0],
                                              /* status */payout[/* status */1],
                                              /* canVote */payout[/* canVote */2] && PrimitiveTypes.UserId[/* neq */6](rejectorId, state[/* localUser */1]),
                                              /* summary */payout[/* summary */3],
                                              /* voters */Belt_List.mapU(payout[/* voters */4], (function (param) {
                                                      var userId = param[/* userId */0];
                                                      var match = PrimitiveTypes.UserId[/* eq */5](userId, rejectorId);
                                                      if (match) {
                                                        return /* record */[
                                                                /* userId */userId,
                                                                /* voteStatus : Rejected */2
                                                              ];
                                                      } else {
                                                        return /* record */[
                                                                /* userId */userId,
                                                                /* voteStatus */param[/* voteStatus */1]
                                                              ];
                                                      }
                                                    })),
                                              /* txId */payout[/* txId */5],
                                              /* date */payout[/* date */6]
                                            ];
                                    }), param);
                      })),
                /* txIdToProcessIdMap */state[/* txIdToProcessIdMap */3],
                /* txIds */state[/* txIds */4]
              ];
    case 23 : 
        var match$2 = $$event[0];
        var supporterId$1 = match$2[/* supporterId */1];
        return /* record */[
                /* network */state[/* network */0],
                /* localUser */state[/* localUser */1],
                /* payouts */Belt_Map.update(state[/* payouts */2], match$2[/* processId */0], (function (param) {
                        return Utils.mapOption((function (payout) {
                                      return /* record */[
                                              /* processId */payout[/* processId */0],
                                              /* status */payout[/* status */1],
                                              /* canVote */payout[/* canVote */2] && PrimitiveTypes.UserId[/* neq */6](supporterId$1, state[/* localUser */1]),
                                              /* summary */payout[/* summary */3],
                                              /* voters */Belt_List.mapU(payout[/* voters */4], (function (param) {
                                                      var userId = param[/* userId */0];
                                                      var match = PrimitiveTypes.UserId[/* eq */5](userId, supporterId$1);
                                                      if (match) {
                                                        return /* record */[
                                                                /* userId */userId,
                                                                /* voteStatus : Endorsed */1
                                                              ];
                                                      } else {
                                                        return /* record */[
                                                                /* userId */userId,
                                                                /* voteStatus */param[/* voteStatus */1]
                                                              ];
                                                      }
                                                    })),
                                              /* txId */payout[/* txId */5],
                                              /* date */payout[/* date */6]
                                            ];
                                    }), param);
                      })),
                /* txIdToProcessIdMap */state[/* txIdToProcessIdMap */3],
                /* txIds */state[/* txIds */4]
              ];
    case 24 : 
        return /* record */[
                /* network */state[/* network */0],
                /* localUser */state[/* localUser */1],
                /* payouts */Belt_Map.update(state[/* payouts */2], $$event[0][/* processId */0], (function (param) {
                        return Utils.mapOption((function (payout) {
                                      return /* record */[
                                              /* processId */payout[/* processId */0],
                                              /* status : Accepted */1,
                                              /* canVote */false,
                                              /* summary */payout[/* summary */3],
                                              /* voters */payout[/* voters */4],
                                              /* txId */payout[/* txId */5],
                                              /* date */payout[/* date */6]
                                            ];
                                    }), param);
                      })),
                /* txIdToProcessIdMap */state[/* txIdToProcessIdMap */3],
                /* txIds */state[/* txIds */4]
              ];
    case 26 : 
        var match$3 = $$event[0];
        var txId = match$3[/* txId */1];
        var processId$1 = match$3[/* processId */0];
        return /* record */[
                /* network */state[/* network */0],
                /* localUser */state[/* localUser */1],
                /* payouts */Belt_Map.update(state[/* payouts */2], processId$1, (function (param) {
                        return Utils.mapOption((function (payout) {
                                      var match = Belt_SetString.has(state[/* txIds */4], txId);
                                      return /* record */[
                                              /* processId */payout[/* processId */0],
                                              /* status */match ? /* Confirmed */3 : /* Unconfirmed */2,
                                              /* canVote */payout[/* canVote */2],
                                              /* summary */payout[/* summary */3],
                                              /* voters */payout[/* voters */4],
                                              /* txId : Some */[txId],
                                              /* date */payout[/* date */6]
                                            ];
                                    }), param);
                      })),
                /* txIdToProcessIdMap */Belt_MapString.set(state[/* txIdToProcessIdMap */3], txId, processId$1),
                /* txIds */state[/* txIds */4]
              ];
    case 28 : 
        var match$4 = $$event[0];
        var errorMessage = match$4[/* errorMessage */1];
        return /* record */[
                /* network */state[/* network */0],
                /* localUser */state[/* localUser */1],
                /* payouts */Belt_Map.update(state[/* payouts */2], match$4[/* processId */0], (function (param) {
                        return Utils.mapOption((function (payout) {
                                      return /* record */[
                                              /* processId */payout[/* processId */0],
                                              /* status : Failed */[errorMessage],
                                              /* canVote */payout[/* canVote */2],
                                              /* summary */payout[/* summary */3],
                                              /* voters */payout[/* voters */4],
                                              /* txId */payout[/* txId */5],
                                              /* date */payout[/* date */6]
                                            ];
                                    }), param);
                      })),
                /* txIdToProcessIdMap */state[/* txIdToProcessIdMap */3],
                /* txIds */state[/* txIds */4]
              ];
    case 34 : 
        var match$5 = $$event[0];
        var unixTime = match$5[/* unixTime */2];
        var txId$1 = match$5[/* txId */0];
        var processId$2 = Belt_MapString.get(state[/* txIdToProcessIdMap */3], txId$1);
        if (processId$2) {
          return /* record */[
                  /* network */state[/* network */0],
                  /* localUser */state[/* localUser */1],
                  /* payouts */Belt_Map.update(state[/* payouts */2], processId$2[0], (function (param) {
                          return Utils.mapOption((function (payout) {
                                        return /* record */[
                                                /* processId */payout[/* processId */0],
                                                /* status : Confirmed */3,
                                                /* canVote */payout[/* canVote */2],
                                                /* summary */payout[/* summary */3],
                                                /* voters */payout[/* voters */4],
                                                /* txId */payout[/* txId */5],
                                                /* date : Some */[new Date(unixTime * 1000)]
                                              ];
                                      }), param);
                        })),
                  /* txIdToProcessIdMap */state[/* txIdToProcessIdMap */3],
                  /* txIds */Belt_SetString.add(state[/* txIds */4], txId$1)
                ];
        } else {
          return /* record */[
                  /* network */state[/* network */0],
                  /* localUser */state[/* localUser */1],
                  /* payouts */state[/* payouts */2],
                  /* txIdToProcessIdMap */state[/* txIdToProcessIdMap */3],
                  /* txIds */Belt_SetString.add(state[/* txIds */4], txId$1)
                ];
        }
    default:
      return state;
  }
}

exports.make = make;
exports.getPayout = getPayout;
exports.payoutsPendingApproval = payoutsPendingApproval;
exports.apply = apply;
/* Utils Not a pure module */
