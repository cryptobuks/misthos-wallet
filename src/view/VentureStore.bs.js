// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Event = require("../application/events/Event.bs.js");
var Router = require("./Router.bs.js");
var Venture = require("../application/Venture.bs.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var ViewModel = require("./ViewModel.bs.js");
var SyncWorker = require("../SyncWorker.bs.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var PrimitiveTypes = require("../application/PrimitiveTypes.bs.js");
var IncomeWorkerClient = require("../workers/IncomeWorkerClient.bs.js");
var WorkerLocalStorage = require("../workers/WorkerLocalStorage.bs.js");
var PersistWorkerClient = require("../workers/PersistWorkerClient.bs.js");

function loadVentureAndIndex(send, session, currentRoute, param) {
  var ventureState = param[/* ventureState */1];
  if (typeof session !== "number") {
    param[/* persistWorker */4][0].postMessage(/* InitializeLocalStorage */Block.__(0, [
            session[0][/* userId */0],
            WorkerLocalStorage.readBlockstackItemsFromStorage(/* () */0)
          ]));
    Venture.Index[/* load */0](/* () */0).then((function (index) {
            return Promise.resolve(Curry._1(send, /* UpdateIndex */Block.__(0, [index])));
          }));
  }
  if (typeof session === "number") {
    return /* None */0;
  } else {
    var sessionData = session[0];
    if (typeof currentRoute === "number") {
      return /* None */0;
    } else if (currentRoute.tag) {
      var userId = currentRoute[1];
      var ventureId = currentRoute[0];
      setTimeout((function () {
              Venture.join(sessionData, userId, ventureId, ViewModel.make(/* () */0), ViewModel.apply).then((function (param) {
                      var venture = param[1];
                      Curry._1(send, /* UpdateVenture */Block.__(1, [/* VentureLoaded */[venture]]));
                      ReasonReact.Router[/* push */0](Router.Config[/* routeToUrl */1](/* Venture */Block.__(0, [Venture.getId(venture)])));
                      return Promise.resolve(Curry._1(send, /* UpdateIndex */Block.__(0, [param[0]])));
                    }));
              return /* () */0;
            }), 1);
      return /* JoiningVenture */2;
    } else {
      var id = currentRoute[0];
      var exit = 0;
      if (typeof ventureState === "number") {
        exit = 1;
      } else {
        var venture = ventureState[0];
        if (Caml_obj.caml_notequal(id, Venture.getId(venture))) {
          setTimeout((function () {
                  Venture.load(sessionData, id, ViewModel.make(/* () */0), ViewModel.apply).then((function (venture) {
                          return Promise.resolve(Curry._1(send, /* UpdateVenture */Block.__(1, [/* VentureLoaded */[venture]])));
                        }));
                  return /* () */0;
                }), 1);
          return /* LoadingVenture */3;
        } else if (Caml_obj.caml_equal(id, Venture.getId(venture))) {
          return ventureState;
        } else {
          exit = 1;
        }
      }
      if (exit === 1) {
        setTimeout((function () {
                Venture.load(sessionData, id, ViewModel.make(/* () */0), ViewModel.apply).then((function (venture) {
                        return Promise.resolve(Curry._1(send, /* UpdateVenture */Block.__(1, [/* VentureLoaded */[venture]])));
                      }));
                return /* () */0;
              }), 1);
        return /* LoadingVenture */3;
      }
      
    }
  }
}

var component = ReasonReact.reducerComponent("VentureStore");

function make(currentRoute, session, children) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */(function (param) {
              var state = param[/* state */1];
              return /* record */[
                      /* index */state[/* index */0],
                      /* ventureState */loadVentureAndIndex(param[/* send */3], session, currentRoute, state),
                      /* syncWorker */state[/* syncWorker */2],
                      /* incomeWorker */state[/* incomeWorker */3],
                      /* persistWorker */state[/* persistWorker */4]
                    ];
            }),
          /* didMount */(function (param) {
              loadVentureAndIndex(param[/* send */3], session, currentRoute, param[/* state */1]);
              return /* () */0;
            }),
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (param) {
              var match = param[/* state */1];
              return Curry._3(children, match[/* index */0], match[/* ventureState */1], param[/* send */3]);
            }),
          /* initialState */(function () {
              return /* record */[
                      /* index : [] */0,
                      /* ventureState : None */0,
                      /* syncWorker */[SyncWorker.make((function (prim) {
                                console.log(prim);
                                return /* () */0;
                              }))],
                      /* incomeWorker */[Curry._1(IncomeWorkerClient.make, (function (prim) {
                                console.log(prim);
                                return /* () */0;
                              }))],
                      /* persistWorker */[Curry._1(PersistWorkerClient.make, (function (prim) {
                                console.log(prim);
                                return /* () */0;
                              }))]
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              switch (action.tag | 0) {
                case 0 : 
                    return /* Update */Block.__(0, [/* record */[
                                /* index */action[0],
                                /* ventureState */state[/* ventureState */1],
                                /* syncWorker */state[/* syncWorker */2],
                                /* incomeWorker */state[/* incomeWorker */3],
                                /* persistWorker */state[/* persistWorker */4]
                              ]]);
                case 1 : 
                    var ventureState = action[0];
                    return /* UpdateWithSideEffects */Block.__(2, [
                              /* record */[
                                /* index */state[/* index */0],
                                /* ventureState */ventureState,
                                /* syncWorker */state[/* syncWorker */2],
                                /* incomeWorker */state[/* incomeWorker */3],
                                /* persistWorker */state[/* persistWorker */4]
                              ],
                              (function () {
                                  setTimeout((function () {
                                          if (typeof ventureState === "number") {
                                            SyncWorker.postMessage(state[/* syncWorker */2][0], /* Wait */0);
                                            state[/* incomeWorker */3][0].postMessage(/* Wait */0);
                                            return /* () */0;
                                          } else {
                                            var venture = ventureState[0];
                                            state[/* persistWorker */4][0].postMessage(/* PersistVenture */Block.__(1, [Venture.getId(venture)]));
                                            Venture.getPartnerHistoryUrls(venture).then((function (urls) {
                                                    return Promise.resolve(SyncWorker.postMessage(state[/* syncWorker */2][0], /* RegularlyFetch */[
                                                                    urls,
                                                                    Venture.getSummary(venture)
                                                                  ]));
                                                  }));
                                            state[/* incomeWorker */3][0].postMessage(/* MonitorAddresses */[
                                                  Venture.Wallet[/* getExposedAddresses */1](venture),
                                                  Venture.Wallet[/* getKnownTransactionIds */2](venture)
                                                ]);
                                            return /* () */0;
                                          }
                                        }), 1);
                                  return /* () */0;
                                })
                            ]);
                case 2 : 
                    var name = action[1];
                    var session = action[0];
                    return /* UpdateWithSideEffects */Block.__(2, [
                              /* record */[
                                /* index */state[/* index */0],
                                /* ventureState : CreatingVenture */1,
                                /* syncWorker */state[/* syncWorker */2],
                                /* incomeWorker */state[/* incomeWorker */3],
                                /* persistWorker */state[/* persistWorker */4]
                              ],
                              (function (param) {
                                  var send = param[/* send */3];
                                  setTimeout((function () {
                                          Curry._4(Venture.Cmd[/* Create */0][/* exec */0], session, name, ViewModel.make(/* () */0), ViewModel.apply).then((function (param) {
                                                  var venture = param[1];
                                                  Curry._1(send, /* UpdateVenture */Block.__(1, [/* VentureLoaded */[venture]]));
                                                  ReasonReact.Router[/* push */0](Router.Config[/* routeToUrl */1](/* Venture */Block.__(0, [Venture.getId(venture)])));
                                                  return Promise.resolve(Curry._1(send, /* UpdateIndex */Block.__(0, [param[0]])));
                                                }));
                                          return /* () */0;
                                        }), 1);
                                  return /* () */0;
                                })
                            ]);
                case 3 : 
                    var eventLogs = action[0][0];
                    return /* SideEffects */Block.__(1, [(function (param) {
                                  var send = param[/* send */3];
                                  var state = param[/* state */1];
                                  var match = state[/* ventureState */1];
                                  if (typeof match === "number") {
                                    return SyncWorker.postMessage(state[/* syncWorker */2][0], /* Wait */0);
                                  } else {
                                    Curry._2(Venture.Cmd[/* SynchronizeLogs */1][/* exec */0], eventLogs, match[0]).then((function (param) {
                                            if (param.tag) {
                                              console.log("An error occured while synchronizing");
                                              console.log("Adding event: ");
                                              console.log(Event.encode(param[1][/* event */0]));
                                              console.log("failed because: ", Venture.Validation[/* resultToString */0](param[2]));
                                              return Promise.resolve(Curry._1(send, /* UpdateVenture */Block.__(1, [/* VentureLoaded */[param[0]]])));
                                            } else {
                                              return Promise.resolve(Curry._1(send, /* UpdateVenture */Block.__(1, [/* VentureLoaded */[param[0]]])));
                                            }
                                          }));
                                    return /* () */0;
                                  }
                                })]);
                case 4 : 
                    var txs = action[0][0];
                    return /* SideEffects */Block.__(1, [(function (param) {
                                  var send = param[/* send */3];
                                  var state = param[/* state */1];
                                  var match = state[/* ventureState */1];
                                  if (typeof match === "number") {
                                    state[/* incomeWorker */3][0].postMessage(/* Wait */0);
                                    return /* () */0;
                                  } else {
                                    Curry._2(Venture.Cmd[/* SynchronizeWallet */2][/* exec */0], txs, match[0]).then((function (param) {
                                            return Promise.resolve(Curry._1(send, /* UpdateVenture */Block.__(1, [/* VentureLoaded */[param[0]]])));
                                          }));
                                    return /* () */0;
                                  }
                                })]);
                case 5 : 
                    console.log("Venture '" + (PrimitiveTypes.VentureId[/* toString */0](action[0][0]) + "' persisted"));
                    return /* NoUpdate */0;
                
              }
            }),
          /* subscriptions */(function (param) {
              var send = param[/* send */3];
              var state = param[/* state */1];
              return /* :: */[
                      /* Sub */[
                        (function () {
                            state[/* syncWorker */2][0].terminate();
                            var worker = SyncWorker.make((function (message) {
                                    return Curry._1(send, /* SyncWorkerMessage */Block.__(3, [message]));
                                  }));
                            state[/* syncWorker */2][0] = worker;
                            return worker;
                          }),
                        (function (prim) {
                            prim.terminate();
                            return /* () */0;
                          })
                      ],
                      /* :: */[
                        /* Sub */[
                          (function () {
                              state[/* incomeWorker */3][0].terminate();
                              var worker = Curry._1(IncomeWorkerClient.make, (function (message) {
                                      return Curry._1(send, /* IncomeWorkerMessage */Block.__(4, [message]));
                                    }));
                              state[/* incomeWorker */3][0] = worker;
                              return worker;
                            }),
                          (function (prim) {
                              prim.terminate();
                              return /* () */0;
                            })
                        ],
                        /* :: */[
                          /* Sub */[
                            (function () {
                                state[/* persistWorker */4][0].terminate();
                                var worker = Curry._1(PersistWorkerClient.make, (function (message) {
                                        return Curry._1(send, /* PersistWorkerMessage */Block.__(5, [message]));
                                      }));
                                state[/* persistWorker */4][0] = worker;
                                return worker;
                              }),
                            (function (prim) {
                                prim.terminate();
                                return /* () */0;
                              })
                          ],
                          /* [] */0
                        ]
                      ]
                    ];
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

exports.loadVentureAndIndex = loadVentureAndIndex;
exports.component = component;
exports.make = make;
/* component Not a pure module */
