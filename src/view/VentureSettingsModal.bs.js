// Generated by BUCKLESCRIPT VERSION 4.0.3, PLEASE EDIT WITH CARE
'use strict';

var Grid = require("./components/Grid.bs.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_option = require("bs-platform/lib/js/js_option.js");
var ViewCommon = require("./ViewCommon.bs.js");
var MTypography = require("./components/MTypography.bs.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var ProposeButton = require("./components/ProposeButton.bs.js");

var component = ReasonReact.statelessComponent("VentureSettings");

function make(viewData, commands, cmdStatus, _) {
  var executeSubmit = function () {
    Curry._1(commands[/* preSubmit */11], "Please connect your ledger device");
    Curry._1(viewData[/* getCustodianKeyChain */2], /* () */0).then((function (param) {
            if (typeof param === "number") {
              return Promise.resolve(Curry._1(commands[/* preSubmitError */12], "This device has the wrong seed"));
            } else if (param.tag) {
              var match = param[0];
              if (match) {
                return Promise.resolve(Curry._1(commands[/* preSubmitError */12], match[0]));
              } else {
                return Promise.resolve(Curry._1(commands[/* preSubmitError */12], "An unknown error has occured"));
              }
            } else {
              return Promise.resolve(Curry._1(commands[/* submitCustodianKeyChain */7], param[0]));
            }
          }));
    return /* () */0;
  };
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function () {
              var match = viewData[/* ledgerId */0];
              var match$1 = viewData[/* ledgerUpToDate */1];
              var match$2 = match !== undefined ? (
                  match$1 ? /* tuple */[
                      "You have integrated your ledger device.",
                      "Up to date"
                    ] : /* tuple */[
                      "You have integrated your ledger device.",
                      "Needs rotating."
                    ]
                ) : /* tuple */[
                  "You currently have no ledger device integrated into this venture.",
                  "Not submitted"
                ];
              var match$3 = viewData[/* ledgerUpToDate */1] && Js_option.isSome(viewData[/* ledgerId */0]);
              return ReasonReact.element(undefined, undefined, Grid.make(Js_primitive.some(ViewCommon.text("Venture Settings")), undefined, undefined, undefined, Js_primitive.some(React.createElement("div", undefined, ReasonReact.element(undefined, undefined, MTypography.make(/* Title */594052472, undefined, undefined, undefined, undefined, undefined, /* array */[ViewCommon.text("Hardware Wallet Settings")])), ReasonReact.element(undefined, undefined, MTypography.make(/* Body2 */-904051920, undefined, true, undefined, undefined, undefined, /* array */[ViewCommon.text(match$2[0])])), ReasonReact.element(undefined, undefined, MTypography.make(/* Body2 */-904051920, undefined, undefined, undefined, undefined, undefined, /* array */[ViewCommon.text("Key status: " + match$2[1])])), match$3 ? null : ReasonReact.element(undefined, undefined, ProposeButton.make("Submit public keys", undefined, executeSubmit, undefined, undefined, true, false, cmdStatus, /* array */[])))), undefined, undefined, undefined, /* array */[]));
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

var text = ViewCommon.text;

var extractString = ViewCommon.extractString;

var ignoreEvent = ViewCommon.ignoreEvent;

var ViewData = 0;

exports.text = text;
exports.extractString = extractString;
exports.ignoreEvent = ignoreEvent;
exports.ViewData = ViewData;
exports.component = component;
exports.make = make;
/* component Not a pure module */
