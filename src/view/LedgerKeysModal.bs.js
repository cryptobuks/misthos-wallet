// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Grid = require("./components/Grid.bs.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Ledger = require("../ffi/Ledger.bs.js");
var Bitcoin = require("../ffi/Bitcoin.bs.js");
var ViewCommon = require("./ViewCommon.bs.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var BitcoinjsLib = require("bitcoinjs-lib");
var HwAppBtc = require("@ledgerhq/hw-app-btc");
var HwTransportU2f = require("@ledgerhq/hw-transport-u2f");

function createConnection(send) {
  console.log("createConnection");
  HwTransportU2f.default.create().then((function (transport) {
            return Promise.resolve(Curry._1(send, /* TransportCreated */Block.__(0, [transport])));
          })).catch((function (e) {
          console.log(e);
          return Promise.resolve(Curry._1(send, /* TransportCreationFailed */Block.__(1, [Ledger.decodeTransportError(e)])));
        }));
  return /* () */0;
}

var component = ReasonReact.reducerComponent("ConnectLedger");

function make() {
  var statusToString = function (param) {
    if (typeof param === "number") {
      return "Connecting";
    } else if (param.tag) {
      return "Connected";
    } else {
      return "ConnectionFailed(" + (Ledger.transportErrorToString(param[0]) + ")");
    }
  };
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function (param) {
              return createConnection(param[/* send */3]);
            }),
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (param) {
              return ReasonReact.element(/* None */0, /* None */0, Grid.make(/* Some */[ViewCommon.text("Connect Ledger")], /* None */0, /* None */0, /* None */0, /* Some */[React.createElement("div", undefined, ViewCommon.text("status" + statusToString(param[/* state */1][/* connectionStatus */0])))], /* None */0, /* None */0, /* None */0, /* array */[]));
            }),
          /* initialState */(function () {
              return /* record */[/* connectionStatus : Connecting */0];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, _) {
              switch (action.tag | 0) {
                case 0 : 
                    var btc = new HwAppBtc.default(action[0]);
                    console.log("Connected");
                    return /* SideEffects */Block.__(1, [(function (param) {
                                  var send = param[/* send */3];
                                  setTimeout((function () {
                                          Ledger.getHDNode("44'/0'/0'/0", BitcoinjsLib.networks.bitcoin, btc).then((function (hdNode) {
                                                    return Promise.resolve(Curry._1(send, /* HDNodeFetched */Block.__(2, [hdNode])));
                                                  })).catch((function (error) {
                                                  console.log(error);
                                                  return Promise.resolve(Curry._1(send, /* FailedToFetchHDNode */Block.__(3, [Ledger.decodeTransportError(error)])));
                                                }));
                                          return /* () */0;
                                        }), 0);
                                  return /* () */0;
                                })]);
                case 2 : 
                    var hdNode = action[0];
                    console.log(Bitcoin.Address[/* fromKeyPair */1](BitcoinjsLib.ECPair.fromPublicKey(hdNode.publicKey, {
                                  network: hdNode.network
                                })));
                    return /* Update */Block.__(0, [/* record */[/* connectionStatus : Connected */Block.__(1, [hdNode])]]);
                case 1 : 
                case 3 : 
                    return /* Update */Block.__(0, [/* record */[/* connectionStatus : ConnectionFailed */Block.__(0, [action[0]])]]);
                
              }
            }),
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

var text = ViewCommon.text;

var extractString = ViewCommon.extractString;

var ignoreEvent = ViewCommon.ignoreEvent;

exports.text = text;
exports.extractString = extractString;
exports.ignoreEvent = ignoreEvent;
exports.createConnection = createConnection;
exports.component = component;
exports.make = make;
/* component Not a pure module */
