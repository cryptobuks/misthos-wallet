// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var BTC = require("../application/wallet/BTC.bs.js");
var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Payout = require("./components/Payout.bs.js");
var Router = require("./Router.bs.js");
var $$String = require("bs-platform/lib/js/string.js");
var Venture = require("../application/Venture.bs.js");
var ViewModel = require("./ViewModel.bs.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var WalletTypes = require("../application/wallet/WalletTypes.bs.js");
var PrimitiveTypes = require("../application/PrimitiveTypes.bs.js");

function text(prim) {
  return prim;
}

function changeNewPartnerId($$event) {
  return /* ChangeNewPartnerId */Block.__(0, [$$event.target.value]);
}

var component = ReasonReact.reducerComponent("SelectedVenture");

function make(initialVenture, updateVenture, session, _) {
  var newrecord = component.slice();
  newrecord[/* willReceiveProps */3] = (function (param) {
      return /* record */[
              /* venture */initialVenture,
              /* viewModel */Venture.getListenerState(initialVenture),
              /* prospectId */param[/* state */2][/* prospectId */2],
              /* balance */Venture.Wallet[/* balance */0](initialVenture)
            ];
    });
  newrecord[/* render */9] = (function (param) {
      var send = param[/* send */4];
      var state = param[/* state */2];
      var partners = $$Array.of_list(List.map((function (m) {
                  var match = PrimitiveTypes.UserId[/* eq */5](session[/* userId */0], m[/* userId */0]);
                  var match$1 = List.exists((function (p) {
                          return PrimitiveTypes.UserId[/* eq */5](p[/* userId */1], m[/* userId */0]);
                        }), ViewModel.removalProspects(state[/* viewModel */1]));
                  return React.createElement("li", {
                              key: PrimitiveTypes.UserId[/* toString */0](m[/* userId */0])
                            }, React.createElement("div", undefined, PrimitiveTypes.UserId[/* toString */0](m[/* userId */0]), match !== 0 || match$1 !== 0 ? null : React.createElement("button", {
                                        onClick: (function () {
                                            return Curry._1(send, /* RemovePartner */Block.__(2, [m[/* userId */0]]));
                                          })
                                      }, "Propose Removal")));
                }), ViewModel.partners(state[/* viewModel */1])));
      var prospects = $$Array.of_list(List.map((function (prospect) {
                  return React.createElement("li", {
                              key: PrimitiveTypes.UserId[/* toString */0](prospect[/* userId */1])
                            }, "'" + (PrimitiveTypes.UserId[/* toString */0](prospect[/* userId */1]) + ("' endorsed by: " + List.fold_left((function (state, partnerId) {
                                        return state + (partnerId + " ");
                                      }), "", List.map(PrimitiveTypes.UserId[/* toString */0], prospect[/* endorsedBy */2])))), List.mem(session[/* userId */0], prospect[/* endorsedBy */2]) === /* false */0 ? React.createElement("button", {
                                    onClick: (function () {
                                        return Curry._1(send, /* EndorsePartner */Block.__(1, [prospect[/* processId */0]]));
                                      })
                                  }, "Endorse Partner") : null);
                }), ViewModel.prospects(state[/* viewModel */1])));
      var removalProspects = $$Array.of_list(List.map((function (prospect) {
                  return React.createElement("li", {
                              key: PrimitiveTypes.UserId[/* toString */0](prospect[/* userId */1])
                            }, "'" + (PrimitiveTypes.UserId[/* toString */0](prospect[/* userId */1]) + ("' endorsed by: " + List.fold_left((function (state, partnerId) {
                                        return state + (partnerId + " ");
                                      }), "", List.map(PrimitiveTypes.UserId[/* toString */0], prospect[/* endorsedBy */2])))), List.mem(session[/* userId */0], prospect[/* endorsedBy */2]) === /* false */0 ? React.createElement("button", {
                                    onClick: (function () {
                                        return Curry._1(send, /* EndorsePartnerRemoval */Block.__(3, [prospect[/* processId */0]]));
                                      })
                                  }, "Endorse Removal") : null);
                }), ViewModel.removalProspects(state[/* viewModel */1])));
      var addresses = $$Array.of_list(List.map((function (address) {
                  return React.createElement("li", {
                              key: address
                            }, address);
                }), ViewModel.incomeAddresses(state[/* viewModel */1])));
      var payouts = $$Array.of_list(List.map((function (payout) {
                  var match = payout[/* status */3];
                  var tmp;
                  tmp = typeof match === "number" ? "pending" : (
                      match.tag ? "failed (error: '" + (match[0] + "')") : "completed (txId: " + (match[0] + ")")
                    );
                  var match$1 = payout[/* status */3];
                  var match$2 = List.mem(session[/* userId */0], payout[/* endorsedBy */2]);
                  return React.createElement("li", {
                              key: PrimitiveTypes.ProcessId[/* toString */0](payout[/* processId */0])
                            }, "'" + (PrimitiveTypes.ProcessId[/* toString */0](payout[/* processId */0]) + ("' status: " + (tmp + (" endorsed by: " + List.fold_left((function (state, partnerId) {
                                            return state + (partnerId + " ");
                                          }), "", List.map(PrimitiveTypes.UserId[/* toString */0], payout[/* endorsedBy */2])))))), typeof match$1 === "number" && match$2 === 0 ? React.createElement("button", {
                                    onClick: (function () {
                                        return Curry._1(send, /* EndorsePayout */Block.__(5, [payout[/* processId */0]]));
                                      })
                                  }, "Endorse Payout") : null);
                }), ViewModel.payouts(state[/* viewModel */1])));
      return React.createElement("div", undefined, React.createElement("div", undefined, React.createElement("h2", undefined, ViewModel.ventureName(state[/* viewModel */1])), "Join Venture url: " + (window.location.origin + Router.Config[/* routeToUrl */1](/* JoinVenture */Block.__(1, [
                              Venture.getId(initialVenture),
                              session[/* userId */0]
                            ]))), React.createElement("h3", undefined, "Partners:"), React.createElement("ul", undefined, partners), React.createElement("h4", undefined, "Prospects:"), React.createElement("ul", undefined, prospects), React.createElement("h4", undefined, "To be removed:"), React.createElement("ul", undefined, removalProspects), React.createElement("input", {
                          autoFocus: false,
                          placeholder: "BlockstackId",
                          value: state[/* prospectId */2],
                          onChange: (function (e) {
                              return Curry._1(send, /* ChangeNewPartnerId */Block.__(0, [e.target.value]));
                            })
                        }), React.createElement("button", {
                          onClick: (function () {
                              return Curry._1(send, /* ProposePartner */0);
                            })
                        }, "Propose Partner"), React.createElement("h3", undefined, "Wallet:"), React.createElement("h4", undefined, "blance: "), "income: " + (BTC.format(state[/* balance */3][/* income */0]) + (" spent: " + (BTC.format(state[/* balance */3][/* spent */1]) + (" reserved: " + BTC.format(state[/* balance */3][/* reserved */2]))))), React.createElement("h4", undefined, "Income Addresses:"), React.createElement("ul", undefined, addresses), React.createElement("button", {
                          onClick: (function () {
                              return Curry._1(send, /* GetIncomeAddress */1);
                            })
                        }, "Get New Income Address"), ReasonReact.element(/* None */0, /* None */0, Payout.make((function (destinations) {
                                return Curry._1(send, /* ProposePayout */Block.__(4, [destinations]));
                              }), /* array */[])), React.createElement("h4", undefined, "Payouts:"), React.createElement("ul", undefined, payouts)));
    });
  newrecord[/* initialState */10] = (function () {
      return /* record */[
              /* venture */initialVenture,
              /* viewModel */Venture.getListenerState(initialVenture),
              /* prospectId */"",
              /* balance */Venture.Wallet[/* balance */0](initialVenture)
            ];
    });
  newrecord[/* reducer */12] = (function (action, state) {
      if (typeof action === "number") {
        if (action === 0) {
          var prospectId = $$String.trim(state[/* prospectId */2]);
          if (prospectId === "") {
            return /* NoUpdate */0;
          } else {
            return /* SideEffects */Block.__(2, [(function () {
                          Curry._2(Venture.Cmd[/* ProposePartner */3][/* exec */0], PrimitiveTypes.UserId[/* fromString */1](prospectId), state[/* venture */0]).then((function (result) {
                                  return Promise.resolve(typeof result === "number" ? (
                                                result !== 0 ? (console.log("NoUserInfo"), /* () */0) : (console.log("PartnerAlreadyExists"), /* () */0)
                                              ) : Curry._1(updateVenture, result[0]));
                                }));
                          return /* () */0;
                        })]);
          }
        } else {
          return /* SideEffects */Block.__(2, [(function () {
                        Curry._2(Venture.Cmd[/* ExposeIncomeAddress */7][/* exec */0], WalletTypes.AccountIndex[/* default */8], state[/* venture */0]).then((function (result) {
                                return Promise.resolve(Curry._1(updateVenture, result[1]));
                              }));
                        return /* () */0;
                      })]);
        }
      } else {
        switch (action.tag | 0) {
          case 0 : 
              return /* Update */Block.__(0, [/* record */[
                          /* venture */state[/* venture */0],
                          /* viewModel */state[/* viewModel */1],
                          /* prospectId */action[0],
                          /* balance */state[/* balance */3]
                        ]]);
          case 1 : 
              var processId = action[0];
              return /* SideEffects */Block.__(2, [(function () {
                            Curry._2(Venture.Cmd[/* EndorsePartner */4][/* exec */0], processId, state[/* venture */0]).then((function (result) {
                                    return Promise.resolve(Curry._1(updateVenture, result[0]));
                                  }));
                            return /* () */0;
                          })]);
          case 2 : 
              var partnerId = action[0];
              return /* SideEffects */Block.__(2, [(function () {
                            Curry._2(Venture.Cmd[/* ProposePartnerRemoval */5][/* exec */0], partnerId, state[/* venture */0]).then((function (result) {
                                    return Promise.resolve(result ? Curry._1(updateVenture, result[0]) : (console.log("PartnerDoesNotExist"), /* () */0));
                                  }));
                            return /* () */0;
                          })]);
          case 3 : 
              var processId$1 = action[0];
              return /* SideEffects */Block.__(2, [(function () {
                            Curry._2(Venture.Cmd[/* EndorsePartnerRemoval */6][/* exec */0], processId$1, state[/* venture */0]).then((function (result) {
                                    return Promise.resolve(Curry._1(updateVenture, result[0]));
                                  }));
                            return /* () */0;
                          })]);
          case 4 : 
              var destinations = action[0];
              return /* SideEffects */Block.__(2, [(function () {
                            Curry._4(Venture.Cmd[/* ProposePayout */8][/* exec */0], WalletTypes.AccountIndex[/* default */8], destinations, BTC.fromSatoshis(/* int64 */[
                                        /* hi */0,
                                        /* lo */5
                                      ]), state[/* venture */0]).then((function (result) {
                                    return Promise.resolve(Curry._1(updateVenture, result[0]));
                                  }));
                            return /* () */0;
                          })]);
          case 5 : 
              var processId$2 = action[0];
              return /* SideEffects */Block.__(2, [(function () {
                            Curry._2(Venture.Cmd[/* EndorsePayout */9][/* exec */0], processId$2, state[/* venture */0]).then((function (result) {
                                    return Promise.resolve(Curry._1(updateVenture, result[0]));
                                  }));
                            return /* () */0;
                          })]);
          
        }
      }
    });
  return newrecord;
}

exports.text = text;
exports.changeNewPartnerId = changeNewPartnerId;
exports.component = component;
exports.make = make;
/* component Not a pure module */
