// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var $$String = require("bs-platform/lib/js/string.js");
var Spinner = require("./components/Spinner.bs.js");
var ViewCommon = require("./ViewCommon.bs.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var PrimitiveTypes = require("../application/PrimitiveTypes.bs.js");

var component = ReasonReact.reducerComponent("ManagePartners");

function make(viewData, commands, cmdStatus, _) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */(function (param) {
              return /* record */[
                      /* viewData */viewData,
                      /* inputs */param[/* state */1][/* inputs */1]
                    ];
            }),
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function () {
              if (typeof cmdStatus !== "number") {
                switch (cmdStatus.tag | 0) {
                  case 0 : 
                      ReasonReact.element(/* None */0, /* None */0, Spinner.make("waiting for result", /* None */0, /* array */[]));
                      break;
                  case 1 : 
                      ViewCommon.text("Could not execute teh command");
                      break;
                  case 2 : 
                      break;
                  
                }
              }
              return ViewCommon.text("hello");
            }),
          /* initialState */(function () {
              return /* record */[
                      /* viewData */viewData,
                      /* inputs : record */[/* prospectId */""]
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (action) {
                Curry._1(commands[/* proposePartnerRemoval */2], action[0]);
                return /* NoUpdate */0;
              } else {
                var prospectId = $$String.trim(state[/* inputs */1][/* prospectId */0]);
                if (prospectId === "") {
                  return /* NoUpdate */0;
                } else {
                  Curry._1(commands[/* proposePartner */1], PrimitiveTypes.UserId[/* fromString */1](prospectId));
                  return /* Update */Block.__(0, [/* record */[
                              /* viewData */state[/* viewData */0],
                              /* inputs : record */[/* prospectId */""]
                            ]]);
                }
              }
            }),
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

var text = ViewCommon.text;

var extractString = ViewCommon.extractString;

var ViewData = 0;

exports.text = text;
exports.extractString = extractString;
exports.ViewData = ViewData;
exports.component = component;
exports.make = make;
/* component Not a pure module */
