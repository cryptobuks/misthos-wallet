// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var BTC = require("../application/wallet/BTC.bs.js");
var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Body2 = require("./components/Body2.bs.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Utils = require("../utils/Utils.bs.js");
var React = require("react");
var MButton = require("./components/MButton.bs.js");
var Partner = require("./components/Partner.bs.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var MaterialUi = require("@jsiebern/bs-material-ui/src/MaterialUi.bs.js");
var ViewCommon = require("./ViewCommon.bs.js");
var MTypography = require("./components/MTypography.bs.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");

var component = ReasonReact.statelessComponent("Drawer");

function make(viewData, commands, _) {
  var voteStatus = function (status) {
    var tmp;
    switch (status) {
      case 0 : 
          tmp = "Pending";
          break;
      case 1 : 
          tmp = "Endorsed";
          break;
      case 2 : 
          tmp = "Rejected";
          break;
      
    }
    return ViewCommon.text(tmp);
  };
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function () {
              var summary = viewData[/* summary */4];
              var status = viewData[/* status */1];
              var processId = viewData[/* processId */0];
              var destinationList = $$Array.of_list(List.mapi((function (idx, param) {
                          return React.createElement("div", {
                                      key: String(idx)
                                    }, ViewCommon.text(param[0] + (" - " + BTC.format(param[1]))));
                        }), summary[/* destinations */1]));
              var voters = $$Array.of_list(List.map((function (param) {
                          return React.createElement("div", undefined, ReasonReact.element(/* None */0, /* None */0, Partner.make(param[/* userId */0], /* None */0, /* None */0, /* array */[])), voteStatus(param[/* voteStatus */1]));
                        }), viewData[/* voters */5]));
              var payoutStatus;
              if (typeof status === "number") {
                switch (status) {
                  case 0 : 
                      payoutStatus = ViewCommon.text("PendingApproval");
                      break;
                  case 1 : 
                      payoutStatus = ViewCommon.text("Accepted");
                      break;
                  case 2 : 
                      payoutStatus = ViewCommon.text("Broadcast");
                      break;
                  case 3 : 
                      payoutStatus = ViewCommon.text("Confirmed");
                      break;
                  
                }
              } else {
                payoutStatus = ViewCommon.text("Failed with reason: " + status[0]);
              }
              var transactionId = Js_option.getWithDefault(null, Utils.mapOption((function (txId) {
                          return ViewCommon.text("Transaction ID: " + txId);
                        }), viewData[/* txId */6]));
              return ReasonReact.element(/* None */0, /* None */0, Body2.make(/* Some */[/* :: */[
                                "Payout Details",
                                /* [] */0
                              ]], React.createElement("div", undefined, Js_option.getWithDefault(null, Utils.mapOption((function (date) {
                                            return ViewCommon.text(date.toString());
                                          }), viewData[/* date */7])), payoutStatus, ReasonReact.element(/* None */0, /* None */0, MTypography.make(/* Title */594052472, /* None */0, /* array */[ViewCommon.text("Payout")])), React.createElement("ul", undefined, destinationList, React.createElement("li", undefined, ViewCommon.text("Network Fee - " + BTC.format(summary[/* networkFee */4]))), React.createElement("li", undefined, ViewCommon.text("Misthos Fee - " + BTC.format(summary[/* misthosFee */3]))), React.createElement("li", undefined, ViewCommon.text("Total payout- " + BTC.format(summary[/* spentWithFees */2])))), transactionId), React.createElement("div", undefined, ReasonReact.element(/* None */0, /* None */0, MTypography.make(/* Title */594052472, /* None */0, /* array */[ViewCommon.text("Endorsements")])), ReasonReact.element(/* None */0, /* None */0, MaterialUi.List[/* make */1](/* None */0, /* None */0, /* None */0, /* Some */[true], /* None */0, /* None */0, /* array */[voters])), viewData[/* canEndorse */2] ? ReasonReact.element(/* None */0, /* None */0, MButton.make(/* None */0, /* Some */[(function () {
                                                return Curry._1(commands[/* endorsePayout */7], processId);
                                              })], /* Some */[true], /* array */[ViewCommon.text("Endorse Payout")])) : null, viewData[/* canReject */3] ? ReasonReact.element(/* None */0, /* None */0, MButton.make(/* None */0, /* Some */[(function () {
                                                return Curry._1(commands[/* rejectPayout */8], processId);
                                              })], /* Some */[true], /* array */[ViewCommon.text("Reject Payout")])) : null), /* array */[]));
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

var text = ViewCommon.text;

var extractString = ViewCommon.extractString;

var ViewData = 0;

exports.text = text;
exports.extractString = extractString;
exports.ViewData = ViewData;
exports.component = component;
exports.make = make;
/* component Not a pure module */
