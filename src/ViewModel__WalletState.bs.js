// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var BTC = require("./application/wallet/BTC.bs.js");
var List = require("bs-platform/lib/js/list.js");
var AccountKeyChain = require("./application/wallet/AccountKeyChain.bs.js");
var PayoutTransaction = require("./application/wallet/PayoutTransaction.bs.js");

function make() {
  return /* record */[
          /* accountKeyChains : [] */0,
          /* balance : [] */0,
          /* exposedCoordinates : [] */0,
          /* payoutProcesses : [] */0
        ];
}

function getAccountIndexOfAddress(address, param) {
  var accountKeyChains = param[/* accountKeyChains */0];
  return List.find((function (param) {
                  return List.mem(address, param[1]);
                }), List.map((function (param) {
                      return /* tuple */[
                              param[0],
                              List.map((function (a) {
                                      return a[/* address */5];
                                    }), List.map((function (c) {
                                          return AccountKeyChain.find(c, accountKeyChains);
                                        }), param[1]))
                            ];
                    }), param[/* exposedCoordinates */2]))[0];
}

function apply($$event, state) {
  switch ($$event.tag | 0) {
    case 9 : 
        return /* record */[
                /* accountKeyChains */state[/* accountKeyChains */0],
                /* balance : :: */[
                  /* tuple */[
                    $$event[0][/* data */2][/* accountIdx */0],
                    /* record */[
                      /* income */BTC.zero,
                      /* spent */BTC.zero,
                      /* reserved */BTC.zero
                    ]
                  ],
                  state[/* balance */1]
                ],
                /* exposedCoordinates */state[/* exposedCoordinates */2],
                /* payoutProcesses */state[/* payoutProcesses */3]
              ];
    case 16 : 
        var match = $$event[0];
        var data = match[/* data */4];
        var balance = List.assoc(data[/* accountIdx */0], state[/* balance */1]);
        return /* record */[
                /* accountKeyChains */state[/* accountKeyChains */0],
                /* balance : :: */[
                  /* tuple */[
                    data[/* accountIdx */0],
                    /* record */[
                      /* income */balance[/* income */0],
                      /* spent */balance[/* spent */1],
                      /* reserved */balance[/* reserved */2].plus(PayoutTransaction.summary(data[/* payoutTx */1])[/* reserved */0])
                    ]
                  ],
                  List.remove_assoc(data[/* accountIdx */0], state[/* balance */1])
                ],
                /* exposedCoordinates */state[/* exposedCoordinates */2],
                /* payoutProcesses : :: */[
                  /* tuple */[
                    match[/* processId */0],
                    /* tuple */[
                      data[/* accountIdx */0],
                      data[/* payoutTx */1]
                    ]
                  ],
                  state[/* payoutProcesses */3]
                ]
              ];
    case 20 : 
        var match$1 = List.assoc($$event[0][/* processId */0], state[/* payoutProcesses */3]);
        var accountIdx = match$1[0];
        var balance$1 = List.assoc(accountIdx, state[/* balance */1]);
        var payoutSummary = PayoutTransaction.summary(match$1[1]);
        return /* record */[
                /* accountKeyChains */state[/* accountKeyChains */0],
                /* balance : :: */[
                  /* tuple */[
                    accountIdx,
                    /* record */[
                      /* income */balance$1[/* income */0],
                      /* spent */balance$1[/* spent */1].plus(payoutSummary[/* spent */1]),
                      /* reserved */balance$1[/* reserved */2].minus(payoutSummary[/* reserved */0])
                    ]
                  ],
                  List.remove_assoc(accountIdx, state[/* balance */1])
                ],
                /* exposedCoordinates */state[/* exposedCoordinates */2],
                /* payoutProcesses */state[/* payoutProcesses */3]
              ];
    case 22 : 
        var match$2 = List.assoc($$event[0][/* processId */0], state[/* payoutProcesses */3]);
        var accountIdx$1 = match$2[0];
        var balance$2 = List.assoc(accountIdx$1, state[/* balance */1]);
        var payoutSummary$1 = PayoutTransaction.summary(match$2[1]);
        return /* record */[
                /* accountKeyChains */state[/* accountKeyChains */0],
                /* balance : :: */[
                  /* tuple */[
                    accountIdx$1,
                    /* record */[
                      /* income */balance$2[/* income */0],
                      /* spent */balance$2[/* spent */1],
                      /* reserved */balance$2[/* reserved */2].minus(payoutSummary$1[/* reserved */0])
                    ]
                  ],
                  List.remove_assoc(accountIdx$1, state[/* balance */1])
                ],
                /* exposedCoordinates */state[/* exposedCoordinates */2],
                /* payoutProcesses */state[/* payoutProcesses */3]
              ];
    case 26 : 
        var match$3 = $$event[0];
        var accountIdx$2 = getAccountIndexOfAddress(match$3[/* address */0], state);
        var balance$3 = List.assoc(accountIdx$2, state[/* balance */1]);
        return /* record */[
                /* accountKeyChains */state[/* accountKeyChains */0],
                /* balance : :: */[
                  /* tuple */[
                    accountIdx$2,
                    /* record */[
                      /* income */balance$3[/* income */0].plus(match$3[/* amount */2]),
                      /* spent */balance$3[/* spent */1],
                      /* reserved */balance$3[/* reserved */2]
                    ]
                  ],
                  List.remove_assoc(accountIdx$2, state[/* balance */1])
                ],
                /* exposedCoordinates */state[/* exposedCoordinates */2],
                /* payoutProcesses */state[/* payoutProcesses */3]
              ];
    default:
      return state;
  }
}

exports.make = make;
exports.getAccountIndexOfAddress = getAccountIndexOfAddress;
exports.apply = apply;
/* BTC Not a pure module */
