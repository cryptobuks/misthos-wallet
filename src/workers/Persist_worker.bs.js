// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var Json = require("bs-json/src/Json.js");
var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Session = require("../application/Session.bs.js");
var EventLog = require("../application/events/EventLog.bs.js");
var UserInfo = require("../application/UserInfo.bs.js");
var Blockstack = require("blockstack");
var WorkerUtils = require("./WorkerUtils.bs.js");
var PrimitiveTypes = require("../application/PrimitiveTypes.bs.js");
var WorkerLocalStorage = require("./WorkerLocalStorage.bs.js");
var VentureWorkerMessage = require("./VentureWorkerMessage.bs.js");
var EncryptionJs = require("blockstack/lib/encryption.js");

(( self.localStorage = require("./fakeLocalStorage").localStorage ));

(( self.window = { localStorage: self.localStorage , location: { origin: self.origin } } ));

function logMessage(msg) {
  console.log("[Persist Worker] - " + msg);
  return /* () */0;
}

function determinPartnerKeys(localUserId) {
  return Curry._2(EventLog.reduce, (function (keys, param) {
                var $$event = param[/* event */0];
                switch ($$event.tag | 0) {
                  case 3 : 
                      var data = $$event[0][/* data */2];
                      if (PrimitiveTypes.UserId[/* neq */6](data[/* id */0], localUserId)) {
                        return /* :: */[
                                /* tuple */[
                                  data[/* id */0],
                                  data[/* pubKey */1]
                                ],
                                keys
                              ];
                      } else {
                        return keys;
                      }
                  case 6 : 
                      return List.remove_assoc($$event[0][/* data */2][/* id */0], keys);
                  default:
                    return keys;
                }
              }), /* [] */0);
}

function persist(ventureId, eventLog, keys) {
  var logString = Json.stringify(Curry._1(EventLog.encode, eventLog));
  var summaryString = Json.stringify(Curry._1(EventLog.encodeSummary, Curry._1(EventLog.getSummary, eventLog)));
  return List.fold_left((function (promise, param) {
                var pubKey = param[1];
                return promise.then((function () {
                                return Blockstack.putFile(PrimitiveTypes.VentureId[/* toString */0](ventureId) + ("/" + (UserInfo.storagePrefix(pubKey) + "/log.json")), Json.stringify(EncryptionJs.encryptECIES(pubKey, logString)), ( {"encrypt": false} ));
                              })).then((function () {
                              return Blockstack.putFile(PrimitiveTypes.VentureId[/* toString */0](ventureId) + ("/" + (UserInfo.storagePrefix(pubKey) + "/summary.json")), Json.stringify(EncryptionJs.encryptECIES(pubKey, summaryString)), ( {"encrypt": false} ));
                            }));
              }), Promise.resolve(/* () */0), keys);
}

function persistVenture(ventureId) {
  logMessage("Persisting venture '" + (PrimitiveTypes.VentureId[/* toString */0](ventureId) + "'"));
  Session.getCurrentSession(/* () */0).then((function (param) {
          if (typeof param === "number") {
            return Promise.resolve(/* () */0);
          } else {
            var userId = param[0][/* userId */0];
            return WorkerUtils.loadVenture(ventureId).then((function (eventLog) {
                          return persist(ventureId, eventLog, Curry._1(determinPartnerKeys(userId), eventLog));
                        }));
          }
        }));
  return /* () */0;
}

function handleMessage(param) {
  if (param.tag) {
    var match = VentureWorkerMessage.decodeOutgoing(param[0]);
    if (match.tag) {
      return persistVenture(match[0]);
    } else {
      return /* () */0;
    }
  } else {
    logMessage("Handling 'UpdateSession'");
    return WorkerLocalStorage.setBlockstackItems(param[0]);
  }
}

self.onmessage = (function (msg) {
    return handleMessage(msg.data);
  });

var Message = 0;

exports.Message = Message;
exports.logMessage = logMessage;
exports.determinPartnerKeys = determinPartnerKeys;
exports.persist = persist;
exports.persistVenture = persistVenture;
exports.handleMessage = handleMessage;
/*  Not a pure module */
