// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Session = require("../application/Session.bs.js");
var PrimitiveTypes = require("../application/PrimitiveTypes.bs.js");
var WorkerizedVenture = require("../application/WorkerizedVenture.bs.js");
var WorkerLocalStorage = require("./WorkerLocalStorage.bs.js");
var VentureWorkerMessage = require("./VentureWorkerMessage.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

(( self.localStorage = require("./fakeLocalStorage").localStorage ));

(( self.window = { localStorage: self.localStorage , location: { origin: self.origin } } ));

function postMessage$1(msg) {
  postMessage(VentureWorkerMessage.encodeReceive(msg));
  return /* () */0;
}

function indexUpdated(index) {
  postMessage(VentureWorkerMessage.encodeReceive(/* UpdateIndex */Block.__(0, [index])));
  return /* () */0;
}

var Notify = /* module */[/* indexUpdated */indexUpdated];

function logMessage(msg) {
  console.log("[Venture Worker] - " + msg);
  return /* () */0;
}

var cleanState = /* record */[
  /* sessionData : None */0,
  /* ventures : [] */0
];

function withSessionData(f, state) {
  var match = state[/* sessionData */0];
  if (match) {
    return Curry._2(f, match[0], state);
  } else {
    return Promise.resolve(state);
  }
}

function updateVentureInState(state, venture) {
  return /* record */[
          /* sessionData */state[/* sessionData */0],
          /* ventures : :: */[
            /* tuple */[
              WorkerizedVenture.getId(venture),
              venture
            ],
            List.remove_assoc(WorkerizedVenture.getId(venture), state[/* ventures */1])
          ]
        ];
}

function updateSession(items, state) {
  WorkerLocalStorage.setBlockstackItems(items);
  return Session.getCurrentSession(/* () */0).then((function (param) {
                if (typeof param === "number") {
                  return Promise.resolve(cleanState);
                } else {
                  var data = param[0];
                  var oldData = state[/* sessionData */0];
                  if (oldData) {
                    if (PrimitiveTypes.UserId[/* neq */6](oldData[0][/* userId */0], data[/* userId */0])) {
                      WorkerizedVenture.Index[/* load */0](/* () */0).then((function (index) {
                              return Promise.resolve((postMessage(VentureWorkerMessage.encodeReceive(/* UpdateIndex */Block.__(0, [index]))), /* () */0));
                            }));
                    }
                    
                  } else {
                    WorkerizedVenture.Index[/* load */0](/* () */0).then((function (index) {
                            return Promise.resolve((postMessage(VentureWorkerMessage.encodeReceive(/* UpdateIndex */Block.__(0, [index]))), /* () */0));
                          }));
                  }
                  return Promise.resolve(/* record */[
                              /* sessionData : Some */[data],
                              /* ventures */state[/* ventures */1]
                            ]);
                }
              }));
}

var Handle = /* module */[/* updateSession */updateSession];

function handleMessage(param) {
  switch (param.tag | 0) {
    case 0 : 
        var partial_arg = param[0];
        return (function (param) {
            return updateSession(partial_arg, param);
          });
    case 5 : 
        var name = param[0];
        return (function (param) {
            return withSessionData((function (data, state) {
                          return Curry._2(WorkerizedVenture.Cmd[/* Create */0][/* exec */0], data, name).then((function (param) {
                                        var match = param[1];
                                        var venture = match[0];
                                        var newState = updateVentureInState(state, venture);
                                        var msg_000 = WorkerizedVenture.getId(venture);
                                        var msg_001 = match[1];
                                        var msg = /* NewEvents */Block.__(1, [
                                            msg_000,
                                            msg_001
                                          ]);
                                        postMessage(VentureWorkerMessage.encodeReceive(msg));
                                        postMessage(VentureWorkerMessage.encodeReceive(/* UpdateIndex */Block.__(0, [param[0]])));
                                        return Promise.resolve(newState);
                                      }));
                        }), param);
          });
    default:
      throw [
            Caml_builtin_exceptions.match_failure,
            [
              "Venture_worker.re",
              85,
              2
            ]
          ];
  }
}

var workerState = [cleanState];

self.onmessage = (function (msg) {
    handleMessage(msg.data)(workerState[0]).then((function (newState) {
            workerState[0] = newState;
            return Promise.resolve(/* () */0);
          }));
    return /* () */0;
  });

var Message = 0;

var Venture = 0;

exports.Message = Message;
exports.postMessage = postMessage$1;
exports.Venture = Venture;
exports.Notify = Notify;
exports.logMessage = logMessage;
exports.cleanState = cleanState;
exports.withSessionData = withSessionData;
exports.updateVentureInState = updateVentureInState;
exports.Handle = Handle;
exports.handleMessage = handleMessage;
exports.workerState = workerState;
/*  Not a pure module */
