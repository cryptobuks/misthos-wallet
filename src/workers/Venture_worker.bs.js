// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Session = require("../application/Session.bs.js");
var PrimitiveTypes = require("../application/PrimitiveTypes.bs.js");
var WorkerizedVenture = require("../application/WorkerizedVenture.bs.js");
var WorkerLocalStorage = require("./WorkerLocalStorage.bs.js");
var VentureWorkerMessage = require("./VentureWorkerMessage.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

(( self.localStorage = require("./fakeLocalStorage").localStorage ));

(( self.window = { localStorage: self.localStorage , location: { origin: self.origin } } ));

function postMessage$1(msg) {
  postMessage(VentureWorkerMessage.encodeReceive(msg));
  return /* () */0;
}

function indexUpdated(index) {
  postMessage(VentureWorkerMessage.encodeReceive(/* UpdateIndex */Block.__(0, [index])));
  return /* () */0;
}

var Notify = /* module */[/* indexUpdated */indexUpdated];

function logMessage(msg) {
  console.log("[Venture Worker] - " + msg);
  return /* () */0;
}

var cleanState = /* record */[
  /* sessionData : None */0,
  /* ventures : [] */0
];

var state = [cleanState];

function withSessionData(f) {
  var match = state[0][/* sessionData */0];
  if (match) {
    return Curry._1(f, match[0]);
  } else {
    return logMessage("Not logged in");
  }
}

function updateVentureInState(venture) {
  var init = state[0];
  state[0] = /* record */[
    /* sessionData */init[/* sessionData */0],
    /* ventures : :: */[
      /* tuple */[
        WorkerizedVenture.getId(venture),
        venture
      ],
      List.remove_assoc(WorkerizedVenture.getId(venture), state[0][/* ventures */1])
    ]
  ];
  return /* () */0;
}

function updateSession(state, items, updateState) {
  logMessage("Updating session in localStorage");
  WorkerLocalStorage.setBlockstackItems(items);
  Session.getCurrentSession(/* () */0).then((function (param) {
          if (typeof param === "number") {
            Curry._1(updateState, cleanState);
            return Promise.resolve(/* () */0);
          } else {
            var data = param[0];
            var oldData = state[/* sessionData */0];
            Curry._1(updateState, /* record */[
                  /* sessionData : Some */[data],
                  /* ventures */state[/* ventures */1]
                ]);
            if (oldData) {
              if (PrimitiveTypes.UserId[/* neq */6](oldData[0][/* userId */0], data[/* userId */0])) {
                WorkerizedVenture.Index[/* load */0](/* () */0).then((function (index) {
                        return Promise.resolve((postMessage(VentureWorkerMessage.encodeReceive(/* UpdateIndex */Block.__(0, [index]))), /* () */0));
                      }));
              }
              
            } else {
              WorkerizedVenture.Index[/* load */0](/* () */0).then((function (index) {
                      return Promise.resolve((postMessage(VentureWorkerMessage.encodeReceive(/* UpdateIndex */Block.__(0, [index]))), /* () */0));
                    }));
            }
            return Promise.resolve(/* () */0);
          }
        }));
  return /* () */0;
}

var Handle = /* module */[/* updateSession */updateSession];

function handleMessage(param) {
  switch (param.tag | 0) {
    case 0 : 
        return updateSession(state[0], param[0], (function (newState) {
                      state[0] = newState;
                      return /* () */0;
                    }));
    case 5 : 
        var name = param[0];
        return withSessionData((function (data) {
                      Curry._2(WorkerizedVenture.Cmd[/* Create */0][/* exec */0], data, name).then((function (param) {
                              var match = param[1];
                              var venture = match[0];
                              updateVentureInState(venture);
                              var msg_000 = WorkerizedVenture.getId(venture);
                              var msg_001 = match[1];
                              var msg = /* NewEvents */Block.__(1, [
                                  msg_000,
                                  msg_001
                                ]);
                              postMessage(VentureWorkerMessage.encodeReceive(msg));
                              return Promise.resolve((postMessage(VentureWorkerMessage.encodeReceive(/* UpdateIndex */Block.__(0, [param[0]]))), /* () */0));
                            }));
                      return /* () */0;
                    }));
    default:
      throw [
            Caml_builtin_exceptions.match_failure,
            [
              "Venture_worker.re",
              93,
              2
            ]
          ];
  }
}

self.onmessage = (function (msg) {
    return handleMessage(msg.data);
  });

var Message = 0;

var Venture = 0;

exports.Message = Message;
exports.postMessage = postMessage$1;
exports.Venture = Venture;
exports.Notify = Notify;
exports.logMessage = logMessage;
exports.cleanState = cleanState;
exports.state = state;
exports.withSessionData = withSessionData;
exports.updateVentureInState = updateVentureInState;
exports.Handle = Handle;
exports.handleMessage = handleMessage;
/*  Not a pure module */
