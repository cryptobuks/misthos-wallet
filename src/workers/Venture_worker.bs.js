// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Session = require("../application/Session.bs.js");
var WorkerizedVenture = require("../application/WorkerizedVenture.bs.js");
var WorkerLocalStorage = require("./WorkerLocalStorage.bs.js");
var VentureWorkerMessage = require("./VentureWorkerMessage.bs.js");

(( self.localStorage = require("./fakeLocalStorage").localStorage ));

(( self.window = { localStorage: self.localStorage , location: { origin: self.origin } } ));

function postMessage$1(msg) {
  postMessage(VentureWorkerMessage.encodeReceive(msg));
  return /* () */0;
}

function logMessage(msg) {
  console.log("[Venture Worker] - " + msg);
  return /* () */0;
}

var state = [/* record */[
    /* sessionData : None */0,
    /* ventures : [] */0
  ]];

function withSessionData(f) {
  var match = state[0][/* sessionData */0];
  if (match) {
    return Curry._1(f, match[0]);
  } else {
    return logMessage("Not logged in");
  }
}

function updateVentureInState(venture) {
  var init = state[0];
  state[0] = /* record */[
    /* sessionData */init[/* sessionData */0],
    /* ventures : :: */[
      /* tuple */[
        WorkerizedVenture.getId(venture),
        venture
      ],
      List.remove_assoc(WorkerizedVenture.getId(venture), state[0][/* ventures */1])
    ]
  ];
  return /* () */0;
}

function handleMessage(param) {
  if (param.tag) {
    var name = param[0];
    return withSessionData((function (data) {
                  Curry._2(WorkerizedVenture.Cmd[/* Create */0][/* exec */0], data, name).then((function (param) {
                          var match = param[1];
                          var venture = match[0];
                          updateVentureInState(venture);
                          var msg_000 = WorkerizedVenture.getId(venture);
                          var msg_001 = match[1];
                          var msg = /* NewEvents */Block.__(1, [
                              msg_000,
                              msg_001
                            ]);
                          postMessage(VentureWorkerMessage.encodeReceive(msg));
                          return Promise.resolve((postMessage(VentureWorkerMessage.encodeReceive(/* UpdateIndex */Block.__(0, [param[0]]))), /* () */0));
                        }));
                  return /* () */0;
                }));
  } else {
    logMessage("Updating session in localStorage");
    WorkerLocalStorage.setBlockstackItems(param[0]);
    Session.getCurrentSession(/* () */0).then((function (param) {
            if (typeof param === "number") {
              state[0] = /* record */[
                /* sessionData : None */0,
                /* ventures : [] */0
              ];
              return Promise.resolve(/* () */0);
            } else {
              var init = state[0];
              state[0] = /* record */[
                /* sessionData : Some */[param[0]],
                /* ventures */init[/* ventures */1]
              ];
              return Promise.resolve(/* () */0);
            }
          }));
    return /* () */0;
  }
}

self.onmessage = (function (msg) {
    return handleMessage(msg.data);
  });

var Message = 0;

var Venture = 0;

exports.Message = Message;
exports.postMessage = postMessage$1;
exports.Venture = Venture;
exports.logMessage = logMessage;
exports.state = state;
exports.withSessionData = withSessionData;
exports.updateVentureInState = updateVentureInState;
exports.handleMessage = handleMessage;
/*  Not a pure module */
