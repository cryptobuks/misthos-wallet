// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Session = require("../application/Session.bs.js");
var PrimitiveTypes = require("../application/PrimitiveTypes.bs.js");
var WorkerizedVenture = require("../application/WorkerizedVenture.bs.js");
var WorkerLocalStorage = require("./WorkerLocalStorage.bs.js");
var VentureWorkerMessage = require("./VentureWorkerMessage.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

(( self.localStorage = require("./fakeLocalStorage").localStorage ));

(( self.window = { localStorage: self.localStorage , location: { origin: self.origin } } ));

function postMessage$1(msg) {
  postMessage(VentureWorkerMessage.encodeReceive(msg));
  return /* () */0;
}

function indexUpdated(index) {
  postMessage(VentureWorkerMessage.encodeReceive(/* UpdateIndex */Block.__(0, [index])));
  return /* () */0;
}

function ventureLoaded(id, events) {
  var msg_001 = List.rev(events);
  var msg = /* VentureLoaded */Block.__(1, [
      id,
      msg_001
    ]);
  postMessage(VentureWorkerMessage.encodeReceive(msg));
  return /* () */0;
}

var Notify = /* module */[
  /* indexUpdated */indexUpdated,
  /* ventureLoaded */ventureLoaded
];

function logMessage(msg) {
  console.log("[Venture Worker] - " + msg);
  return /* () */0;
}

var cleanState_000 = /* lastLoggedInUser */PrimitiveTypes.UserId[/* fromString */1]("");

var cleanState = /* record */[
  cleanState_000,
  /* ventures : [] */0
];

function updateVentureInState(state, venture) {
  return /* record */[
          /* lastLoggedInUser */state[/* lastLoggedInUser */0],
          /* ventures : :: */[
            /* tuple */[
              WorkerizedVenture.getId(venture),
              venture
            ],
            List.remove_assoc(WorkerizedVenture.getId(venture), state[/* ventures */1])
          ]
        ];
}

function waitForSession(resolvePromise, sessionPromise) {
  sessionPromise.then((function (param) {
          if (typeof param === "number") {
            return Promise.resolve((setTimeout((function () {
                                return waitForSession(resolvePromise, Session.getCurrentSession(/* () */0));
                              }), 200), /* () */0));
          } else {
            return Promise.resolve(resolvePromise(param[0]));
          }
        }));
  return /* () */0;
}

function makeSessionPromise() {
  return new Promise((function (resolve, _) {
                return waitForSession(resolve, Promise.resolve(/* NotLoggedIn */2));
              }));
}

var sessionPromise = [makeSessionPromise(/* () */0)];

function withSessionData(f, state) {
  return sessionPromise[0].then((function (data) {
                return Curry._2(f, data, state);
              }));
}

function updateSession(items, state) {
  logMessage("Handling 'UpdateSession'");
  WorkerLocalStorage.setBlockstackItems(items);
  sessionPromise[0] = makeSessionPromise(/* () */0);
  return Session.getCurrentSession(/* () */0).then((function (param) {
                if (typeof param === "number") {
                  return Promise.resolve(cleanState);
                } else {
                  var data = param[0];
                  if (PrimitiveTypes.UserId[/* neq */6](state[/* lastLoggedInUser */0], data[/* userId */0])) {
                    WorkerizedVenture.Index[/* load */0](/* () */0).then((function (index) {
                            return Promise.resolve((postMessage(VentureWorkerMessage.encodeReceive(/* UpdateIndex */Block.__(0, [index]))), /* () */0));
                          }));
                  }
                  return Promise.resolve(/* record */[
                              /* lastLoggedInUser */data[/* userId */0],
                              /* ventures */state[/* ventures */1]
                            ]);
                }
              }));
}

function load(ventureId) {
  logMessage("Handling 'Load'");
  return (function (param) {
      return withSessionData((function (data, state) {
                    return WorkerizedVenture.load(data, ventureId).then((function (param) {
                                  ventureLoaded(ventureId, param[1]);
                                  return Promise.resolve(updateVentureInState(state, param[0]));
                                }));
                  }), param);
    });
}

var Handle = /* module */[
  /* waitForSession */waitForSession,
  /* makeSessionPromise */makeSessionPromise,
  /* sessionPromise */sessionPromise,
  /* withSessionData */withSessionData,
  /* updateSession */updateSession,
  /* load */load
];

function handleMessage(param) {
  switch (param.tag | 0) {
    case 0 : 
        var partial_arg = param[0];
        return (function (param) {
            return updateSession(partial_arg, param);
          });
    case 6 : 
        return load(param[0]);
    default:
      throw [
            Caml_builtin_exceptions.match_failure,
            [
              "Venture_worker.re",
              110,
              2
            ]
          ];
  }
}

var workerState = [cleanState];

self.onmessage = (function (msg) {
    Promise.resolve(/* () */0).then((function () {
            return handleMessage(msg.data)(workerState[0]).then((function (newState) {
                          workerState[0] = newState;
                          return Promise.resolve(/* () */0);
                        }));
          }));
    return /* () */0;
  });

var Message = 0;

var Venture = 0;

exports.Message = Message;
exports.postMessage = postMessage$1;
exports.Venture = Venture;
exports.Notify = Notify;
exports.logMessage = logMessage;
exports.cleanState = cleanState;
exports.updateVentureInState = updateVentureInState;
exports.Handle = Handle;
exports.handleMessage = handleMessage;
exports.workerState = workerState;
/*  Not a pure module */
