// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Utils = require("../utils/Utils.bs.js");
var Session = require("../application/Session.bs.js");
var PrimitiveTypes = require("../application/PrimitiveTypes.bs.js");
var WorkerizedVenture = require("../application/WorkerizedVenture.bs.js");
var WorkerLocalStorage = require("./WorkerLocalStorage.bs.js");
var VentureWorkerMessage = require("./VentureWorkerMessage.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

(( self.localStorage = require("./fakeLocalStorage").localStorage ));

(( self.window = { localStorage: self.localStorage , location: { origin: self.origin } } ));

function postMessage$1(msg) {
  postMessage(VentureWorkerMessage.encodeReceive(msg));
  return /* () */0;
}

function indexUpdated(index) {
  postMessage(VentureWorkerMessage.encodeReceive(/* UpdateIndex */Block.__(0, [index])));
  return /* () */0;
}

function ventureLoaded(id, events) {
  var msg_001 = List.rev(events);
  var msg = /* VentureLoaded */Block.__(1, [
      id,
      msg_001
    ]);
  postMessage(VentureWorkerMessage.encodeReceive(msg));
  return /* () */0;
}

var Notify = /* module */[
  /* indexUpdated */indexUpdated,
  /* ventureLoaded */ventureLoaded
];

function logMessage(msg) {
  console.log("[Venture Worker] - " + msg);
  return /* () */0;
}

function waitForSession(resolvePromise, sessionPromise) {
  sessionPromise.then((function (param) {
          if (typeof param === "number") {
            return Promise.resolve((setTimeout((function () {
                                return waitForSession(resolvePromise, Session.getCurrentSession(/* () */0));
                              }), 200), /* () */0));
          } else {
            return Promise.resolve(resolvePromise(param[0]));
          }
        }));
  return /* () */0;
}

function withVenture(ventureId, f, param) {
  var venturesThread = param[/* venturesThread */0].then((function (threads) {
          return Promise.resolve(Utils.mapOption((function (param) {
                            var ventures = param[1];
                            var data = param[0];
                            var ventureThread;
                            try {
                              ventureThread = List.assoc(ventureId, ventures);
                            }
                            catch (exn){
                              if (exn === Caml_builtin_exceptions.not_found) {
                                ventureThread = WorkerizedVenture.load(data, ventureId);
                              } else {
                                throw exn;
                              }
                            }
                            return /* tuple */[
                                    data,
                                    /* :: */[
                                      /* tuple */[
                                        ventureId,
                                        ventureThread.then((function (venture) {
                                                return Curry._2(f, data, venture);
                                              }))
                                      ],
                                      List.remove_assoc(ventureId, ventures)
                                    ]
                                  ];
                          }), threads));
        }));
  return /* record */[/* venturesThread */venturesThread];
}

function updateSession(items, state) {
  logMessage("Handling 'UpdateSession'");
  WorkerLocalStorage.setBlockstackItems(items);
  var sessionThread = new Promise((function (resolveSession, _) {
          Session.getCurrentSession(/* () */0).then((function (param) {
                  if (typeof param === "number") {
                    return Promise.resolve(resolveSession(/* None */0));
                  } else {
                    return Promise.resolve(resolveSession(/* Some */[param[0]]));
                  }
                }));
          return /* () */0;
        }));
  sessionThread.then((function (param) {
          if (param) {
            return WorkerizedVenture.Index[/* load */0](/* () */0).then((function (index) {
                          return Promise.resolve((postMessage(VentureWorkerMessage.encodeReceive(/* UpdateIndex */Block.__(0, [index]))), /* () */0));
                        }));
          } else {
            return Promise.resolve(/* () */0);
          }
        }));
  return /* record */[/* venturesThread */Promise.all(/* tuple */[
                  sessionThread,
                  state[/* venturesThread */0]
                ]).then((function (param) {
                  var venturesThread = param[1];
                  var session = param[0];
                  if (session) {
                    var data = session[0];
                    if (venturesThread) {
                      var match = venturesThread[0];
                      if (PrimitiveTypes.UserId[/* eq */5](data[/* userId */0], match[0][/* userId */0])) {
                        return Promise.resolve(/* Some */[/* tuple */[
                                      data,
                                      match[1]
                                    ]]);
                      } else {
                        return Promise.resolve(/* Some */[/* tuple */[
                                      data,
                                      /* [] */0
                                    ]]);
                      }
                    } else {
                      return Promise.resolve(/* Some */[/* tuple */[
                                    data,
                                    /* [] */0
                                  ]]);
                    }
                  } else {
                    return Promise.resolve(/* None */0);
                  }
                }))];
}

function load(ventureId) {
  logMessage("Handling 'Load'");
  return (function (param) {
      return withVenture(ventureId, (function (_, venture) {
                    ventureLoaded(ventureId, WorkerizedVenture.getAllEvents(venture));
                    return Promise.resolve(venture);
                  }), param);
    });
}

var Handle = /* module */[
  /* waitForSession */waitForSession,
  /* withVenture */withVenture,
  /* updateSession */updateSession,
  /* load */load
];

function handleMessage(param) {
  switch (param.tag | 0) {
    case 0 : 
        var partial_arg = param[0];
        return (function (param) {
            return updateSession(partial_arg, param);
          });
    case 6 : 
        return load(param[0]);
    default:
      throw [
            Caml_builtin_exceptions.match_failure,
            [
              "Venture_worker.re",
              146,
              2
            ]
          ];
  }
}

var cleanState = /* record */[/* venturesThread */Promise.resolve(/* None */0)];

var workerState = [cleanState];

self.onmessage = (function (msg) {
    workerState[0] = handleMessage(msg.data)(workerState[0]);
    return /* () */0;
  });

var Message = 0;

var Venture = 0;

exports.Message = Message;
exports.postMessage = postMessage$1;
exports.Venture = Venture;
exports.Notify = Notify;
exports.logMessage = logMessage;
exports.Handle = Handle;
exports.handleMessage = handleMessage;
exports.cleanState = cleanState;
exports.workerState = workerState;
/*  Not a pure module */
