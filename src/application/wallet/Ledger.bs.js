// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Utils = require("../../utils/Utils.bs.js");
var Bitcoin = require("../../ffi/Bitcoin.bs.js");
var BitcoinjsLib = require("bitcoinjs-lib");
var CustodianKeyChain = require("./CustodianKeyChain.bs.js");
var HwAppBtc = require("@ledgerhq/hw-app-btc");
var HwTransportU2f = require("@ledgerhq/hw-transport-u2f");

function getHDNode(path, network, ledger) {
  return ledger.getWalletPublicKey(path).then((function (pubKey) {
                return Promise.resolve(BitcoinjsLib.bip32.fromPublicKey(BitcoinjsLib.ECPair.fromPublicKey(Utils.bufFromHex(pubKey.publicKey), {
                                    network: network
                                  }).publicKey, Utils.bufFromHex(pubKey.chainCode), network));
              }));
}

function getCustodianKeyChain(network, ventureId, accountIdx, keyChainIdx) {
  return HwTransportU2f.default.create().then((function (transport) {
                    var btc = new HwAppBtc.default(transport);
                    return Promise.all(/* tuple */[
                                Promise.resolve(btc),
                                getHDNode(CustodianKeyChain.misthosWalletPurposePath, BitcoinjsLib.networks.bitcoin, btc)
                              ]);
                  })).then((function (param) {
                  var misthosPurposeNode = param[1];
                  var path = CustodianKeyChain.makePathToBip45Root(ventureId, accountIdx, keyChainIdx, misthosPurposeNode);
                  return Promise.all(/* tuple */[
                              Promise.resolve(Bitcoin.Address[/* fromHDNode */1](misthosPurposeNode)),
                              getHDNode(path, network, param[0])
                            ]);
                })).then((function (param) {
                return Promise.resolve(CustodianKeyChain.fromHardwareNode(param[0], accountIdx, keyChainIdx, param[1]));
              }));
}

var L = 0;

exports.L = L;
exports.getHDNode = getHDNode;
exports.getCustodianKeyChain = getCustodianKeyChain;
/* Utils Not a pure module */
