// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Json_decode = require("bs-json/src/Json_decode.js");
var Json_encode = require("bs-json/src/Json_encode.js");
var WalletTypes = require("./WalletTypes.bs.js");
var PrimitiveTypes = require("../PrimitiveTypes.bs.js");
var CustodianKeyChain = require("./CustodianKeyChain.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var defaultCoSignerList = /* array */[
  0,
  1,
  1,
  2,
  2,
  3,
  3,
  4,
  4,
  5,
  5,
  6,
  6,
  7,
  7,
  8
];

function make(accountIdx, keyChainIdx, custodianKeyChains) {
  return /* record */[
          /* accountIdx */accountIdx,
          /* keyChainIdx */keyChainIdx,
          /* nCoSigners */Caml_array.caml_array_get(defaultCoSignerList, List.length(custodianKeyChains)),
          /* custodianKeyChains */custodianKeyChains
        ];
}

function make$1() {
  return /* [] */0;
}

function add(keyChain, collection) {
  var accountIdx = keyChain[/* accountIdx */0];
  var keyChains;
  try {
    keyChains = List.assoc(accountIdx, collection);
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      keyChains = /* [] */0;
    } else {
      throw exn;
    }
  }
  return /* :: */[
          /* tuple */[
            accountIdx,
            /* :: */[
              /* tuple */[
                keyChain[/* keyChainIdx */1],
                keyChain
              ],
              keyChains
            ]
          ],
          List.remove_assoc(accountIdx, collection)
        ];
}

function lookup(accountIdx, accountKeyChainIdx, accounts) {
  return List.assoc(accountKeyChainIdx, List.assoc(accountIdx, accounts));
}

function latest(accountIdx, accounts) {
  return List.fold_left((function (res, param) {
                var match = WalletTypes.AccountKeyChainIndex[/* compare */5](param[0], res[/* keyChainIdx */1]) > 0;
                if (match) {
                  return param[1];
                } else {
                  return res;
                }
              }), List.hd(List.assoc(accountIdx, accounts))[1], List.assoc(accountIdx, accounts));
}

var Collection = /* module */[
  /* make */make$1,
  /* add */add,
  /* lookup */lookup,
  /* latest */latest
];

function encode(keyChain) {
  var partial_arg = PrimitiveTypes.UserId[/* encode */2];
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "custodianKeyChains",
                Json_encode.list((function (param) {
                        return Json_encode.pair(partial_arg, CustodianKeyChain.encode, param);
                      }), keyChain[/* custodianKeyChains */3])
              ],
              /* :: */[
                /* tuple */[
                  "nCoSigners",
                  keyChain[/* nCoSigners */2]
                ],
                /* :: */[
                  /* tuple */[
                    "accountIdx",
                    WalletTypes.AccountIndex[/* encode */3](keyChain[/* accountIdx */0])
                  ],
                  /* :: */[
                    /* tuple */[
                      "keyChainIdx",
                      WalletTypes.AccountKeyChainIndex[/* encode */3](keyChain[/* keyChainIdx */1])
                    ],
                    /* [] */0
                  ]
                ]
              ]
            ]);
}

function decode(raw) {
  var partial_arg = PrimitiveTypes.UserId[/* decode */3];
  var partial_arg$1 = function (param) {
    return Json_decode.pair(partial_arg, CustodianKeyChain.decode, param);
  };
  return /* record */[
          /* accountIdx */Json_decode.field("accountIdx", WalletTypes.AccountIndex[/* decode */4], raw),
          /* keyChainIdx */Json_decode.field("keyChainIdx", WalletTypes.AccountKeyChainIndex[/* decode */4], raw),
          /* nCoSigners */Json_decode.field("nCoSigners", Json_decode.$$int, raw),
          /* custodianKeyChains */Json_decode.field("custodianKeyChains", (function (param) {
                  return Json_decode.list(partial_arg$1, param);
                }), raw)
        ];
}

exports.defaultCoSignerList = defaultCoSignerList;
exports.make = make;
exports.Collection = Collection;
exports.encode = encode;
exports.decode = decode;
/* Json_encode Not a pure module */
