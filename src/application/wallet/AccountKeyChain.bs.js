// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Utils = require("../../utils/Utils.bs.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Json_decode = require("bs-json/src/Json_decode.js");
var Json_encode = require("bs-json/src/Json_encode.js");
var WalletTypes = require("./WalletTypes.bs.js");
var PrimitiveTypes = require("../PrimitiveTypes.bs.js");
var CustodianKeyChain = require("./CustodianKeyChain.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function encode(prim) {
  return prim;
}

function make(nCoSigners, custodianKeyChains) {
  return Utils.hash(List.fold_left((function (res, param) {
                    return res + (PrimitiveTypes.UserId[/* toString */0](param[0]) + param[1]);
                  }), String(nCoSigners), List.map((function (param) {
                        return /* tuple */[
                                param[0],
                                CustodianKeyChain.hdNode(param[1]).toBase58()
                              ];
                      }), List.sort((function (param, param$1) {
                            return PrimitiveTypes.UserId[/* compare */4](param[0], param$1[0]);
                          }), custodianKeyChains))));
}

var neq = Caml_obj.caml_notequal;

var eq = Caml_obj.caml_equal;

var Identifier = /* module */[
  /* encode */encode,
  /* decode */Json_decode.string,
  /* make */make,
  /* neq */neq,
  /* eq */eq
];

var defaultCoSignerList = /* array */[
  0,
  1,
  1,
  2,
  2,
  3,
  3,
  4,
  4,
  5,
  5,
  6,
  6,
  7,
  7,
  8
];

function make$1(accountIdx, custodianKeyChains) {
  var nCoSigners = Caml_array.caml_array_get(defaultCoSignerList, List.length(custodianKeyChains));
  return /* record */[
          /* accountIdx */accountIdx,
          /* identifier */make(nCoSigners, custodianKeyChains),
          /* nCoSigners */nCoSigners,
          /* custodianKeyChains */custodianKeyChains
        ];
}

function make$2() {
  return /* [] */0;
}

function add(keyChain, collection) {
  var accountIdx = keyChain[/* accountIdx */0];
  var keyChains;
  try {
    keyChains = List.assoc(accountIdx, collection);
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      keyChains = /* [] */0;
    } else {
      throw exn;
    }
  }
  return /* :: */[
          /* tuple */[
            accountIdx,
            /* :: */[
              /* tuple */[
                keyChain[/* identifier */1],
                keyChain
              ],
              keyChains
            ]
          ],
          List.remove_assoc(accountIdx, collection)
        ];
}

function lookup(accountIdx, accountKeyChainIdx, accounts) {
  return List.assoc(accountKeyChainIdx, List.assoc(accountIdx, accounts));
}

var Collection = /* module */[
  /* make */make$2,
  /* add */add,
  /* lookup */lookup
];

function encode$1(keyChain) {
  var partial_arg = PrimitiveTypes.UserId[/* encode */2];
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "custodianKeyChains",
                Json_encode.list((function (param) {
                        return Json_encode.pair(partial_arg, CustodianKeyChain.encode, param);
                      }), keyChain[/* custodianKeyChains */3])
              ],
              /* :: */[
                /* tuple */[
                  "nCoSigners",
                  keyChain[/* nCoSigners */2]
                ],
                /* :: */[
                  /* tuple */[
                    "accountIdx",
                    WalletTypes.AccountIndex[/* encode */4](keyChain[/* accountIdx */0])
                  ],
                  /* :: */[
                    /* tuple */[
                      "identifier",
                      keyChain[/* identifier */1]
                    ],
                    /* [] */0
                  ]
                ]
              ]
            ]);
}

function decode(raw) {
  var partial_arg = PrimitiveTypes.UserId[/* decode */3];
  var partial_arg$1 = function (param) {
    return Json_decode.pair(partial_arg, CustodianKeyChain.decode, param);
  };
  return /* record */[
          /* accountIdx */Json_decode.field("accountIdx", WalletTypes.AccountIndex[/* decode */5], raw),
          /* identifier */Json_decode.field("identifier", Json_decode.string, raw),
          /* nCoSigners */Json_decode.field("nCoSigners", Json_decode.$$int, raw),
          /* custodianKeyChains */Json_decode.field("custodianKeyChains", (function (param) {
                  return Json_decode.list(partial_arg$1, param);
                }), raw)
        ];
}

exports.Identifier = Identifier;
exports.defaultCoSignerList = defaultCoSignerList;
exports.make = make$1;
exports.Collection = Collection;
exports.encode = encode$1;
exports.decode = decode;
/* Utils Not a pure module */
