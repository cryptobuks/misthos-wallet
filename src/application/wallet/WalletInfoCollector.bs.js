// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var BTC = require("./BTC.bs.js");
var Utils = require("../../utils/Utils.bs.js");
var Address = require("./Address.bs.js");
var Network = require("./Network.bs.js");
var Belt_Map = require("bs-platform/lib/js/belt_Map.js");
var Belt_Set = require("bs-platform/lib/js/belt_Set.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var WalletTypes = require("./WalletTypes.bs.js");
var Belt_MapString = require("bs-platform/lib/js/belt_MapString.js");
var PrimitiveTypes = require("../PrimitiveTypes.bs.js");
var AccountKeyChain = require("./AccountKeyChain.bs.js");
var PayoutTransaction = require("./PayoutTransaction.bs.js");

function addressInfos(accountIdx, param) {
  return Js_option.getWithDefault(/* [] */0, Belt_Map.get(param[/* addressInfos */12], accountIdx));
}

function addressInfoFor(accountIdx, findAddress, collector) {
  return Js_option.getExn(Belt_List.getByU(addressInfos(accountIdx, collector), (function (param) {
                    return param[/* address */2] === findAddress;
                  })));
}

function collidingProcesses(processId, param) {
  var reserved = param[/* reserved */7];
  var inputs = Js_option.getWithDefault(/* array */[], Utils.mapOption((function (param) {
              return param[/* usedInputs */1];
            }), Belt_Map.get(param[/* payoutProcesses */9], processId)));
  return Belt_Set.remove(Belt_Array.reduceU(inputs, PrimitiveTypes.ProcessId[/* emptySet */9], (function (res, input) {
                    return Belt_Set.union(Belt_Map.getWithDefault(reserved, input, PrimitiveTypes.ProcessId[/* emptySet */9]), res);
                  })), processId);
}

function totalUnusedBTC(accountIdx, param) {
  return Belt_Set.reduceU(Belt_Map.getWithDefault(param[/* unused */1], accountIdx, Network.inputSet(/* () */0)), BTC.zero, (function (res, param) {
                return res.plus(param[/* value */3]);
              }));
}

function totalReservedBTC(param) {
  return Belt_Array.reduceU(Belt_Map.keysToArray(param[/* reserved */7]), BTC.zero, (function (res, param) {
                return res.plus(param[/* value */3]);
              }));
}

function currentKeyChainIdent(accountIdx, userId, param) {
  return Js_option.getExn(Belt_List.getAssoc(Js_option.getExn(Belt_List.getAssoc(param[/* activatedKeyChain */10], accountIdx, WalletTypes.AccountIndex[/* eq */7])), userId, PrimitiveTypes.UserId[/* eq */5]));
}

function currentKeyChain(accountIdx, userId, state) {
  var currentIdent = currentKeyChainIdent(accountIdx, userId, state);
  return AccountKeyChain.Collection[/* lookup */2](accountIdx, currentIdent, state[/* keyChains */8]);
}

function exposedCoordinates(param) {
  return param[/* exposedCoordinates */11];
}

function accountKeyChains(param) {
  return param[/* keyChains */8];
}

function currentSpendableInputs(accountIdx, param) {
  return Belt_Set.diff(Belt_MapString.reduceU(Belt_Map.getWithDefault(param[/* spendable */2], accountIdx, Belt_MapString.empty), Network.inputSet(/* () */0), (function (res, _, inputs) {
                    return Belt_Set.mergeMany(res, Belt_List.toArray(inputs));
                  })), Belt_Set.mergeMany(Network.inputSet(/* () */0), Belt_Map.keysToArray(param[/* reserved */7])));
}

function unlockedInputs(accountIdx, param) {
  return Belt_Map.getWithDefault(param[/* unlocked */4], accountIdx, Network.inputSet(/* () */0));
}

function oldSpendableInputs(accountIdx, param) {
  return Belt_Set.diff(Belt_MapString.reduceU(Belt_Map.getWithDefault(param[/* oldSpendable */3], accountIdx, Belt_MapString.empty), Network.inputSet(/* () */0), (function (res, _, inputs) {
                    return Belt_Set.mergeMany(res, Belt_List.toArray(inputs));
                  })), Belt_Set.mergeMany(Network.inputSet(/* () */0), Belt_Map.keysToArray(param[/* reserved */7])));
}

function network(param) {
  return param[/* network */0];
}

function nextChangeAddress(accountIdx, userId, collector) {
  var keyChainIdent = currentKeyChainIdent(accountIdx, userId, collector);
  var accountKeyChain = AccountKeyChain.Collection[/* lookup */2](accountIdx, keyChainIdent, collector[/* keyChains */8]);
  var coordinates = Address.Coordinates[/* allForAccount */8](accountIdx)(collector[/* exposedCoordinates */11]);
  var nextChangeCoordinates = Address.Coordinates[/* nextInternal */1](userId, coordinates, accountKeyChain);
  return Address.find(nextChangeCoordinates, collector[/* keyChains */8]);
}

function fakeChangeAddress(accountIdx, userId, collector) {
  var keyChainIdent = currentKeyChainIdent(accountIdx, userId, collector);
  var accountKeyChain = AccountKeyChain.Collection[/* lookup */2](accountIdx, keyChainIdent, collector[/* keyChains */8]);
  var coordinates = Address.Coordinates[/* allForAccount */8](accountIdx)(collector[/* exposedCoordinates */11]);
  var nextChangeCoordinates = Address.Coordinates[/* nextInternal */1](userId, coordinates, accountKeyChain);
  var match = accountKeyChain[/* nCoSigners */2] > 1;
  return /* record */[
          /* nCoSigners */accountKeyChain[/* nCoSigners */2],
          /* nPubKeys */Belt_List.length(accountKeyChain[/* custodianKeyChains */4]),
          /* coordinates */nextChangeCoordinates,
          /* witnessScript */"",
          /* redeemScript */"",
          /* displayAddress */Network.exampleOfLongestAddress(collector[/* network */0]),
          /* sequence */match ? /* Some */[1] : /* None */0
        ];
}

function make() {
  return /* record */[
          /* network : Regtest */0,
          /* unused */WalletTypes.AccountIndex[/* makeMap */10](/* () */0),
          /* spendable */WalletTypes.AccountIndex[/* makeMap */10](/* () */0),
          /* oldSpendable */WalletTypes.AccountIndex[/* makeMap */10](/* () */0),
          /* unlocked */WalletTypes.AccountIndex[/* makeMap */10](/* () */0),
          /* temporarilyInaccessible */WalletTypes.AccountIndex[/* makeMap */10](/* () */0),
          /* inaccessible */WalletTypes.AccountIndex[/* makeMap */10](/* () */0),
          /* reserved */Network.inputMap(/* () */0),
          /* keyChains */AccountKeyChain.Collection[/* empty */0],
          /* payoutProcesses */PrimitiveTypes.ProcessId[/* makeMap */8](/* () */0),
          /* activatedKeyChain : [] */0,
          /* exposedCoordinates : [] */0,
          /* addressInfos */WalletTypes.AccountIndex[/* makeMap */10](/* () */0),
          /* currentCustodians */WalletTypes.AccountIndex[/* makeMap */10](/* () */0)
        ];
}

function removeInputsFromReserved(processId, inputs, reserved) {
  return Belt_Array.reduceU(inputs, reserved, (function (lookup, input) {
                return Belt_Map.updateU(lookup, input, (function (processes) {
                              var processes$1 = Belt_Set.remove(Js_option.getWithDefault(PrimitiveTypes.ProcessId[/* emptySet */9], processes), processId);
                              var match = Belt_Set.isEmpty(processes$1);
                              if (match) {
                                return /* None */0;
                              } else {
                                return /* Some */[processes$1];
                              }
                            }));
              }));
}

function removeAddressFrom(accountIdx, address, status, state) {
  var exit = 0;
  switch (status) {
    case 0 : 
        var accountSpendable = Belt_Map.getWithDefault(state[/* spendable */2], accountIdx, Belt_MapString.empty);
        var inputs = Belt_MapString.get(accountSpendable, address);
        return /* tuple */[
                inputs,
                /* record */[
                  /* network */state[/* network */0],
                  /* unused */state[/* unused */1],
                  /* spendable */Belt_Map.set(state[/* spendable */2], accountIdx, Belt_MapString.remove(accountSpendable, address)),
                  /* oldSpendable */state[/* oldSpendable */3],
                  /* unlocked */state[/* unlocked */4],
                  /* temporarilyInaccessible */state[/* temporarilyInaccessible */5],
                  /* inaccessible */state[/* inaccessible */6],
                  /* reserved */state[/* reserved */7],
                  /* keyChains */state[/* keyChains */8],
                  /* payoutProcesses */state[/* payoutProcesses */9],
                  /* activatedKeyChain */state[/* activatedKeyChain */10],
                  /* exposedCoordinates */state[/* exposedCoordinates */11],
                  /* addressInfos */state[/* addressInfos */12],
                  /* currentCustodians */state[/* currentCustodians */13]
                ]
              ];
    case 1 : 
    case 2 : 
        exit = 1;
        break;
    case 3 : 
        var accountTemporarilyInaccessible = Belt_Map.getWithDefault(state[/* temporarilyInaccessible */5], accountIdx, Belt_MapString.empty);
        var inputs$1 = Belt_MapString.get(accountTemporarilyInaccessible, address);
        return /* tuple */[
                inputs$1,
                /* record */[
                  /* network */state[/* network */0],
                  /* unused */state[/* unused */1],
                  /* spendable */state[/* spendable */2],
                  /* oldSpendable */state[/* oldSpendable */3],
                  /* unlocked */state[/* unlocked */4],
                  /* temporarilyInaccessible */Belt_Map.set(state[/* temporarilyInaccessible */5], accountIdx, Belt_MapString.remove(accountTemporarilyInaccessible, address)),
                  /* inaccessible */state[/* inaccessible */6],
                  /* reserved */state[/* reserved */7],
                  /* keyChains */state[/* keyChains */8],
                  /* payoutProcesses */state[/* payoutProcesses */9],
                  /* activatedKeyChain */state[/* activatedKeyChain */10],
                  /* exposedCoordinates */state[/* exposedCoordinates */11],
                  /* addressInfos */state[/* addressInfos */12],
                  /* currentCustodians */state[/* currentCustodians */13]
                ]
              ];
    case 4 : 
        var accountInaccessible = Belt_Map.getWithDefault(state[/* temporarilyInaccessible */5], accountIdx, Belt_MapString.empty);
        var inputs$2 = Belt_MapString.get(accountInaccessible, address);
        return /* tuple */[
                inputs$2,
                /* record */[
                  /* network */state[/* network */0],
                  /* unused */state[/* unused */1],
                  /* spendable */state[/* spendable */2],
                  /* oldSpendable */state[/* oldSpendable */3],
                  /* unlocked */state[/* unlocked */4],
                  /* temporarilyInaccessible */Belt_Map.set(state[/* temporarilyInaccessible */5], accountIdx, Belt_MapString.remove(accountInaccessible, address)),
                  /* inaccessible */state[/* inaccessible */6],
                  /* reserved */state[/* reserved */7],
                  /* keyChains */state[/* keyChains */8],
                  /* payoutProcesses */state[/* payoutProcesses */9],
                  /* activatedKeyChain */state[/* activatedKeyChain */10],
                  /* exposedCoordinates */state[/* exposedCoordinates */11],
                  /* addressInfos */state[/* addressInfos */12],
                  /* currentCustodians */state[/* currentCustodians */13]
                ]
              ];
    
  }
  if (exit === 1) {
    var accountOldSpendable = Belt_Map.getWithDefault(state[/* oldSpendable */3], accountIdx, Belt_MapString.empty);
    var inputs$3 = Belt_MapString.get(accountOldSpendable, address);
    return /* tuple */[
            inputs$3,
            /* record */[
              /* network */state[/* network */0],
              /* unused */state[/* unused */1],
              /* spendable */state[/* spendable */2],
              /* oldSpendable */Belt_Map.set(state[/* oldSpendable */3], accountIdx, Belt_MapString.remove(accountOldSpendable, address)),
              /* unlocked */state[/* unlocked */4],
              /* temporarilyInaccessible */state[/* temporarilyInaccessible */5],
              /* inaccessible */state[/* inaccessible */6],
              /* reserved */state[/* reserved */7],
              /* keyChains */state[/* keyChains */8],
              /* payoutProcesses */state[/* payoutProcesses */9],
              /* activatedKeyChain */state[/* activatedKeyChain */10],
              /* exposedCoordinates */state[/* exposedCoordinates */11],
              /* addressInfos */state[/* addressInfos */12],
              /* currentCustodians */state[/* currentCustodians */13]
            ]
          ];
  }
  
}

function determinAddressStatus(currentCustodians, addressCustodians, nCoSigners) {
  if (Belt_Set.eq(addressCustodians, currentCustodians)) {
    return /* Accessible */0;
  } else {
    var intersection = Belt_Set.intersect(currentCustodians, addressCustodians);
    var nIntersect = Belt_Set.size(intersection);
    if (nIntersect === 0) {
      return /* Inaccessible */4;
    } else if (nIntersect < nCoSigners) {
      return /* TemporarilyInaccessible */3;
    } else if (Belt_Set.eq(addressCustodians, intersection) && !(Belt_Set.size(addressCustodians) === 1 && Belt_Set.size(currentCustodians) > 1)) {
      return /* OutdatedCustodians */2;
    } else {
      return /* AtRisk */1;
    }
  }
}

function updateAddressInfos(accountIdx, currentCustodians, state) {
  var custodians = Belt_Map.getWithDefault(currentCustodians, accountIdx, PrimitiveTypes.UserId[/* emptySet */9]);
  var updates = [/* [] */0];
  var state_000 = /* network */state[/* network */0];
  var state_001 = /* unused */state[/* unused */1];
  var state_002 = /* spendable */state[/* spendable */2];
  var state_003 = /* oldSpendable */state[/* oldSpendable */3];
  var state_004 = /* unlocked */state[/* unlocked */4];
  var state_005 = /* temporarilyInaccessible */state[/* temporarilyInaccessible */5];
  var state_006 = /* inaccessible */state[/* inaccessible */6];
  var state_007 = /* reserved */state[/* reserved */7];
  var state_008 = /* keyChains */state[/* keyChains */8];
  var state_009 = /* payoutProcesses */state[/* payoutProcesses */9];
  var state_010 = /* activatedKeyChain */state[/* activatedKeyChain */10];
  var state_011 = /* exposedCoordinates */state[/* exposedCoordinates */11];
  var state_012 = /* addressInfos */Belt_Map.updateU(state[/* addressInfos */12], accountIdx, (function (infos) {
          var infos$1 = Js_option.getWithDefault(/* [] */0, infos);
          return /* Some */[Belt_List.mapU(infos$1, (function (info) {
                          var newStatus = determinAddressStatus(custodians, info[/* custodians */1], info[/* nCoSigners */3]);
                          if (newStatus !== info[/* addressStatus */4]) {
                            updates[0] = /* :: */[
                              /* tuple */[
                                info[/* address */2],
                                newStatus,
                                info[/* addressStatus */4]
                              ],
                              updates[0]
                            ];
                          }
                          return /* record */[
                                  /* addressType */info[/* addressType */0],
                                  /* custodians */info[/* custodians */1],
                                  /* address */info[/* address */2],
                                  /* nCoSigners */info[/* nCoSigners */3],
                                  /* addressStatus */newStatus
                                ];
                        }))];
        }));
  var state_013 = /* currentCustodians */state[/* currentCustodians */13];
  var state$1 = /* record */[
    state_000,
    state_001,
    state_002,
    state_003,
    state_004,
    state_005,
    state_006,
    state_007,
    state_008,
    state_009,
    state_010,
    state_011,
    state_012,
    state_013
  ];
  return Belt_List.reduceU(updates[0], state$1, (function (state, param) {
                var accountIdx$1 = accountIdx;
                var address = param[0];
                var oldStatus = param[1];
                var newStatus = param[2];
                var state$1 = state;
                var match = removeAddressFrom(accountIdx$1, address, oldStatus, state$1);
                var state$2 = match[1];
                var inputs = match[0];
                if (inputs) {
                  var accountIdx$2 = accountIdx$1;
                  var address$1 = address;
                  var status = newStatus;
                  var inputs$1 = inputs[0];
                  var state$3 = state$2;
                  var exit = 0;
                  switch (status) {
                    case 0 : 
                        return /* record */[
                                /* network */state$3[/* network */0],
                                /* unused */state$3[/* unused */1],
                                /* spendable */Belt_Map.updateU(state$3[/* spendable */2], accountIdx$2, (function (map) {
                                        var map$1 = Js_option.getWithDefault(Belt_MapString.empty, map);
                                        return /* Some */[Belt_MapString.set(map$1, address$1, inputs$1)];
                                      })),
                                /* oldSpendable */state$3[/* oldSpendable */3],
                                /* unlocked */state$3[/* unlocked */4],
                                /* temporarilyInaccessible */state$3[/* temporarilyInaccessible */5],
                                /* inaccessible */state$3[/* inaccessible */6],
                                /* reserved */state$3[/* reserved */7],
                                /* keyChains */state$3[/* keyChains */8],
                                /* payoutProcesses */state$3[/* payoutProcesses */9],
                                /* activatedKeyChain */state$3[/* activatedKeyChain */10],
                                /* exposedCoordinates */state$3[/* exposedCoordinates */11],
                                /* addressInfos */state$3[/* addressInfos */12],
                                /* currentCustodians */state$3[/* currentCustodians */13]
                              ];
                    case 1 : 
                    case 2 : 
                        exit = 1;
                        break;
                    case 3 : 
                        return /* record */[
                                /* network */state$3[/* network */0],
                                /* unused */state$3[/* unused */1],
                                /* spendable */state$3[/* spendable */2],
                                /* oldSpendable */state$3[/* oldSpendable */3],
                                /* unlocked */state$3[/* unlocked */4],
                                /* temporarilyInaccessible */Belt_Map.updateU(state$3[/* temporarilyInaccessible */5], accountIdx$2, (function (map) {
                                        var map$1 = Js_option.getWithDefault(Belt_MapString.empty, map);
                                        return /* Some */[Belt_MapString.set(map$1, address$1, inputs$1)];
                                      })),
                                /* inaccessible */state$3[/* inaccessible */6],
                                /* reserved */state$3[/* reserved */7],
                                /* keyChains */state$3[/* keyChains */8],
                                /* payoutProcesses */state$3[/* payoutProcesses */9],
                                /* activatedKeyChain */state$3[/* activatedKeyChain */10],
                                /* exposedCoordinates */state$3[/* exposedCoordinates */11],
                                /* addressInfos */state$3[/* addressInfos */12],
                                /* currentCustodians */state$3[/* currentCustodians */13]
                              ];
                    case 4 : 
                        return /* record */[
                                /* network */state$3[/* network */0],
                                /* unused */state$3[/* unused */1],
                                /* spendable */state$3[/* spendable */2],
                                /* oldSpendable */state$3[/* oldSpendable */3],
                                /* unlocked */state$3[/* unlocked */4],
                                /* temporarilyInaccessible */state$3[/* temporarilyInaccessible */5],
                                /* inaccessible */Belt_Map.updateU(state$3[/* inaccessible */6], accountIdx$2, (function (map) {
                                        var map$1 = Js_option.getWithDefault(Belt_MapString.empty, map);
                                        return /* Some */[Belt_MapString.set(map$1, address$1, inputs$1)];
                                      })),
                                /* reserved */state$3[/* reserved */7],
                                /* keyChains */state$3[/* keyChains */8],
                                /* payoutProcesses */state$3[/* payoutProcesses */9],
                                /* activatedKeyChain */state$3[/* activatedKeyChain */10],
                                /* exposedCoordinates */state$3[/* exposedCoordinates */11],
                                /* addressInfos */state$3[/* addressInfos */12],
                                /* currentCustodians */state$3[/* currentCustodians */13]
                              ];
                    
                  }
                  if (exit === 1) {
                    return /* record */[
                            /* network */state$3[/* network */0],
                            /* unused */state$3[/* unused */1],
                            /* spendable */state$3[/* spendable */2],
                            /* oldSpendable */Belt_Map.updateU(state$3[/* oldSpendable */3], accountIdx$2, (function (map) {
                                    var map$1 = Js_option.getWithDefault(Belt_MapString.empty, map);
                                    return /* Some */[Belt_MapString.set(map$1, address$1, inputs$1)];
                                  })),
                            /* unlocked */state$3[/* unlocked */4],
                            /* temporarilyInaccessible */state$3[/* temporarilyInaccessible */5],
                            /* inaccessible */state$3[/* inaccessible */6],
                            /* reserved */state$3[/* reserved */7],
                            /* keyChains */state$3[/* keyChains */8],
                            /* payoutProcesses */state$3[/* payoutProcesses */9],
                            /* activatedKeyChain */state$3[/* activatedKeyChain */10],
                            /* exposedCoordinates */state$3[/* exposedCoordinates */11],
                            /* addressInfos */state$3[/* addressInfos */12],
                            /* currentCustodians */state$3[/* currentCustodians */13]
                          ];
                  }
                  
                } else {
                  return state$2;
                }
              }));
}

function addInputToUtxoMap(accountIdx, input, inputMap) {
  return Belt_Map.updateU(inputMap, accountIdx, (function (map) {
                var map$1 = Js_option.getWithDefault(Belt_MapString.empty, map);
                return /* Some */[Belt_MapString.updateU(map$1, input[/* address */2], (function (set) {
                                var set$1 = Js_option.getWithDefault(/* [] */0, set);
                                return /* Some */[/* :: */[
                                          input,
                                          set$1
                                        ]];
                              }))];
              }));
}

function addTxInput(addressStatus, accountIdx, input, state) {
  var exit = 0;
  switch (addressStatus) {
    case 0 : 
        return /* record */[
                /* network */state[/* network */0],
                /* unused */state[/* unused */1],
                /* spendable */addInputToUtxoMap(accountIdx, input, state[/* spendable */2]),
                /* oldSpendable */state[/* oldSpendable */3],
                /* unlocked */state[/* unlocked */4],
                /* temporarilyInaccessible */state[/* temporarilyInaccessible */5],
                /* inaccessible */state[/* inaccessible */6],
                /* reserved */state[/* reserved */7],
                /* keyChains */state[/* keyChains */8],
                /* payoutProcesses */state[/* payoutProcesses */9],
                /* activatedKeyChain */state[/* activatedKeyChain */10],
                /* exposedCoordinates */state[/* exposedCoordinates */11],
                /* addressInfos */state[/* addressInfos */12],
                /* currentCustodians */state[/* currentCustodians */13]
              ];
    case 1 : 
    case 2 : 
        exit = 1;
        break;
    case 3 : 
        return /* record */[
                /* network */state[/* network */0],
                /* unused */state[/* unused */1],
                /* spendable */state[/* spendable */2],
                /* oldSpendable */state[/* oldSpendable */3],
                /* unlocked */state[/* unlocked */4],
                /* temporarilyInaccessible */addInputToUtxoMap(accountIdx, input, state[/* temporarilyInaccessible */5]),
                /* inaccessible */state[/* inaccessible */6],
                /* reserved */state[/* reserved */7],
                /* keyChains */state[/* keyChains */8],
                /* payoutProcesses */state[/* payoutProcesses */9],
                /* activatedKeyChain */state[/* activatedKeyChain */10],
                /* exposedCoordinates */state[/* exposedCoordinates */11],
                /* addressInfos */state[/* addressInfos */12],
                /* currentCustodians */state[/* currentCustodians */13]
              ];
    case 4 : 
        return /* record */[
                /* network */state[/* network */0],
                /* unused */state[/* unused */1],
                /* spendable */state[/* spendable */2],
                /* oldSpendable */state[/* oldSpendable */3],
                /* unlocked */state[/* unlocked */4],
                /* temporarilyInaccessible */state[/* temporarilyInaccessible */5],
                /* inaccessible */addInputToUtxoMap(accountIdx, input, state[/* inaccessible */6]),
                /* reserved */state[/* reserved */7],
                /* keyChains */state[/* keyChains */8],
                /* payoutProcesses */state[/* payoutProcesses */9],
                /* activatedKeyChain */state[/* activatedKeyChain */10],
                /* exposedCoordinates */state[/* exposedCoordinates */11],
                /* addressInfos */state[/* addressInfos */12],
                /* currentCustodians */state[/* currentCustodians */13]
              ];
    
  }
  if (exit === 1) {
    return /* record */[
            /* network */state[/* network */0],
            /* unused */state[/* unused */1],
            /* spendable */state[/* spendable */2],
            /* oldSpendable */addInputToUtxoMap(accountIdx, input, state[/* oldSpendable */3]),
            /* unlocked */state[/* unlocked */4],
            /* temporarilyInaccessible */state[/* temporarilyInaccessible */5],
            /* inaccessible */state[/* inaccessible */6],
            /* reserved */state[/* reserved */7],
            /* keyChains */state[/* keyChains */8],
            /* payoutProcesses */state[/* payoutProcesses */9],
            /* activatedKeyChain */state[/* activatedKeyChain */10],
            /* exposedCoordinates */state[/* exposedCoordinates */11],
            /* addressInfos */state[/* addressInfos */12],
            /* currentCustodians */state[/* currentCustodians */13]
          ];
  }
  
}

function apply($$event, state) {
  switch ($$event.tag | 0) {
    case 0 : 
        return /* record */[
                /* network */$$event[0][/* network */6],
                /* unused */state[/* unused */1],
                /* spendable */state[/* spendable */2],
                /* oldSpendable */state[/* oldSpendable */3],
                /* unlocked */state[/* unlocked */4],
                /* temporarilyInaccessible */state[/* temporarilyInaccessible */5],
                /* inaccessible */state[/* inaccessible */6],
                /* reserved */state[/* reserved */7],
                /* keyChains */state[/* keyChains */8],
                /* payoutProcesses */state[/* payoutProcesses */9],
                /* activatedKeyChain */state[/* activatedKeyChain */10],
                /* exposedCoordinates */state[/* exposedCoordinates */11],
                /* addressInfos */state[/* addressInfos */12],
                /* currentCustodians */state[/* currentCustodians */13]
              ];
    case 15 : 
        return /* record */[
                /* network */state[/* network */0],
                /* unused */state[/* unused */1],
                /* spendable */state[/* spendable */2],
                /* oldSpendable */state[/* oldSpendable */3],
                /* unlocked */state[/* unlocked */4],
                /* temporarilyInaccessible */state[/* temporarilyInaccessible */5],
                /* inaccessible */state[/* inaccessible */6],
                /* reserved */state[/* reserved */7],
                /* keyChains */state[/* keyChains */8],
                /* payoutProcesses */state[/* payoutProcesses */9],
                /* activatedKeyChain : :: */[
                  /* tuple */[
                    $$event[0][/* data */2][/* accountIdx */0],
                    /* [] */0
                  ],
                  state[/* activatedKeyChain */10]
                ],
                /* exposedCoordinates */state[/* exposedCoordinates */11],
                /* addressInfos */state[/* addressInfos */12],
                /* currentCustodians */state[/* currentCustodians */13]
              ];
    case 19 : 
        var match = $$event[0][/* data */2];
        var accountIdx = match[/* accountIdx */3];
        var partnerId = match[/* partnerId */0];
        var currentCustodians = Belt_Map.updateU(state[/* currentCustodians */13], accountIdx, (function (custodians) {
                return /* Some */[Belt_Set.add(Js_option.getWithDefault(PrimitiveTypes.UserId[/* emptySet */9], custodians), partnerId)];
              }));
        return updateAddressInfos(accountIdx, currentCustodians, /* record */[
                    /* network */state[/* network */0],
                    /* unused */state[/* unused */1],
                    /* spendable */state[/* spendable */2],
                    /* oldSpendable */state[/* oldSpendable */3],
                    /* unlocked */state[/* unlocked */4],
                    /* temporarilyInaccessible */state[/* temporarilyInaccessible */5],
                    /* inaccessible */state[/* inaccessible */6],
                    /* reserved */state[/* reserved */7],
                    /* keyChains */state[/* keyChains */8],
                    /* payoutProcesses */state[/* payoutProcesses */9],
                    /* activatedKeyChain */state[/* activatedKeyChain */10],
                    /* exposedCoordinates */state[/* exposedCoordinates */11],
                    /* addressInfos */state[/* addressInfos */12],
                    /* currentCustodians */currentCustodians
                  ]);
    case 24 : 
        var match$1 = $$event[0][/* data */2];
        var accountIdx$1 = match$1[/* accountIdx */1];
        var custodianId = match$1[/* custodianId */0];
        var currentCustodians$1 = Belt_Map.updateU(state[/* currentCustodians */13], accountIdx$1, (function (custodians) {
                return /* Some */[Belt_Set.remove(Js_option.getWithDefault(PrimitiveTypes.UserId[/* emptySet */9], custodians), custodianId)];
              }));
        return updateAddressInfos(accountIdx$1, currentCustodians$1, /* record */[
                    /* network */state[/* network */0],
                    /* unused */state[/* unused */1],
                    /* spendable */state[/* spendable */2],
                    /* oldSpendable */state[/* oldSpendable */3],
                    /* unlocked */state[/* unlocked */4],
                    /* temporarilyInaccessible */state[/* temporarilyInaccessible */5],
                    /* inaccessible */state[/* inaccessible */6],
                    /* reserved */state[/* reserved */7],
                    /* keyChains */state[/* keyChains */8],
                    /* payoutProcesses */state[/* payoutProcesses */9],
                    /* activatedKeyChain */state[/* activatedKeyChain */10],
                    /* exposedCoordinates */state[/* exposedCoordinates */11],
                    /* addressInfos */state[/* addressInfos */12],
                    /* currentCustodians */currentCustodians$1
                  ]);
    case 26 : 
        var match$2 = $$event[0];
        var payoutTx = match$2[/* data */6][/* payoutTx */1];
        var changeAddress = payoutTx[/* changeAddress */3];
        var processId = match$2[/* processId */0];
        return /* record */[
                /* network */state[/* network */0],
                /* unused */state[/* unused */1],
                /* spendable */state[/* spendable */2],
                /* oldSpendable */state[/* oldSpendable */3],
                /* unlocked */state[/* unlocked */4],
                /* temporarilyInaccessible */state[/* temporarilyInaccessible */5],
                /* inaccessible */state[/* inaccessible */6],
                /* reserved */Belt_Array.reduceU(payoutTx[/* usedInputs */1], state[/* reserved */7], (function (lookup, input) {
                        return Belt_Map.updateU(lookup, input, (function (processes) {
                                      return /* Some */[Belt_Set.add(Js_option.getWithDefault(PrimitiveTypes.ProcessId[/* emptySet */9], processes), processId)];
                                    }));
                      })),
                /* keyChains */state[/* keyChains */8],
                /* payoutProcesses */Belt_Map.set(state[/* payoutProcesses */9], processId, payoutTx),
                /* activatedKeyChain */state[/* activatedKeyChain */10],
                /* exposedCoordinates */changeAddress ? /* :: */[
                    changeAddress[0][/* coordinates */2],
                    state[/* exposedCoordinates */11]
                  ] : state[/* exposedCoordinates */11],
                /* addressInfos */state[/* addressInfos */12],
                /* currentCustodians */state[/* currentCustodians */13]
              ];
    case 30 : 
        var processId$1 = $$event[0][/* processId */0];
        var payoutTx$1 = Belt_Map.getExn(state[/* payoutProcesses */9], processId$1);
        var reserved = removeInputsFromReserved(processId$1, payoutTx$1[/* usedInputs */1], state[/* reserved */7]);
        return /* record */[
                /* network */state[/* network */0],
                /* unused */state[/* unused */1],
                /* spendable */state[/* spendable */2],
                /* oldSpendable */state[/* oldSpendable */3],
                /* unlocked */state[/* unlocked */4],
                /* temporarilyInaccessible */state[/* temporarilyInaccessible */5],
                /* inaccessible */state[/* inaccessible */6],
                /* reserved */reserved,
                /* keyChains */state[/* keyChains */8],
                /* payoutProcesses */state[/* payoutProcesses */9],
                /* activatedKeyChain */state[/* activatedKeyChain */10],
                /* exposedCoordinates */state[/* exposedCoordinates */11],
                /* addressInfos */state[/* addressInfos */12],
                /* currentCustodians */state[/* currentCustodians */13]
              ];
    case 31 : 
        var processId$2 = $$event[0][/* processId */0];
        var payoutTx$2 = Belt_Map.getExn(state[/* payoutProcesses */9], processId$2);
        var reserved$1 = removeInputsFromReserved(processId$2, payoutTx$2[/* usedInputs */1], state[/* reserved */7]);
        return /* record */[
                /* network */state[/* network */0],
                /* unused */state[/* unused */1],
                /* spendable */state[/* spendable */2],
                /* oldSpendable */state[/* oldSpendable */3],
                /* unlocked */state[/* unlocked */4],
                /* temporarilyInaccessible */state[/* temporarilyInaccessible */5],
                /* inaccessible */state[/* inaccessible */6],
                /* reserved */reserved$1,
                /* keyChains */state[/* keyChains */8],
                /* payoutProcesses */state[/* payoutProcesses */9],
                /* activatedKeyChain */state[/* activatedKeyChain */10],
                /* exposedCoordinates */state[/* exposedCoordinates */11],
                /* addressInfos */state[/* addressInfos */12],
                /* currentCustodians */state[/* currentCustodians */13]
              ];
    case 34 : 
        var match$3 = $$event[0];
        var txId = match$3[/* txId */1];
        var processId$3 = match$3[/* processId */0];
        var payoutTx$3 = Belt_Map.getExn(state[/* payoutProcesses */9], processId$3);
        var accountIdx$2 = Address.Coordinates[/* accountIdx */3](Belt_Array.getExn(payoutTx$3[/* usedInputs */1], 0)[/* coordinates */6]);
        var reserved$2 = removeInputsFromReserved(processId$3, payoutTx$3[/* usedInputs */1], state[/* reserved */7]);
        var match$4 = PayoutTransaction.txInputForChangeAddress(txId, state[/* network */0], payoutTx$3);
        var state$1;
        if (match$4) {
          var changeInput = match$4[0];
          var custodians = Belt_Set.mergeMany(PrimitiveTypes.UserId[/* emptySet */9], Belt_List.toArray(Belt_List.map(AccountKeyChain.Collection[/* lookup */2](accountIdx$2, Address.Coordinates[/* keyChainIdent */4](changeInput[/* coordinates */6]), state[/* keyChains */8])[/* custodianKeyChains */4], (function (prim) {
                          return prim[0];
                        }))));
          var addressStatus = determinAddressStatus(Belt_Map.getExn(state[/* currentCustodians */13], accountIdx$2), custodians, changeInput[/* nCoSigners */4]);
          var state_000 = /* network */state[/* network */0];
          var state_001 = /* unused */state[/* unused */1];
          var state_002 = /* spendable */state[/* spendable */2];
          var state_003 = /* oldSpendable */state[/* oldSpendable */3];
          var state_004 = /* unlocked */state[/* unlocked */4];
          var state_005 = /* temporarilyInaccessible */state[/* temporarilyInaccessible */5];
          var state_006 = /* inaccessible */state[/* inaccessible */6];
          var state_007 = /* reserved */state[/* reserved */7];
          var state_008 = /* keyChains */state[/* keyChains */8];
          var state_009 = /* payoutProcesses */state[/* payoutProcesses */9];
          var state_010 = /* activatedKeyChain */state[/* activatedKeyChain */10];
          var state_011 = /* exposedCoordinates */state[/* exposedCoordinates */11];
          var state_012 = /* addressInfos */Belt_Map.updateU(state[/* addressInfos */12], accountIdx$2, (function (infos) {
                  var infos$1 = Js_option.getWithDefault(/* [] */0, infos);
                  return /* Some */[/* :: */[
                            /* record */[
                              /* addressType : Change */1,
                              /* custodians */custodians,
                              /* address */changeInput[/* address */2],
                              /* nCoSigners */changeInput[/* nCoSigners */4],
                              /* addressStatus */addressStatus
                            ],
                            infos$1
                          ]];
                }));
          var state_013 = /* currentCustodians */state[/* currentCustodians */13];
          var state$2 = /* record */[
            state_000,
            state_001,
            state_002,
            state_003,
            state_004,
            state_005,
            state_006,
            state_007,
            state_008,
            state_009,
            state_010,
            state_011,
            state_012,
            state_013
          ];
          state$1 = addTxInput(addressStatus, accountIdx$2, changeInput, state$2);
        } else {
          state$1 = state;
        }
        var removeInputFromUtxoMap = function (accountIdx, input, inputMap) {
          return Belt_Map.updateU(inputMap, accountIdx, (function (map) {
                        var map$1 = Js_option.getWithDefault(Belt_MapString.empty, map);
                        return /* Some */[Belt_MapString.updateU(map$1, input[/* address */2], (function (list_) {
                                        var list_$1 = Js_option.getWithDefault(/* [] */0, list_);
                                        var res = Belt_List.keepU(list_$1, (function (in_) {
                                                return Network.TxInputCmp[/* compareInputs */0](in_, input) !== 0;
                                              }));
                                        var match = Belt_List.length(res) > 0;
                                        if (match) {
                                          return /* Some */[res];
                                        } else {
                                          return /* None */0;
                                        }
                                      }))];
                      }));
        };
        var state$3 = Belt_Array.reduceU(payoutTx$3[/* usedInputs */1], state$1, (function (state, input) {
                var accountIdx$3 = accountIdx$2;
                var input$1 = input;
                var state$1 = state;
                var info = addressInfoFor(accountIdx$3, input$1[/* address */2], state$1);
                var match = info[/* addressStatus */4];
                var exit = 0;
                switch (match) {
                  case 0 : 
                      return /* record */[
                              /* network */state$1[/* network */0],
                              /* unused */state$1[/* unused */1],
                              /* spendable */removeInputFromUtxoMap(accountIdx$3, input$1, state$1[/* spendable */2]),
                              /* oldSpendable */state$1[/* oldSpendable */3],
                              /* unlocked */state$1[/* unlocked */4],
                              /* temporarilyInaccessible */state$1[/* temporarilyInaccessible */5],
                              /* inaccessible */state$1[/* inaccessible */6],
                              /* reserved */state$1[/* reserved */7],
                              /* keyChains */state$1[/* keyChains */8],
                              /* payoutProcesses */state$1[/* payoutProcesses */9],
                              /* activatedKeyChain */state$1[/* activatedKeyChain */10],
                              /* exposedCoordinates */state$1[/* exposedCoordinates */11],
                              /* addressInfos */state$1[/* addressInfos */12],
                              /* currentCustodians */state$1[/* currentCustodians */13]
                            ];
                  case 1 : 
                  case 2 : 
                      exit = 1;
                      break;
                  case 3 : 
                      return /* record */[
                              /* network */state$1[/* network */0],
                              /* unused */state$1[/* unused */1],
                              /* spendable */state$1[/* spendable */2],
                              /* oldSpendable */state$1[/* oldSpendable */3],
                              /* unlocked */state$1[/* unlocked */4],
                              /* temporarilyInaccessible */removeInputFromUtxoMap(accountIdx$3, input$1, state$1[/* temporarilyInaccessible */5]),
                              /* inaccessible */state$1[/* inaccessible */6],
                              /* reserved */state$1[/* reserved */7],
                              /* keyChains */state$1[/* keyChains */8],
                              /* payoutProcesses */state$1[/* payoutProcesses */9],
                              /* activatedKeyChain */state$1[/* activatedKeyChain */10],
                              /* exposedCoordinates */state$1[/* exposedCoordinates */11],
                              /* addressInfos */state$1[/* addressInfos */12],
                              /* currentCustodians */state$1[/* currentCustodians */13]
                            ];
                  case 4 : 
                      return /* record */[
                              /* network */state$1[/* network */0],
                              /* unused */state$1[/* unused */1],
                              /* spendable */state$1[/* spendable */2],
                              /* oldSpendable */state$1[/* oldSpendable */3],
                              /* unlocked */state$1[/* unlocked */4],
                              /* temporarilyInaccessible */state$1[/* temporarilyInaccessible */5],
                              /* inaccessible */removeInputFromUtxoMap(accountIdx$3, input$1, state$1[/* inaccessible */6]),
                              /* reserved */state$1[/* reserved */7],
                              /* keyChains */state$1[/* keyChains */8],
                              /* payoutProcesses */state$1[/* payoutProcesses */9],
                              /* activatedKeyChain */state$1[/* activatedKeyChain */10],
                              /* exposedCoordinates */state$1[/* exposedCoordinates */11],
                              /* addressInfos */state$1[/* addressInfos */12],
                              /* currentCustodians */state$1[/* currentCustodians */13]
                            ];
                  
                }
                if (exit === 1) {
                  return /* record */[
                          /* network */state$1[/* network */0],
                          /* unused */state$1[/* unused */1],
                          /* spendable */state$1[/* spendable */2],
                          /* oldSpendable */removeInputFromUtxoMap(accountIdx$3, input$1, state$1[/* oldSpendable */3]),
                          /* unlocked */state$1[/* unlocked */4],
                          /* temporarilyInaccessible */state$1[/* temporarilyInaccessible */5],
                          /* inaccessible */state$1[/* inaccessible */6],
                          /* reserved */state$1[/* reserved */7],
                          /* keyChains */state$1[/* keyChains */8],
                          /* payoutProcesses */state$1[/* payoutProcesses */9],
                          /* activatedKeyChain */state$1[/* activatedKeyChain */10],
                          /* exposedCoordinates */state$1[/* exposedCoordinates */11],
                          /* addressInfos */state$1[/* addressInfos */12],
                          /* currentCustodians */state$1[/* currentCustodians */13]
                        ];
                }
                
              }));
        return /* record */[
                /* network */state$3[/* network */0],
                /* unused */Belt_Map.updateU(state$3[/* unused */1], accountIdx$2, (function (unused) {
                        var unused$1 = Js_option.getWithDefault(Network.inputSet(/* () */0), unused);
                        var match = PayoutTransaction.txInputForChangeAddress(txId, state$3[/* network */0], payoutTx$3);
                        return /* Some */[Belt_Set.removeMany(match ? Belt_Set.add(unused$1, match[0]) : unused$1, payoutTx$3[/* usedInputs */1])];
                      })),
                /* spendable */state$3[/* spendable */2],
                /* oldSpendable */state$3[/* oldSpendable */3],
                /* unlocked */state$3[/* unlocked */4],
                /* temporarilyInaccessible */state$3[/* temporarilyInaccessible */5],
                /* inaccessible */state$3[/* inaccessible */6],
                /* reserved */reserved$2,
                /* keyChains */state$3[/* keyChains */8],
                /* payoutProcesses */state$3[/* payoutProcesses */9],
                /* activatedKeyChain */state$3[/* activatedKeyChain */10],
                /* exposedCoordinates */state$3[/* exposedCoordinates */11],
                /* addressInfos */state$3[/* addressInfos */12],
                /* currentCustodians */state$3[/* currentCustodians */13]
              ];
    case 36 : 
        var processId$4 = $$event[0][/* processId */0];
        var payoutTx$4 = Belt_Map.getExn(state[/* payoutProcesses */9], processId$4);
        var reserved$3 = removeInputsFromReserved(processId$4, payoutTx$4[/* usedInputs */1], state[/* reserved */7]);
        return /* record */[
                /* network */state[/* network */0],
                /* unused */state[/* unused */1],
                /* spendable */state[/* spendable */2],
                /* oldSpendable */state[/* oldSpendable */3],
                /* unlocked */state[/* unlocked */4],
                /* temporarilyInaccessible */state[/* temporarilyInaccessible */5],
                /* inaccessible */state[/* inaccessible */6],
                /* reserved */reserved$3,
                /* keyChains */state[/* keyChains */8],
                /* payoutProcesses */state[/* payoutProcesses */9],
                /* activatedKeyChain */state[/* activatedKeyChain */10],
                /* exposedCoordinates */state[/* exposedCoordinates */11],
                /* addressInfos */state[/* addressInfos */12],
                /* currentCustodians */state[/* currentCustodians */13]
              ];
    case 38 : 
        return /* record */[
                /* network */state[/* network */0],
                /* unused */state[/* unused */1],
                /* spendable */state[/* spendable */2],
                /* oldSpendable */state[/* oldSpendable */3],
                /* unlocked */state[/* unlocked */4],
                /* temporarilyInaccessible */state[/* temporarilyInaccessible */5],
                /* inaccessible */state[/* inaccessible */6],
                /* reserved */state[/* reserved */7],
                /* keyChains */AccountKeyChain.Collection[/* add */1]($$event[0][/* keyChain */0], state[/* keyChains */8]),
                /* payoutProcesses */state[/* payoutProcesses */9],
                /* activatedKeyChain */state[/* activatedKeyChain */10],
                /* exposedCoordinates */state[/* exposedCoordinates */11],
                /* addressInfos */state[/* addressInfos */12],
                /* currentCustodians */state[/* currentCustodians */13]
              ];
    case 39 : 
        var match$5 = $$event[0];
        var accountIdx$3 = match$5[/* accountIdx */0];
        return /* record */[
                /* network */state[/* network */0],
                /* unused */state[/* unused */1],
                /* spendable */state[/* spendable */2],
                /* oldSpendable */state[/* oldSpendable */3],
                /* unlocked */state[/* unlocked */4],
                /* temporarilyInaccessible */state[/* temporarilyInaccessible */5],
                /* inaccessible */state[/* inaccessible */6],
                /* reserved */state[/* reserved */7],
                /* keyChains */state[/* keyChains */8],
                /* payoutProcesses */state[/* payoutProcesses */9],
                /* activatedKeyChain : :: */[
                  /* tuple */[
                    accountIdx$3,
                    /* :: */[
                      /* tuple */[
                        match$5[/* custodianId */1],
                        match$5[/* identifier */2]
                      ],
                      Js_option.getExn(Belt_List.getAssoc(state[/* activatedKeyChain */10], accountIdx$3, WalletTypes.AccountIndex[/* eq */7]))
                    ]
                  ],
                  Belt_List.removeAssoc(state[/* activatedKeyChain */10], accountIdx$3, WalletTypes.AccountIndex[/* eq */7])
                ],
                /* exposedCoordinates */state[/* exposedCoordinates */11],
                /* addressInfos */state[/* addressInfos */12],
                /* currentCustodians */state[/* currentCustodians */13]
              ];
    case 40 : 
        var match$6 = $$event[0][/* address */1];
        var displayAddress = match$6[/* displayAddress */5];
        var coordinates = match$6[/* coordinates */2];
        var nCoSigners = match$6[/* nCoSigners */0];
        var accountIdx$4 = Address.Coordinates[/* accountIdx */3](coordinates);
        var custodians$1 = Belt_Set.mergeMany(PrimitiveTypes.UserId[/* emptySet */9], Belt_List.toArray(Belt_List.map(AccountKeyChain.Collection[/* lookup */2](accountIdx$4, Address.Coordinates[/* keyChainIdent */4](coordinates), state[/* keyChains */8])[/* custodianKeyChains */4], (function (prim) {
                        return prim[0];
                      }))));
        return /* record */[
                /* network */state[/* network */0],
                /* unused */state[/* unused */1],
                /* spendable */state[/* spendable */2],
                /* oldSpendable */state[/* oldSpendable */3],
                /* unlocked */state[/* unlocked */4],
                /* temporarilyInaccessible */state[/* temporarilyInaccessible */5],
                /* inaccessible */state[/* inaccessible */6],
                /* reserved */state[/* reserved */7],
                /* keyChains */state[/* keyChains */8],
                /* payoutProcesses */state[/* payoutProcesses */9],
                /* activatedKeyChain */state[/* activatedKeyChain */10],
                /* exposedCoordinates : :: */[
                  coordinates,
                  state[/* exposedCoordinates */11]
                ],
                /* addressInfos */Belt_Map.updateU(state[/* addressInfos */12], accountIdx$4, (function (infos) {
                        var infos$1 = Js_option.getWithDefault(/* [] */0, infos);
                        return /* Some */[/* :: */[
                                  /* record */[
                                    /* addressType : Income */0,
                                    /* custodians */custodians$1,
                                    /* address */displayAddress,
                                    /* nCoSigners */nCoSigners,
                                    /* addressStatus */determinAddressStatus(Belt_Map.getExn(state[/* currentCustodians */13], accountIdx$4), custodians$1, nCoSigners)
                                  ],
                                  infos$1
                                ]];
                      })),
                /* currentCustodians */state[/* currentCustodians */13]
              ];
    case 41 : 
        var match$7 = $$event[0];
        var amount = match$7[/* amount */4];
        var txOutputN = match$7[/* txOutputN */3];
        var txId$1 = match$7[/* txId */2];
        var coordinates$1 = match$7[/* coordinates */1];
        var address = match$7[/* address */0];
        var accountIdx$5 = Address.Coordinates[/* accountIdx */3](coordinates$1);
        var addressStatus$1 = addressInfoFor(accountIdx$5, address, state)[/* addressStatus */4];
        var keyChain = AccountKeyChain.Collection[/* lookup */2](accountIdx$5, Address.Coordinates[/* keyChainIdent */4](coordinates$1), state[/* keyChains */8]);
        var input_004 = /* nCoSigners */keyChain[/* nCoSigners */2];
        var input_005 = /* nPubKeys */Belt_List.length(keyChain[/* custodianKeyChains */4]);
        var input_007 = /* sequence */keyChain[/* sequence */3];
        var input = /* record */[
          /* txId */txId$1,
          /* txOutputN */txOutputN,
          /* address */address,
          /* value */amount,
          input_004,
          input_005,
          /* coordinates */coordinates$1,
          input_007
        ];
        var state$4 = addTxInput(addressStatus$1, accountIdx$5, input, state);
        return /* record */[
                /* network */state$4[/* network */0],
                /* unused */Belt_Map.updateU(state$4[/* unused */1], accountIdx$5, (function (unused) {
                        var unused$1 = Js_option.getWithDefault(Network.inputSet(/* () */0), unused);
                        return /* Some */[Belt_Set.add(unused$1, /* record */[
                                      /* txId */txId$1,
                                      /* txOutputN */txOutputN,
                                      /* address */address,
                                      /* value */amount,
                                      /* nCoSigners */keyChain[/* nCoSigners */2],
                                      /* nPubKeys */Belt_List.length(keyChain[/* custodianKeyChains */4]),
                                      /* coordinates */coordinates$1,
                                      /* sequence */keyChain[/* sequence */3]
                                    ])];
                      })),
                /* spendable */state$4[/* spendable */2],
                /* oldSpendable */state$4[/* oldSpendable */3],
                /* unlocked */state$4[/* unlocked */4],
                /* temporarilyInaccessible */state$4[/* temporarilyInaccessible */5],
                /* inaccessible */state$4[/* inaccessible */6],
                /* reserved */state$4[/* reserved */7],
                /* keyChains */state$4[/* keyChains */8],
                /* payoutProcesses */state$4[/* payoutProcesses */9],
                /* activatedKeyChain */state$4[/* activatedKeyChain */10],
                /* exposedCoordinates */state$4[/* exposedCoordinates */11],
                /* addressInfos */state$4[/* addressInfos */12],
                /* currentCustodians */state$4[/* currentCustodians */13]
              ];
    default:
      return state;
  }
}

exports.make = make;
exports.addressInfos = addressInfos;
exports.collidingProcesses = collidingProcesses;
exports.exposedCoordinates = exposedCoordinates;
exports.accountKeyChains = accountKeyChains;
exports.network = network;
exports.apply = apply;
exports.totalUnusedBTC = totalUnusedBTC;
exports.totalReservedBTC = totalReservedBTC;
exports.currentKeyChainIdent = currentKeyChainIdent;
exports.currentKeyChain = currentKeyChain;
exports.currentSpendableInputs = currentSpendableInputs;
exports.oldSpendableInputs = oldSpendableInputs;
exports.unlockedInputs = unlockedInputs;
exports.nextChangeAddress = nextChangeAddress;
exports.fakeChangeAddress = fakeChangeAddress;
/* BTC Not a pure module */
