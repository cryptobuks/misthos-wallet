// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Utils = require("../utils/Utils.bs.js");
var Cookie = require("../ffi/Cookie.bs.js");
var Network = require("./wallet/Network.bs.js");
var UserInfo = require("./UserInfo.bs.js");
var Blockstack = require("blockstack");
var Environment = require("./Environment.bs.js");
var LocalStorage = require("../ffi/LocalStorage.bs.js");
var BitcoinjsLib = require("bitcoinjs-lib");
var PrimitiveTypes = require("./PrimitiveTypes.bs.js");

function fromUserData(userData) {
  var match = userData.username;
  if (match == null) {
    return /* None */0;
  } else {
    var issuerKeyPair = Utils.keyPairFromPrivateKey(Network.bitcoinNetwork(/* Testnet */1), userData.appPrivateKey);
    return /* Some */[/* record */[
              /* userId */PrimitiveTypes.UserId[/* fromString */1](match),
              /* appPrivateKey */userData.appPrivateKey,
              /* issuerKeyPair */issuerKeyPair,
              /* storagePrefix */UserInfo.storagePrefix(Utils.publicKeyFromKeyPair(issuerKeyPair)),
              /* masterKeyChain */new BitcoinjsLib.HDNode(issuerKeyPair, Utils.bufFromHex("c8bce5e6dac6f931af17863878cce2ca3b704c61b3d775fe56881cc8ff3ab1cb")),
              /* network : Testnet */1
            ]];
  }
}

var Data = /* module */[/* fromUserData */fromUserData];

function initMasterKey(sessionData) {
  var appPubKey = Utils.publicKeyFromKeyPair(sessionData[/* issuerKeyPair */2]);
  return UserInfo.getOrInit(appPubKey).then((function (param) {
                return Promise.resolve(/* record */[
                            /* userId */sessionData[/* userId */0],
                            /* appPrivateKey */sessionData[/* appPrivateKey */1],
                            /* issuerKeyPair */sessionData[/* issuerKeyPair */2],
                            /* storagePrefix */sessionData[/* storagePrefix */3],
                            /* masterKeyChain */new BitcoinjsLib.HDNode(sessionData[/* issuerKeyPair */2], param[/* chainCode */0]),
                            /* network */sessionData[/* network */5]
                          ]);
              }));
}

function completeLogIn(environment) {
  Utils.mapOption((function (key) {
          return LocalStorage.setItem("blockstack-transit-private-key", key);
        }), Cookie.get("transitKey"));
  Cookie.$$delete("transitKey", Curry._1(environment[/* cookieDomain */3], /* () */0));
  return Blockstack.handlePendingSignIn().then((function (userData) {
                var match = fromUserData(userData);
                if (match) {
                  return initMasterKey(match[0]).then((function (session) {
                                return Promise.resolve(/* LoggedIn */[session]);
                              }));
                } else {
                  return Promise.resolve(/* AnonymousLogin */3);
                }
              }));
}

function getCurrentSession($staropt$star, _) {
  var environment = $staropt$star ? $staropt$star[0] : Environment.$$default;
  if (Blockstack.isUserSignedIn()) {
    var match = Blockstack.loadUserData();
    if (match == null) {
      return Promise.resolve(/* NotLoggedIn */2);
    } else {
      var match$1 = fromUserData(match);
      if (match$1) {
        return initMasterKey(match$1[0]).then((function (session) {
                      return Promise.resolve(/* LoggedIn */[session]);
                    }));
      } else {
        return Promise.resolve(/* AnonymousLogin */3);
      }
    }
  } else if (Blockstack.isSignInPending()) {
    return completeLogIn(environment);
  } else {
    return Promise.resolve(/* NotLoggedIn */2);
  }
}

function signOut() {
  Blockstack.signUserOut();
  return /* NotLoggedIn */2;
}

function signIn($staropt$star, $staropt$star$1, _) {
  var environment = $staropt$star ? $staropt$star[0] : Environment.$$default;
  var transitKey = $staropt$star$1 ? $staropt$star$1[0] : Blockstack.generateAndStoreTransitKey();
  Blockstack.signUserOut();
  Cookie.set("transitKey", transitKey, Curry._1(environment[/* cookieDomain */3], /* () */0));
  Blockstack.redirectToSignInWithAuthRequest(Blockstack.makeAuthRequest(transitKey, Curry._1(environment[/* redirectURI */0], /* () */0), Curry._1(environment[/* manifestURI */1], /* () */0), /* array */[
            "store_write",
            "publish_data"
          ], Curry._1(environment[/* appDomain */2], /* () */0)));
  return /* LoginPending */1;
}

exports.Data = Data;
exports.initMasterKey = initMasterKey;
exports.completeLogIn = completeLogIn;
exports.getCurrentSession = getCurrentSession;
exports.signOut = signOut;
exports.signIn = signIn;
/* Utils Not a pure module */
