// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var BTC = require("./wallet/BTC.bs.js");
var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Event = require("./events/Event.bs.js");
var Policy = require("./Policy.bs.js");
var Network = require("./wallet/Network.bs.js");
var WalletTypes = require("./wallet/WalletTypes.bs.js");
var PrimitiveTypes = require("./PrimitiveTypes.bs.js");
var AccountKeyChain = require("./wallet/AccountKeyChain.bs.js");
var PayoutTransaction = require("./wallet/PayoutTransaction.bs.js");

function make() {
  return /* record */[
          /* ventureId */PrimitiveTypes.VentureId[/* fromString */1](""),
          /* network : Testnet */1,
          /* payoutPolicy */Policy.absolute,
          /* accountKeyChains : [] */0,
          /* nextCoordinates : [] */0,
          /* nextChangeCoordinates : [] */0,
          /* exposedCoordinates : [] */0,
          /* reservedInputs : [] */0,
          /* payoutProcesses : [] */0,
          /* knownIncomeTxIds : [] */0,
          /* balance : [] */0
        ];
}

function getExposedAddresses($staropt$star, param) {
  var accountKeyChains = param[/* accountKeyChains */3];
  var includeChangeAddresses = $staropt$star ? $staropt$star[0] : false;
  return List.map((function (a) {
                return a[/* address */5];
              }), List.flatten(List.map((function (param) {
                        return List.map((function (c) {
                                      return AccountKeyChain.find(c, accountKeyChains);
                                    }), List.map((function (prim) {
                                          return prim[0];
                                        }), List.filter((function (c) {
                                                if (c[1]) {
                                                  return true;
                                                } else {
                                                  return includeChangeAddresses;
                                                }
                                              }))(param[1])));
                      }), param[/* exposedCoordinates */6])));
}

function getAccountIndexOfAddress(address, param) {
  var accountKeyChains = param[/* accountKeyChains */3];
  return List.find((function (param) {
                  return List.mem(address, param[1]);
                }), List.map((function (param) {
                      return /* tuple */[
                              param[0],
                              List.map((function (a) {
                                      return a[/* address */5];
                                    }), List.map((function (c) {
                                          return AccountKeyChain.find(c, accountKeyChains);
                                        }), List.map((function (prim) {
                                              return prim[0];
                                            }), List.filter((function (c) {
                                                    return c[1];
                                                  }))(param[1]))))
                            ];
                    }), param[/* exposedCoordinates */6]))[0];
}

function apply($$event, state) {
  switch ($$event.tag | 0) {
    case 0 : 
        var match = $$event[0];
        return /* record */[
                /* ventureId */match[/* ventureId */0],
                /* network */match[/* network */6],
                /* payoutPolicy */match[/* metaPolicy */4],
                /* accountKeyChains */state[/* accountKeyChains */3],
                /* nextCoordinates */state[/* nextCoordinates */4],
                /* nextChangeCoordinates */state[/* nextChangeCoordinates */5],
                /* exposedCoordinates */state[/* exposedCoordinates */6],
                /* reservedInputs */state[/* reservedInputs */7],
                /* payoutProcesses */state[/* payoutProcesses */8],
                /* knownIncomeTxIds */state[/* knownIncomeTxIds */9],
                /* balance */state[/* balance */10]
              ];
    case 9 : 
        var data = $$event[0][/* data */2];
        return /* record */[
                /* ventureId */state[/* ventureId */0],
                /* network */state[/* network */1],
                /* payoutPolicy */state[/* payoutPolicy */2],
                /* accountKeyChains : :: */[
                  /* tuple */[
                    data[/* accountIdx */0],
                    /* [] */0
                  ],
                  state[/* accountKeyChains */3]
                ],
                /* nextCoordinates */state[/* nextCoordinates */4],
                /* nextChangeCoordinates */state[/* nextChangeCoordinates */5],
                /* exposedCoordinates : :: */[
                  /* tuple */[
                    data[/* accountIdx */0],
                    /* [] */0
                  ],
                  state[/* exposedCoordinates */6]
                ],
                /* reservedInputs */state[/* reservedInputs */7],
                /* payoutProcesses */state[/* payoutProcesses */8],
                /* knownIncomeTxIds */state[/* knownIncomeTxIds */9],
                /* balance : :: */[
                  /* tuple */[
                    data[/* accountIdx */0],
                    /* record */[
                      /* income */BTC.zero,
                      /* spent */BTC.zero,
                      /* reserved */BTC.zero
                    ]
                  ],
                  state[/* balance */10]
                ]
              ];
    case 16 : 
        var match$1 = $$event[0];
        var data$1 = match$1[/* data */4];
        var balance = List.assoc(data$1[/* accountIdx */0], state[/* balance */10]);
        var match$2 = data$1[/* changeAddressCoordinates */2];
        return /* record */[
                /* ventureId */state[/* ventureId */0],
                /* network */state[/* network */1],
                /* payoutPolicy */state[/* payoutPolicy */2],
                /* accountKeyChains */state[/* accountKeyChains */3],
                /* nextCoordinates */state[/* nextCoordinates */4],
                /* nextChangeCoordinates : :: */[
                  /* tuple */[
                    data$1[/* accountIdx */0],
                    Curry._1(AccountKeyChain.Address[/* Coordinates */0][/* next */2], List.assoc(data$1[/* accountIdx */0], state[/* nextChangeCoordinates */5]))
                  ],
                  List.remove_assoc(data$1[/* accountIdx */0], state[/* nextCoordinates */4])
                ],
                /* exposedCoordinates */match$2 ? /* :: */[
                    /* tuple */[
                      data$1[/* accountIdx */0],
                      /* :: */[
                        /* tuple */[
                          match$2[0],
                          false
                        ],
                        List.assoc(data$1[/* accountIdx */0], state[/* exposedCoordinates */6])
                      ]
                    ],
                    List.remove_assoc(data$1[/* accountIdx */0], state[/* exposedCoordinates */6])
                  ] : state[/* exposedCoordinates */6],
                /* reservedInputs */List.rev_append(List.map((function (prim) {
                            return prim[1];
                          }), data$1[/* payoutTx */1][/* usedInputs */1]), state[/* reservedInputs */7]),
                /* payoutProcesses : :: */[
                  /* tuple */[
                    match$1[/* processId */0],
                    /* tuple */[
                      data$1[/* accountIdx */0],
                      data$1[/* payoutTx */1]
                    ]
                  ],
                  state[/* payoutProcesses */8]
                ],
                /* knownIncomeTxIds */state[/* knownIncomeTxIds */9],
                /* balance : :: */[
                  /* tuple */[
                    data$1[/* accountIdx */0],
                    /* record */[
                      /* income */balance[/* income */0],
                      /* spent */balance[/* spent */1],
                      /* reserved */balance[/* reserved */2].plus(PayoutTransaction.summary(data$1[/* payoutTx */1])[/* reserved */0])
                    ]
                  ],
                  List.remove_assoc(data$1[/* accountIdx */0], state[/* balance */10])
                ]
              ];
    case 20 : 
        var match$3 = List.assoc($$event[0][/* processId */0], state[/* payoutProcesses */8]);
        var payoutTx = match$3[1];
        var accountIdx = match$3[0];
        var balance$1 = List.assoc(accountIdx, state[/* balance */10]);
        var payoutSummary = PayoutTransaction.summary(payoutTx);
        return /* record */[
                /* ventureId */state[/* ventureId */0],
                /* network */state[/* network */1],
                /* payoutPolicy */state[/* payoutPolicy */2],
                /* accountKeyChains */state[/* accountKeyChains */3],
                /* nextCoordinates */state[/* nextCoordinates */4],
                /* nextChangeCoordinates */state[/* nextChangeCoordinates */5],
                /* exposedCoordinates */state[/* exposedCoordinates */6],
                /* reservedInputs */List.filter((function (input) {
                          return List.exists((function (i) {
                                        if (input[/* txId */0] === i[/* txId */0]) {
                                          return input[/* txOutputN */1] === i[/* txOutputN */1];
                                        } else {
                                          return false;
                                        }
                                      }), List.map((function (prim) {
                                            return prim[1];
                                          }), payoutTx[/* usedInputs */1])) === false;
                        }))(state[/* reservedInputs */7]),
                /* payoutProcesses */state[/* payoutProcesses */8],
                /* knownIncomeTxIds */state[/* knownIncomeTxIds */9],
                /* balance : :: */[
                  /* tuple */[
                    accountIdx,
                    /* record */[
                      /* income */balance$1[/* income */0],
                      /* spent */balance$1[/* spent */1].plus(payoutSummary[/* spent */1]),
                      /* reserved */balance$1[/* reserved */2].minus(payoutSummary[/* reserved */0])
                    ]
                  ],
                  List.remove_assoc(accountIdx, state[/* balance */10])
                ]
              ];
    case 22 : 
        var match$4 = List.assoc($$event[0][/* processId */0], state[/* payoutProcesses */8]);
        var payoutTx$1 = match$4[1];
        var accountIdx$1 = match$4[0];
        var balance$2 = List.assoc(accountIdx$1, state[/* balance */10]);
        var payoutSummary$1 = PayoutTransaction.summary(payoutTx$1);
        return /* record */[
                /* ventureId */state[/* ventureId */0],
                /* network */state[/* network */1],
                /* payoutPolicy */state[/* payoutPolicy */2],
                /* accountKeyChains */state[/* accountKeyChains */3],
                /* nextCoordinates */state[/* nextCoordinates */4],
                /* nextChangeCoordinates */state[/* nextChangeCoordinates */5],
                /* exposedCoordinates */state[/* exposedCoordinates */6],
                /* reservedInputs */List.filter((function (input) {
                          return List.exists((function (i) {
                                        if (input[/* txId */0] === i[/* txId */0]) {
                                          return input[/* txOutputN */1] === i[/* txOutputN */1];
                                        } else {
                                          return false;
                                        }
                                      }), List.map((function (prim) {
                                            return prim[1];
                                          }), payoutTx$1[/* usedInputs */1])) === false;
                        }))(state[/* reservedInputs */7]),
                /* payoutProcesses */state[/* payoutProcesses */8],
                /* knownIncomeTxIds */state[/* knownIncomeTxIds */9],
                /* balance : :: */[
                  /* tuple */[
                    accountIdx$1,
                    /* record */[
                      /* income */balance$2[/* income */0],
                      /* spent */balance$2[/* spent */1],
                      /* reserved */balance$2[/* reserved */2].minus(payoutSummary$1[/* reserved */0])
                    ]
                  ],
                  List.remove_assoc(accountIdx$1, state[/* balance */10])
                ]
              ];
    case 24 : 
        var keyChain = $$event[0][/* keyChain */0];
        return /* record */[
                /* ventureId */state[/* ventureId */0],
                /* network */state[/* network */1],
                /* payoutPolicy */state[/* payoutPolicy */2],
                /* accountKeyChains : :: */[
                  /* tuple */[
                    keyChain[/* accountIdx */0],
                    /* :: */[
                      /* tuple */[
                        keyChain[/* keyChainIdx */1],
                        keyChain
                      ],
                      List.assoc(keyChain[/* accountIdx */0], state[/* accountKeyChains */3])
                    ]
                  ],
                  List.remove_assoc(keyChain[/* accountIdx */0], state[/* accountKeyChains */3])
                ],
                /* nextCoordinates : :: */[
                  /* tuple */[
                    keyChain[/* accountIdx */0],
                    Curry._1(AccountKeyChain.Address[/* Coordinates */0][/* firstExternal */0], keyChain)
                  ],
                  List.remove_assoc(keyChain[/* accountIdx */0], state[/* nextCoordinates */4])
                ],
                /* nextChangeCoordinates : :: */[
                  /* tuple */[
                    keyChain[/* accountIdx */0],
                    Curry._1(AccountKeyChain.Address[/* Coordinates */0][/* firstInternal */1], keyChain)
                  ],
                  List.remove_assoc(keyChain[/* accountIdx */0], state[/* nextCoordinates */4])
                ],
                /* exposedCoordinates */state[/* exposedCoordinates */6],
                /* reservedInputs */state[/* reservedInputs */7],
                /* payoutProcesses */state[/* payoutProcesses */8],
                /* knownIncomeTxIds */state[/* knownIncomeTxIds */9],
                /* balance */state[/* balance */10]
              ];
    case 25 : 
        var coordinates = $$event[0][/* coordinates */0];
        var accountIdx$2 = Curry._1(AccountKeyChain.Address[/* Coordinates */0][/* accountIdx */6], coordinates);
        return /* record */[
                /* ventureId */state[/* ventureId */0],
                /* network */state[/* network */1],
                /* payoutPolicy */state[/* payoutPolicy */2],
                /* accountKeyChains */state[/* accountKeyChains */3],
                /* nextCoordinates : :: */[
                  /* tuple */[
                    accountIdx$2,
                    Curry._1(AccountKeyChain.Address[/* Coordinates */0][/* next */2], coordinates)
                  ],
                  List.remove_assoc(accountIdx$2, state[/* nextCoordinates */4])
                ],
                /* nextChangeCoordinates */state[/* nextChangeCoordinates */5],
                /* exposedCoordinates : :: */[
                  /* tuple */[
                    accountIdx$2,
                    /* :: */[
                      /* tuple */[
                        coordinates,
                        true
                      ],
                      List.assoc(accountIdx$2, state[/* exposedCoordinates */6])
                    ]
                  ],
                  List.remove_assoc(accountIdx$2, state[/* exposedCoordinates */6])
                ],
                /* reservedInputs */state[/* reservedInputs */7],
                /* payoutProcesses */state[/* payoutProcesses */8],
                /* knownIncomeTxIds */state[/* knownIncomeTxIds */9],
                /* balance */state[/* balance */10]
              ];
    case 26 : 
        var match$5 = $$event[0];
        var accountIdx$3 = getAccountIndexOfAddress(match$5[/* address */0], state);
        var balance$3 = List.assoc(accountIdx$3, state[/* balance */10]);
        return /* record */[
                /* ventureId */state[/* ventureId */0],
                /* network */state[/* network */1],
                /* payoutPolicy */state[/* payoutPolicy */2],
                /* accountKeyChains */state[/* accountKeyChains */3],
                /* nextCoordinates */state[/* nextCoordinates */4],
                /* nextChangeCoordinates */state[/* nextChangeCoordinates */5],
                /* exposedCoordinates */state[/* exposedCoordinates */6],
                /* reservedInputs */state[/* reservedInputs */7],
                /* payoutProcesses */state[/* payoutProcesses */8],
                /* knownIncomeTxIds : :: */[
                  match$5[/* txId */1],
                  state[/* knownIncomeTxIds */9]
                ],
                /* balance : :: */[
                  /* tuple */[
                    accountIdx$3,
                    /* record */[
                      /* income */balance$3[/* income */0].plus(match$5[/* amount */2]),
                      /* spent */balance$3[/* spent */1],
                      /* reserved */balance$3[/* reserved */2]
                    ]
                  ],
                  List.remove_assoc(accountIdx$3, state[/* balance */10])
                ]
              ];
    default:
      return state;
  }
}

function getKnownTransactionIds(param) {
  return param[/* knownIncomeTxIds */9];
}

function exposeNextIncomeAddress(accountIdx, param) {
  var coordinates = List.assoc(accountIdx, param[/* nextCoordinates */4]);
  var address = AccountKeyChain.find(coordinates, param[/* accountKeyChains */3]);
  return Event.IncomeAddressExposed[/* make */0](coordinates, address[/* address */5]);
}

function preparePayoutTx(param, accountIdx, destinations, satsPerByte, param$1) {
  var reservedInputs = param$1[/* reservedInputs */7];
  var accountKeyChains = param$1[/* accountKeyChains */3];
  var payoutPolicy = param$1[/* payoutPolicy */2];
  var ventureId = param$1[/* ventureId */0];
  var network = param[/* network */5];
  var masterKeyChain = param[/* masterKeyChain */4];
  var userId = param[/* userId */0];
  var coordinates = List.assoc(accountIdx, param$1[/* exposedCoordinates */6]);
  var nextChangeCoordinates = List.assoc(accountIdx, param$1[/* nextChangeCoordinates */5]);
  var currentKeyChainIdx = Curry._1(AccountKeyChain.Address[/* Coordinates */0][/* keyChainIdx */4], nextChangeCoordinates);
  return Network.transactionInputs(network)(List.map((function (prim) {
                      return prim[0];
                    }), coordinates), accountKeyChains).then((function (inputs) {
                var inputs$1 = List.filter((function (input) {
                          return List.exists((function (reservedIn) {
                                        if (reservedIn[/* txId */0] === input[/* txId */0]) {
                                          return reservedIn[/* txOutputN */1] === input[/* txOutputN */1];
                                        } else {
                                          return false;
                                        }
                                      }), reservedInputs) === false;
                        }))(inputs);
                var oldInputs = List.find_all((function (i) {
                          return WalletTypes.AccountKeyChainIndex[/* neq */7](currentKeyChainIdx, Curry._1(AccountKeyChain.Address[/* Coordinates */0][/* keyChainIdx */4], i[/* coordinates */6]));
                        }))(inputs$1);
                var changeAddress = AccountKeyChain.find(nextChangeCoordinates, accountKeyChains);
                var match = PayoutTransaction.build(oldInputs, inputs$1, destinations, satsPerByte, changeAddress, network);
                var match$1;
                match$1 = match.tag ? /* tuple */[
                    match[0],
                    /* None */0
                  ] : /* tuple */[
                    match[0],
                    /* Some */[nextChangeCoordinates]
                  ];
                var payoutTx = match$1[0];
                var match$2 = PayoutTransaction.signPayout(ventureId, userId, masterKeyChain, accountKeyChains, payoutTx, network);
                var payoutTx$1 = match$2 ? match$2[0] : payoutTx;
                return Promise.resolve(Curry._4(Event.Payout[/* Proposed */2][/* make */0], /* None */0, userId, payoutPolicy, /* record */[
                                /* accountIdx */accountIdx,
                                /* payoutTx */payoutTx$1,
                                /* changeAddressCoordinates */match$1[1]
                              ]));
              }));
}

function balance(accountIdx, param) {
  return List.assoc(accountIdx, param[/* balance */10]);
}

function registerIncomeTransaction(tx, state) {
  if (List.mem(tx[/* txId */0], state[/* knownIncomeTxIds */9])) {
    return /* [] */0;
  } else {
    var exposedAddresses = getExposedAddresses(/* None */0, state);
    return List.map((function (out) {
                  return /* IncomeDetected */Block.__(26, [Event.IncomeDetected[/* make */0](out[/* address */0], tx[/* txId */0], out[/* amount */1])]);
                }), List.filter((function (o) {
                        return List.mem(o[/* address */0], exposedAddresses);
                      }))(tx[/* outputs */1]));
  }
}

exports.make = make;
exports.getExposedAddresses = getExposedAddresses;
exports.getAccountIndexOfAddress = getAccountIndexOfAddress;
exports.apply = apply;
exports.getKnownTransactionIds = getKnownTransactionIds;
exports.exposeNextIncomeAddress = exposeNextIncomeAddress;
exports.preparePayoutTx = preparePayoutTx;
exports.balance = balance;
exports.registerIncomeTransaction = registerIncomeTransaction;
/* BTC Not a pure module */
