// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Event = require("./events/Event.bs.js");
var Utils = require("../utils/Utils.bs.js");
var Policy = require("./Policy.bs.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var UserInfo = require("./UserInfo.bs.js");
var WalletTypes = require("./wallet/WalletTypes.bs.js");
var BitcoinjsLib = require("bitcoinjs-lib");
var PrimitiveTypes = require("./PrimitiveTypes.bs.js");
var AccountKeyChain = require("./wallet/AccountKeyChain.bs.js");
var CustodianKeyChain = require("./wallet/CustodianKeyChain.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function makeState() {
  return /* record */[
          /* ventureName */"",
          /* systemIssuer */BitcoinjsLib.ECPair.makeRandom(),
          /* systemPubKey */"",
          /* metaPolicy */Policy.absolute,
          /* partnerIds : [] */0,
          /* partnerStoragePrefixes : [] */0,
          /* partnerPubKeys : [] */0,
          /* partnerData : [] */0,
          /* partnerRemovalData : [] */0,
          /* custodianData : [] */0,
          /* custodianRemovalData : [] */0,
          /* accountCreationData : [] */0,
          /* payoutData : [] */0,
          /* processes : [] */0,
          /* completedProcesses : [] */0,
          /* policies : [] */0,
          /* creatorData : record */[
            /* id */PrimitiveTypes.UserId[/* fromString */1](""),
            /* pubKey */""
          ],
          /* custodianKeyChains : [] */0,
          /* accountKeyChains : [] */0
        ];
}

function addProcess(param, state) {
  var newrecord = state.slice();
  newrecord[/* processes */13] = /* :: */[
    /* tuple */[
      param[/* processId */0],
      /* record */[
        /* supporterIds : :: */[
          param[/* supporterId */2],
          /* [] */0
        ],
        /* policy */param[/* policy */3]
      ]
    ],
    state[/* processes */13]
  ];
  return newrecord;
}

function endorseProcess(param, state) {
  var supporterId = param[/* supporterId */1];
  var processId = param[/* processId */0];
  var newrecord = state.slice();
  newrecord[/* processes */13] = List.map((function (param) {
          var $$process = param[1];
          var pId = param[0];
          var match = PrimitiveTypes.ProcessId[/* eq */5](pId, processId);
          if (match !== 0) {
            return /* tuple */[
                    pId,
                    /* record */[
                      /* supporterIds : :: */[
                        supporterId,
                        $$process[/* supporterIds */0]
                      ],
                      /* policy */$$process[/* policy */1]
                    ]
                  ];
          } else {
            return /* tuple */[
                    pId,
                    $$process
                  ];
          }
        }), state[/* processes */13]);
  return newrecord;
}

function completeProcess(param, state) {
  var newrecord = state.slice();
  newrecord[/* completedProcesses */14] = /* :: */[
    param[/* processId */0],
    state[/* completedProcesses */14]
  ];
  return newrecord;
}

function apply($$event, state) {
  switch ($$event.tag | 0) {
    case 0 : 
        var match = $$event[0];
        var systemIssuer = match[/* systemIssuer */5];
        var metaPolicy = match[/* metaPolicy */4];
        var newrecord = state.slice();
        newrecord[/* ventureName */0] = match[/* ventureName */1];
        newrecord[/* systemIssuer */1] = systemIssuer;
        newrecord[/* systemPubKey */2] = Utils.publicKeyFromKeyPair(systemIssuer);
        newrecord[/* metaPolicy */3] = metaPolicy;
        newrecord[/* policies */15] = /* :: */[
          /* tuple */[
            Event.Partner[/* Removal */5][/* processName */1],
            /* UnanimousMinusOne */1
          ],
          /* :: */[
            /* tuple */[
              Event.Custodian[/* Removal */5][/* processName */1],
              /* UnanimousMinusOne */1
            ],
            List.map((function (n) {
                    return /* tuple */[
                            n,
                            metaPolicy
                          ];
                  }), /* :: */[
                  Event.Partner[/* processName */1],
                  /* :: */[
                    Event.AccountCreation[/* processName */1],
                    /* :: */[
                      Event.Custodian[/* processName */1],
                      /* :: */[
                        Event.Payout[/* processName */1],
                        /* [] */0
                      ]
                    ]
                  ]
                ])
          ]
        ];
        newrecord[/* creatorData */16] = /* record */[
          /* id */match[/* creatorId */2],
          /* pubKey */match[/* creatorPubKey */3]
        ];
        return newrecord;
    case 1 : 
        var proposal = $$event[0];
        var newrecord$1 = addProcess(proposal, state).slice();
        newrecord$1[/* partnerData */7] = /* :: */[
          /* tuple */[
            proposal[/* processId */0],
            proposal[/* data */4]
          ],
          state[/* partnerData */7]
        ];
        return newrecord$1;
    case 3 : 
        var acceptance = $$event[0];
        var data = acceptance[/* data */2];
        var newrecord$2 = completeProcess(acceptance, state).slice();
        newrecord$2[/* partnerIds */4] = /* :: */[
          data[/* id */0],
          state[/* partnerIds */4]
        ];
        newrecord$2[/* partnerStoragePrefixes */5] = /* :: */[
          /* tuple */[
            data[/* pubKey */1],
            UserInfo.storagePrefix(data[/* pubKey */1])
          ],
          state[/* partnerStoragePrefixes */5]
        ];
        newrecord$2[/* partnerPubKeys */6] = /* :: */[
          /* tuple */[
            data[/* pubKey */1],
            data[/* id */0]
          ],
          state[/* partnerPubKeys */6]
        ];
        return newrecord$2;
    case 4 : 
        var proposal$1 = $$event[0];
        var newrecord$3 = addProcess(proposal$1, state).slice();
        newrecord$3[/* partnerRemovalData */8] = /* :: */[
          /* tuple */[
            proposal$1[/* processId */0],
            proposal$1[/* data */4]
          ],
          state[/* partnerRemovalData */8]
        ];
        return newrecord$3;
    case 6 : 
        var acceptance$1 = $$event[0];
        var id = acceptance$1[/* data */2][/* id */0];
        var pubKey = List.find((function (param) {
                  return PrimitiveTypes.UserId[/* eq */5](param[1], id);
                }), state[/* partnerPubKeys */6])[0];
        var newrecord$4 = completeProcess(acceptance$1, state).slice();
        var partial_arg = PrimitiveTypes.UserId[/* neq */6];
        newrecord$4[/* partnerIds */4] = List.filter((function (param) {
                  return partial_arg(id, param);
                }))(state[/* partnerIds */4]);
        newrecord$4[/* partnerStoragePrefixes */5] = List.remove_assoc(pubKey, state[/* partnerStoragePrefixes */5]);
        newrecord$4[/* partnerPubKeys */6] = List.remove_assoc(pubKey, state[/* partnerPubKeys */6]);
        return newrecord$4;
    case 7 : 
        var proposal$2 = $$event[0];
        var newrecord$5 = addProcess(proposal$2, state).slice();
        newrecord$5[/* accountCreationData */11] = /* :: */[
          /* tuple */[
            proposal$2[/* processId */0],
            proposal$2[/* data */4]
          ],
          state[/* accountCreationData */11]
        ];
        return newrecord$5;
    case 9 : 
        var acceptance$2 = $$event[0];
        var newrecord$6 = completeProcess(acceptance$2, state).slice();
        newrecord$6[/* accountKeyChains */18] = /* :: */[
          /* tuple */[
            acceptance$2[/* data */2][/* accountIdx */0],
            /* [] */0
          ],
          state[/* accountKeyChains */18]
        ];
        return newrecord$6;
    case 10 : 
        var proposal$3 = $$event[0];
        var newrecord$7 = addProcess(proposal$3, state).slice();
        newrecord$7[/* custodianData */9] = /* :: */[
          /* tuple */[
            proposal$3[/* processId */0],
            proposal$3[/* data */4]
          ],
          state[/* custodianData */9]
        ];
        return newrecord$7;
    case 12 : 
        var acceptance$3 = $$event[0];
        var match$1 = acceptance$3[/* data */2];
        var accountIdx = match$1[/* accountIdx */2];
        var partnerId = match$1[/* partnerId */0];
        var userChains;
        try {
          userChains = List.assoc(partnerId, state[/* custodianKeyChains */17]);
        }
        catch (exn){
          if (exn === Caml_builtin_exceptions.not_found) {
            userChains = /* [] */0;
          } else {
            throw exn;
          }
        }
        var accountChains;
        try {
          accountChains = List.assoc(accountIdx, userChains);
        }
        catch (exn$1){
          if (exn$1 === Caml_builtin_exceptions.not_found) {
            accountChains = /* [] */0;
          } else {
            throw exn$1;
          }
        }
        var newrecord$8 = completeProcess(acceptance$3, state).slice();
        newrecord$8[/* custodianKeyChains */17] = /* :: */[
          /* tuple */[
            partnerId,
            /* :: */[
              /* tuple */[
                accountIdx,
                accountChains
              ],
              List.remove_assoc(accountIdx, userChains)
            ]
          ],
          List.remove_assoc(partnerId, state[/* custodianKeyChains */17])
        ];
        return newrecord$8;
    case 13 : 
        var proposal$4 = $$event[0];
        var newrecord$9 = addProcess(proposal$4, state).slice();
        newrecord$9[/* custodianRemovalData */10] = /* :: */[
          /* tuple */[
            proposal$4[/* processId */0],
            proposal$4[/* data */4]
          ],
          state[/* custodianRemovalData */10]
        ];
        return newrecord$9;
    case 16 : 
        var proposal$5 = $$event[0];
        var newrecord$10 = addProcess(proposal$5, state).slice();
        newrecord$10[/* payoutData */12] = /* :: */[
          /* tuple */[
            proposal$5[/* processId */0],
            proposal$5[/* data */4]
          ],
          state[/* payoutData */12]
        ];
        return newrecord$10;
    case 15 : 
    case 18 : 
        return completeProcess($$event[0], state);
    case 23 : 
        var match$2 = $$event[0];
        var keyChain = match$2[/* keyChain */2];
        var partnerId$1 = match$2[/* partnerId */1];
        var userChains$1;
        try {
          userChains$1 = List.assoc(partnerId$1, state[/* custodianKeyChains */17]);
        }
        catch (exn$2){
          if (exn$2 === Caml_builtin_exceptions.not_found) {
            userChains$1 = /* [] */0;
          } else {
            throw exn$2;
          }
        }
        var accountChains$1;
        try {
          accountChains$1 = List.assoc(CustodianKeyChain.accountIdx(keyChain), userChains$1);
        }
        catch (exn$3){
          if (exn$3 === Caml_builtin_exceptions.not_found) {
            accountChains$1 = /* [] */0;
          } else {
            throw exn$3;
          }
        }
        var newrecord$11 = state.slice();
        newrecord$11[/* custodianKeyChains */17] = /* :: */[
          /* tuple */[
            partnerId$1,
            /* :: */[
              /* tuple */[
                CustodianKeyChain.accountIdx(keyChain),
                /* :: */[
                  keyChain,
                  accountChains$1
                ]
              ],
              /* [] */0
            ]
          ],
          List.remove_assoc(partnerId$1, state[/* custodianKeyChains */17])
        ];
        return newrecord$11;
    case 24 : 
        var keyChain$1 = $$event[0][/* keyChain */0];
        var accountChains$2;
        try {
          accountChains$2 = List.assoc(keyChain$1[/* accountIdx */0], state[/* accountKeyChains */18]);
        }
        catch (exn$4){
          if (exn$4 === Caml_builtin_exceptions.not_found) {
            accountChains$2 = /* [] */0;
          } else {
            throw exn$4;
          }
        }
        var newrecord$12 = state.slice();
        newrecord$12[/* accountKeyChains */18] = /* :: */[
          /* tuple */[
            keyChain$1[/* accountIdx */0],
            /* :: */[
              /* tuple */[
                keyChain$1[/* keyChainIdx */1],
                keyChain$1
              ],
              accountChains$2
            ]
          ],
          /* [] */0
        ];
        return newrecord$12;
    case 19 : 
    case 20 : 
    case 21 : 
    case 22 : 
    case 25 : 
    case 26 : 
        return state;
    default:
      return endorseProcess($$event[0], state);
  }
}

function resultToString(param) {
  if (typeof param === "number") {
    switch (param) {
      case 0 : 
          return "Ok";
      case 1 : 
          return "Ignore";
      case 2 : 
          return "InvalidIssuer";
      case 3 : 
          return "UnknownProcessId";
      case 4 : 
          return "PolicyMissmatch";
      case 5 : 
          return "PolicyNotFulfilled";
      case 6 : 
          return "DependencyNotMet";
      
    }
  } else {
    return "BadData(" + (param[0] + ")");
  }
}

function defaultDataValidator(_, _$1) {
  return /* Ok */0;
}

function validateProposal($staropt$star, processName, param, state, issuerPubKey) {
  var data = param[/* data */4];
  var dependsOn = param[/* dependsOn */1];
  var validateData = $staropt$star ? $staropt$star[0] : defaultDataValidator;
  if (Policy.neq(param[/* policy */3], List.assoc(processName, state[/* policies */15]))) {
    return /* PolicyMissmatch */4;
  } else if (PrimitiveTypes.UserId[/* neq */6](List.assoc(issuerPubKey, state[/* partnerPubKeys */6]), param[/* supporterId */2])) {
    return /* InvalidIssuer */2;
  } else if (dependsOn) {
    var match = List.mem_assoc(dependsOn[0], state[/* processes */13]);
    if (match !== 0) {
      return Curry._2(validateData, data, state);
    } else {
      return /* DependencyNotMet */6;
    }
  } else {
    return Curry._2(validateData, data, state);
  }
}

function validateEndorsement(param, param$1, issuerPubKey) {
  var supporterId = param[/* supporterId */1];
  try {
    var match = List.assoc(param[/* processId */0], param$1[/* processes */13]);
    if (PrimitiveTypes.UserId[/* neq */6](List.assoc(issuerPubKey, param$1[/* partnerPubKeys */6]), supporterId)) {
      return /* InvalidIssuer */2;
    } else if (List.mem(supporterId, match[/* supporterIds */0])) {
      return /* Ignore */1;
    } else {
      return /* Ok */0;
    }
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return /* UnknownProcessId */3;
    } else {
      throw exn;
    }
  }
}

function validateAcceptance(param, dataList, param$1, _) {
  var dependsOn = param[/* dependsOn */1];
  var processId = param[/* processId */0];
  try {
    var match = List.assoc(processId, param$1[/* processes */13]);
    if (Caml_obj.caml_notequal(param[/* data */2], List.assoc(processId, dataList))) {
      return /* BadData */["Data doesn't match proposal"];
    } else if (Curry._2(Policy.fulfilled(match[/* policy */1]), param$1[/* partnerIds */4], match[/* supporterIds */0]) === /* false */0) {
      return /* PolicyNotFulfilled */5;
    } else if (dependsOn) {
      var match$1 = List.mem(dependsOn[0], param$1[/* completedProcesses */14]);
      if (match$1 !== 0) {
        return /* Ok */0;
      } else {
        return /* DependencyNotMet */6;
      }
    } else {
      return /* Ok */0;
    }
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return /* UnknownProcessId */3;
    } else {
      throw exn;
    }
  }
}

function validatePartnerRemovalData(param, param$1) {
  var id = param[/* id */0];
  var match = List.mem(id, param$1[/* partnerIds */4]);
  if (match !== 0) {
    return /* Ok */0;
  } else {
    return /* BadData */["Partner with Id '" + (PrimitiveTypes.UserId[/* toString */0](id) + "' doesn't exist")];
  }
}

function validateCustodianData(param, param$1) {
  try {
    var pData = List.assoc(param[/* partnerApprovalProcess */1], param$1[/* partnerData */7]);
    var match = PrimitiveTypes.UserId[/* eq */5](pData[/* id */0], param[/* partnerId */0]);
    if (match !== 0) {
      return /* Ok */0;
    } else {
      return /* BadData */["Partner with Id 'custodian.id' doesn't exist"];
    }
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return /* BadData */["Partner with Id 'custodian.id' doesn't exist"];
    } else {
      throw exn;
    }
  }
}

function validateCustodianRemovalData(param, param$1) {
  var accountIdx = param[/* accountIdx */1];
  var custodianId = param[/* custodianId */0];
  try {
    var match = List.exists((function (param) {
            var data = param[1];
            if (PrimitiveTypes.UserId[/* eq */5](data[/* partnerId */0], custodianId)) {
              return WalletTypes.AccountIndex[/* eq */6](accountIdx, data[/* accountIdx */2]);
            } else {
              return /* false */0;
            }
          }), param$1[/* custodianData */9]);
    if (match !== 0) {
      return /* Ok */0;
    } else {
      throw Caml_builtin_exceptions.not_found;
    }
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return /* BadData */["Partner with Id '" + (PrimitiveTypes.UserId[/* toString */0](custodianId) + ("' is not a custodian of account with index " + String(WalletTypes.AccountIndex[/* toInt */0](accountIdx))))];
    } else {
      throw exn;
    }
  }
}

function validateAccountCreationData(param, param$1) {
  var match = +(WalletTypes.AccountIndex[/* toInt */0](param[/* accountIdx */0]) === List.length(param$1[/* accountCreationData */11]));
  if (match !== 0) {
    return /* Ok */0;
  } else {
    return /* BadData */["Bad Account Index"];
  }
}

function validateCustodianKeyChainUpdated(param, param$1, issuerPubKey) {
  var keyChain = param[/* keyChain */2];
  var partnerId = param[/* partnerId */1];
  if (PrimitiveTypes.UserId[/* neq */6](List.assoc(issuerPubKey, param$1[/* partnerPubKeys */6]), partnerId)) {
    return /* InvalidIssuer */2;
  } else {
    try {
      var match = List.find((function (param) {
              var data = param[1];
              if (Caml_obj.caml_equal(data[/* partnerId */0], partnerId)) {
                return Caml_obj.caml_equal(data[/* accountIdx */2], CustodianKeyChain.accountIdx(keyChain));
              } else {
                return /* false */0;
              }
            }), param$1[/* custodianData */9]);
      if (List.mem(match[0], param$1[/* completedProcesses */14])) {
        if (List.length(List.assoc(CustodianKeyChain.accountIdx(keyChain), List.assoc(partnerId, param$1[/* custodianKeyChains */17]))) !== WalletTypes.CustodianKeyChainIndex[/* toInt */0](CustodianKeyChain.keyChainIdx(keyChain))) {
          return /* BadData */["Bad KeyChainIndex"];
        } else {
          return /* Ok */0;
        }
      } else {
        return /* BadData */["Custodian isn't accepted yet"];
      }
    }
    catch (exn){
      if (exn === Caml_builtin_exceptions.not_found) {
        return /* BadData */["Custodian doesn't exist"];
      } else {
        throw exn;
      }
    }
  }
}

function validateAccountKeyChainUpdated(param, param$1, _) {
  var custodianKeyChains = param$1[/* custodianKeyChains */17];
  var keyChain = param[/* keyChain */0];
  try {
    var match = List.find((function (param) {
            return Caml_obj.caml_equal(param[1][/* accountIdx */0], keyChain[/* accountIdx */0]);
          }), param$1[/* accountCreationData */11]);
    if (List.mem(match[0], param$1[/* completedProcesses */14])) {
      if (List.length(List.assoc(keyChain[/* accountIdx */0], param$1[/* accountKeyChains */18])) !== WalletTypes.AccountKeyChainIndex[/* toInt */0](keyChain[/* keyChainIdx */1])) {
        return /* BadData */["Bad KeyChainIndex"];
      } else {
        var accountIdx = keyChain[/* accountIdx */0];
        return List.fold_left((function (result, test) {
                      var match = +(test === /* Ok */0);
                      if (match !== 0) {
                        return result;
                      } else {
                        return test;
                      }
                    }), /* Ok */0, List.map((function (param) {
                          try {
                            var latestKeyChain = List.hd(List.rev(List.sort((function (keysA, keysB) {
                                            return Caml_obj.caml_compare(CustodianKeyChain.keyChainIdx(keysA), CustodianKeyChain.keyChainIdx(keysB));
                                          }), List.assoc(accountIdx, List.assoc(param[0], custodianKeyChains)))));
                            var match = Caml_obj.caml_equal(param[1], latestKeyChain);
                            if (match !== 0) {
                              return /* Ok */0;
                            } else {
                              return /* BadData */["Bad CustodianKeyChain"];
                            }
                          }
                          catch (exn){
                            if (exn === Caml_builtin_exceptions.not_found) {
                              return /* BadData */["Bad CustodianKeyChain"];
                            } else {
                              throw exn;
                            }
                          }
                        }), AccountKeyChain.custodianKeyChains(keyChain)));
      }
    } else {
      return /* BadData */["Account doesn't exist"];
    }
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return /* BadData */["Account doesn't exist"];
    } else {
      throw exn;
    }
  }
}

function validateIncomeAddressExposed(param, param$1, _) {
  try {
    var generatedAddress = AccountKeyChain.find(param[/* coordinates */0], param$1[/* accountKeyChains */18]);
    if (param[/* address */1] === generatedAddress[/* address */5]) {
      return /* Ok */0;
    } else {
      return /* BadData */["Unknown Address"];
    }
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return /* BadData */["Unknown Address"];
    } else {
      throw exn;
    }
  }
}

function validateEvent(param) {
  switch (param.tag | 0) {
    case 0 : 
        return (function (_, _$1) {
            return /* Ok */0;
          });
    case 1 : 
        var proposal = param[0];
        var partial_arg = Event.Partner[/* processName */1];
        return (function (param, param$1) {
            return validateProposal(/* None */0, partial_arg, proposal, param, param$1);
          });
    case 3 : 
        var acceptance = param[0];
        return (function (state) {
            var partial_arg = state[/* partnerData */7];
            return (function (param) {
                return validateAcceptance(acceptance, partial_arg, state, param);
              });
          });
    case 4 : 
        var proposal$1 = param[0];
        var partial_arg$1 = Event.Partner[/* Removal */5][/* processName */1];
        var partial_arg$2 = /* Some */[validatePartnerRemovalData];
        return (function (param, param$1) {
            return validateProposal(partial_arg$2, partial_arg$1, proposal$1, param, param$1);
          });
    case 6 : 
        var acceptance$1 = param[0];
        return (function (state) {
            var partial_arg = state[/* partnerRemovalData */8];
            return (function (param) {
                return validateAcceptance(acceptance$1, partial_arg, state, param);
              });
          });
    case 7 : 
        var proposal$2 = param[0];
        var partial_arg$3 = Event.AccountCreation[/* processName */1];
        var partial_arg$4 = /* Some */[validateAccountCreationData];
        return (function (param, param$1) {
            return validateProposal(partial_arg$4, partial_arg$3, proposal$2, param, param$1);
          });
    case 9 : 
        var acceptance$2 = param[0];
        return (function (state) {
            var partial_arg = state[/* accountCreationData */11];
            return (function (param) {
                return validateAcceptance(acceptance$2, partial_arg, state, param);
              });
          });
    case 10 : 
        var proposal$3 = param[0];
        var partial_arg$5 = Event.Custodian[/* processName */1];
        var partial_arg$6 = /* Some */[validateCustodianData];
        return (function (param, param$1) {
            return validateProposal(partial_arg$6, partial_arg$5, proposal$3, param, param$1);
          });
    case 12 : 
        var acceptance$3 = param[0];
        return (function (state) {
            var partial_arg = state[/* custodianData */9];
            return (function (param) {
                return validateAcceptance(acceptance$3, partial_arg, state, param);
              });
          });
    case 13 : 
        var proposal$4 = param[0];
        var partial_arg$7 = Event.Custodian[/* Removal */5][/* processName */1];
        var partial_arg$8 = /* Some */[validateCustodianRemovalData];
        return (function (param, param$1) {
            return validateProposal(partial_arg$8, partial_arg$7, proposal$4, param, param$1);
          });
    case 15 : 
        var acceptance$4 = param[0];
        return (function (state) {
            var partial_arg = state[/* custodianRemovalData */10];
            return (function (param) {
                return validateAcceptance(acceptance$4, partial_arg, state, param);
              });
          });
    case 16 : 
        var proposal$5 = param[0];
        var partial_arg$9 = Event.Payout[/* processName */1];
        return (function (param, param$1) {
            return validateProposal(/* None */0, partial_arg$9, proposal$5, param, param$1);
          });
    case 18 : 
        var acceptance$5 = param[0];
        return (function (state) {
            var partial_arg = state[/* payoutData */12];
            return (function (param) {
                return validateAcceptance(acceptance$5, partial_arg, state, param);
              });
          });
    case 19 : 
        return (function (_, _$1) {
            return /* Ok */0;
          });
    case 20 : 
        return (function (_, _$1) {
            return /* Ok */0;
          });
    case 21 : 
        return (function (_, _$1) {
            return /* Ignore */1;
          });
    case 22 : 
        return (function (_, _$1) {
            return /* Ok */0;
          });
    case 23 : 
        var partial_arg$10 = param[0];
        return (function (param, param$1) {
            return validateCustodianKeyChainUpdated(partial_arg$10, param, param$1);
          });
    case 24 : 
        var partial_arg$11 = param[0];
        return (function (param, param$1) {
            return validateAccountKeyChainUpdated(partial_arg$11, param, param$1);
          });
    case 25 : 
        var partial_arg$12 = param[0];
        return (function (param, param$1) {
            return validateIncomeAddressExposed(partial_arg$12, param, param$1);
          });
    case 26 : 
        return (function (_, _$1) {
            return /* Ok */0;
          });
    default:
      var partial_arg$13 = param[0];
      return (function (param, param$1) {
          return validateEndorsement(partial_arg$13, param, param$1);
        });
  }
}

function validate(state, param) {
  var issuerPubKey = param[/* issuerPubKey */2];
  var $$event = param[/* event */0];
  var match = Event.isSystemEvent($$event);
  var match$1 = List.mem_assoc(issuerPubKey, state[/* partnerPubKeys */6]);
  var exit = 0;
  switch ($$event.tag | 0) {
    case 0 : 
        return /* Ok */0;
    case 1 : 
        if (match !== 0) {
          exit = 1;
        } else if (match$1 !== 0) {
          return Curry._2(validateEvent($$event), state, issuerPubKey);
        } else if (Caml_obj.caml_equal($$event[0][/* data */4], state[/* creatorData */16]) && issuerPubKey === state[/* creatorData */16][/* pubKey */1] && List.length(state[/* partnerData */7]) === 0) {
          return /* Ok */0;
        } else {
          exit = 1;
        }
        break;
    default:
      exit = 1;
  }
  if (exit === 1) {
    if (match !== 0) {
      if (issuerPubKey !== state[/* systemPubKey */2]) {
        return /* InvalidIssuer */2;
      } else if ($$event.tag === 3 && !(match$1 !== 0 || !(Caml_obj.caml_equal($$event[0][/* data */2], state[/* creatorData */16]) && List.length(state[/* partnerData */7]) === 1))) {
        return /* Ok */0;
      } else {
        return Curry._2(validateEvent($$event), state, issuerPubKey);
      }
    } else if (match$1 !== 0) {
      return Curry._2(validateEvent($$event), state, issuerPubKey);
    } else {
      return /* InvalidIssuer */2;
    }
  }
  
}

exports.makeState = makeState;
exports.addProcess = addProcess;
exports.endorseProcess = endorseProcess;
exports.completeProcess = completeProcess;
exports.apply = apply;
exports.resultToString = resultToString;
exports.defaultDataValidator = defaultDataValidator;
exports.validateProposal = validateProposal;
exports.validateEndorsement = validateEndorsement;
exports.validateAcceptance = validateAcceptance;
exports.validatePartnerRemovalData = validatePartnerRemovalData;
exports.validateCustodianData = validateCustodianData;
exports.validateCustodianRemovalData = validateCustodianRemovalData;
exports.validateAccountCreationData = validateAccountCreationData;
exports.validateCustodianKeyChainUpdated = validateCustodianKeyChainUpdated;
exports.validateAccountKeyChainUpdated = validateAccountKeyChainUpdated;
exports.validateIncomeAddressExposed = validateIncomeAddressExposed;
exports.validateEvent = validateEvent;
exports.validate = validate;
/* Event Not a pure module */
