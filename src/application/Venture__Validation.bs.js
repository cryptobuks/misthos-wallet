// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Event = require("./events/Event.bs.js");
var Utils = require("../utils/Utils.bs.js");
var Policy = require("./Policy.bs.js");
var Address = require("./wallet/Address.bs.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var WalletTypes = require("./wallet/WalletTypes.bs.js");
var PrimitiveTypes = require("./PrimitiveTypes.bs.js");
var CustodianKeyChain = require("./wallet/CustodianKeyChain.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function make() {
  return /* record */[
          /* systemPubKey */"",
          /* metaPolicy */Policy.unanimous,
          /* knownItems : [] */0,
          /* currentPartners : [] */0,
          /* currentPartnerPubKeys : [] */0,
          /* partnerData : [] */0,
          /* partnerAccepted : [] */0,
          /* partnerRemovalData : [] */0,
          /* partnerRemovals : [] */0,
          /* custodianData : [] */0,
          /* custodianRemovalData : [] */0,
          /* custodianRemovals : [] */0,
          /* currentCustodians : [] */0,
          /* accountCreationData : [] */0,
          /* payoutData : [] */0,
          /* processes : [] */0,
          /* completedProcesses : [] */0,
          /* policies : [] */0,
          /* creatorData : record */[
            /* lastPartnerRemovalProcess : None */0,
            /* id */PrimitiveTypes.UserId[/* fromString */1](""),
            /* pubKey */""
          ],
          /* custodianKeyChains : [] */0,
          /* accountKeyChains : [] */0
        ];
}

function addProcess(param, state) {
  var newrecord = Caml_array.caml_array_dup(state);
  newrecord[/* processes */15] = /* :: */[
    /* tuple */[
      param[/* processId */0],
      /* record */[
        /* supporterIds : :: */[
          param[/* supporterId */3],
          /* [] */0
        ],
        /* policy */param[/* policy */4]
      ]
    ],
    state[/* processes */15]
  ];
  return newrecord;
}

function endorseProcess(param, state) {
  var supporterId = param[/* supporterId */1];
  var processId = param[/* processId */0];
  var newrecord = Caml_array.caml_array_dup(state);
  newrecord[/* processes */15] = List.map((function (param) {
          var $$process = param[1];
          var pId = param[0];
          var match = PrimitiveTypes.ProcessId[/* eq */5](pId, processId);
          if (match) {
            return /* tuple */[
                    pId,
                    /* record */[
                      /* supporterIds : :: */[
                        supporterId,
                        $$process[/* supporterIds */0]
                      ],
                      /* policy */$$process[/* policy */1]
                    ]
                  ];
          } else {
            return /* tuple */[
                    pId,
                    $$process
                  ];
          }
        }), state[/* processes */15]);
  return newrecord;
}

function completeProcess(param, state) {
  var newrecord = Caml_array.caml_array_dup(state);
  newrecord[/* completedProcesses */16] = /* :: */[
    param[/* processId */0],
    state[/* completedProcesses */16]
  ];
  return newrecord;
}

function apply(param, state) {
  var $$event = param[/* event */0];
  var newrecord = Caml_array.caml_array_dup(state);
  newrecord[/* knownItems */2] = /* :: */[
    param[/* hash */1],
    state[/* knownItems */2]
  ];
  switch ($$event.tag | 0) {
    case 0 : 
        var match = $$event[0];
        var metaPolicy = match[/* metaPolicy */4];
        var newrecord$1 = Caml_array.caml_array_dup(newrecord);
        newrecord$1[/* systemPubKey */0] = Utils.publicKeyFromKeyPair(match[/* systemIssuer */5]);
        newrecord$1[/* metaPolicy */1] = metaPolicy;
        newrecord$1[/* policies */17] = /* :: */[
          /* tuple */[
            Event.Partner[/* Removal */7][/* processName */1],
            /* UnanimousMinusOne */1
          ],
          /* :: */[
            /* tuple */[
              Event.Custodian[/* Removal */7][/* processName */1],
              /* UnanimousMinusOne */1
            ],
            List.map((function (n) {
                    return /* tuple */[
                            n,
                            metaPolicy
                          ];
                  }), /* :: */[
                  Event.Partner[/* processName */1],
                  /* :: */[
                    Event.AccountCreation[/* processName */1],
                    /* :: */[
                      Event.Custodian[/* processName */1],
                      /* :: */[
                        Event.Payout[/* processName */1],
                        /* [] */0
                      ]
                    ]
                  ]
                ])
          ]
        ];
        newrecord$1[/* creatorData */18] = /* record */[
          /* lastPartnerRemovalProcess : None */0,
          /* id */match[/* creatorId */2],
          /* pubKey */match[/* creatorPubKey */3]
        ];
        return newrecord$1;
    case 1 : 
        var proposal = $$event[0];
        var newrecord$2 = Caml_array.caml_array_dup(addProcess(proposal, newrecord));
        newrecord$2[/* partnerData */5] = /* :: */[
          /* tuple */[
            proposal[/* processId */0],
            /* tuple */[
              proposal[/* supporterId */3],
              proposal[/* data */5]
            ]
          ],
          newrecord[/* partnerData */5]
        ];
        return newrecord$2;
    case 4 : 
        var acceptance = $$event[0];
        var data = acceptance[/* data */2];
        var newrecord$3 = Caml_array.caml_array_dup(completeProcess(acceptance, newrecord));
        newrecord$3[/* currentPartners */3] = /* :: */[
          data[/* id */1],
          newrecord[/* currentPartners */3]
        ];
        newrecord$3[/* currentPartnerPubKeys */4] = /* :: */[
          /* tuple */[
            data[/* pubKey */2],
            data[/* id */1]
          ],
          newrecord[/* currentPartnerPubKeys */4]
        ];
        newrecord$3[/* partnerAccepted */6] = /* :: */[
          /* tuple */[
            data[/* id */1],
            acceptance[/* processId */0]
          ],
          newrecord[/* partnerAccepted */6]
        ];
        return newrecord$3;
    case 5 : 
        var proposal$1 = $$event[0];
        var newrecord$4 = Caml_array.caml_array_dup(addProcess(proposal$1, newrecord));
        newrecord$4[/* partnerRemovalData */7] = /* :: */[
          /* tuple */[
            proposal$1[/* processId */0],
            /* tuple */[
              proposal$1[/* supporterId */3],
              proposal$1[/* data */5]
            ]
          ],
          newrecord[/* partnerRemovalData */7]
        ];
        return newrecord$4;
    case 8 : 
        var acceptance$1 = $$event[0];
        var id = acceptance$1[/* data */2][/* id */0];
        var pubKey = List.find((function (param) {
                  return PrimitiveTypes.UserId[/* eq */5](param[1], id);
                }), newrecord[/* currentPartnerPubKeys */4])[0];
        var newrecord$5 = Caml_array.caml_array_dup(completeProcess(acceptance$1, newrecord));
        var partial_arg = PrimitiveTypes.UserId[/* neq */6];
        newrecord$5[/* currentPartners */3] = List.filter((function (param) {
                  return partial_arg(id, param);
                }))(newrecord[/* currentPartners */3]);
        newrecord$5[/* currentPartnerPubKeys */4] = List.remove_assoc(pubKey, newrecord[/* currentPartnerPubKeys */4]);
        newrecord$5[/* partnerRemovals */8] = /* :: */[
          /* tuple */[
            id,
            acceptance$1[/* processId */0]
          ],
          newrecord[/* partnerRemovals */8]
        ];
        return newrecord$5;
    case 9 : 
        var proposal$2 = $$event[0];
        var newrecord$6 = Caml_array.caml_array_dup(addProcess(proposal$2, newrecord));
        newrecord$6[/* accountCreationData */13] = /* :: */[
          /* tuple */[
            proposal$2[/* processId */0],
            /* tuple */[
              proposal$2[/* supporterId */3],
              proposal$2[/* data */5]
            ]
          ],
          newrecord[/* accountCreationData */13]
        ];
        return newrecord$6;
    case 12 : 
        var acceptance$2 = $$event[0];
        var data$1 = acceptance$2[/* data */2];
        var newrecord$7 = Caml_array.caml_array_dup(completeProcess(acceptance$2, newrecord));
        newrecord$7[/* currentCustodians */12] = /* :: */[
          /* tuple */[
            data$1[/* accountIdx */0],
            /* [] */0
          ],
          newrecord[/* currentCustodians */12]
        ];
        newrecord$7[/* accountKeyChains */20] = /* :: */[
          /* tuple */[
            data$1[/* accountIdx */0],
            /* [] */0
          ],
          newrecord[/* accountKeyChains */20]
        ];
        return newrecord$7;
    case 13 : 
        var proposal$3 = $$event[0];
        var newrecord$8 = Caml_array.caml_array_dup(addProcess(proposal$3, newrecord));
        newrecord$8[/* custodianData */9] = /* :: */[
          /* tuple */[
            proposal$3[/* processId */0],
            /* tuple */[
              proposal$3[/* supporterId */3],
              proposal$3[/* data */5]
            ]
          ],
          newrecord[/* custodianData */9]
        ];
        return newrecord$8;
    case 16 : 
        var acceptance$3 = $$event[0];
        var match$1 = acceptance$3[/* data */2];
        var accountIdx = match$1[/* accountIdx */3];
        var partnerId = match$1[/* partnerId */0];
        var userChains;
        try {
          userChains = List.assoc(partnerId, newrecord[/* custodianKeyChains */19]);
        }
        catch (exn){
          if (exn === Caml_builtin_exceptions.not_found) {
            userChains = /* [] */0;
          } else {
            throw exn;
          }
        }
        var accountChains;
        try {
          accountChains = List.assoc(accountIdx, userChains);
        }
        catch (exn$1){
          if (exn$1 === Caml_builtin_exceptions.not_found) {
            accountChains = /* [] */0;
          } else {
            throw exn$1;
          }
        }
        var newrecord$9 = Caml_array.caml_array_dup(completeProcess(acceptance$3, newrecord));
        newrecord$9[/* currentCustodians */12] = /* :: */[
          /* tuple */[
            accountIdx,
            /* :: */[
              partnerId,
              List.assoc(accountIdx, newrecord[/* currentCustodians */12])
            ]
          ],
          List.remove_assoc(accountIdx, newrecord[/* currentCustodians */12])
        ];
        newrecord$9[/* custodianKeyChains */19] = /* :: */[
          /* tuple */[
            partnerId,
            /* :: */[
              /* tuple */[
                accountIdx,
                accountChains
              ],
              List.remove_assoc(accountIdx, userChains)
            ]
          ],
          List.remove_assoc(partnerId, newrecord[/* custodianKeyChains */19])
        ];
        return newrecord$9;
    case 17 : 
        var proposal$4 = $$event[0];
        var newrecord$10 = Caml_array.caml_array_dup(addProcess(proposal$4, newrecord));
        newrecord$10[/* custodianRemovalData */10] = /* :: */[
          /* tuple */[
            proposal$4[/* processId */0],
            /* tuple */[
              proposal$4[/* supporterId */3],
              proposal$4[/* data */5]
            ]
          ],
          newrecord[/* custodianRemovalData */10]
        ];
        return newrecord$10;
    case 20 : 
        var acceptance$4 = $$event[0];
        var match$2 = acceptance$4[/* data */2];
        var accountIdx$1 = match$2[/* accountIdx */1];
        var custodianId = match$2[/* custodianId */0];
        var newrecord$11 = Caml_array.caml_array_dup(completeProcess(acceptance$4, newrecord));
        newrecord$11[/* custodianRemovals */11] = /* :: */[
          /* tuple */[
            custodianId,
            acceptance$4[/* processId */0]
          ],
          newrecord[/* custodianRemovals */11]
        ];
        var partial_arg$1 = PrimitiveTypes.UserId[/* neq */6];
        newrecord$11[/* currentCustodians */12] = /* :: */[
          /* tuple */[
            accountIdx$1,
            List.filter((function (param) {
                      return partial_arg$1(custodianId, param);
                    }))(List.assoc(accountIdx$1, newrecord[/* currentCustodians */12]))
          ],
          List.remove_assoc(accountIdx$1, newrecord[/* currentCustodians */12])
        ];
        return newrecord$11;
    case 21 : 
        var proposal$5 = $$event[0];
        var newrecord$12 = Caml_array.caml_array_dup(addProcess(proposal$5, newrecord));
        newrecord$12[/* payoutData */14] = /* :: */[
          /* tuple */[
            proposal$5[/* processId */0],
            /* tuple */[
              proposal$5[/* supporterId */3],
              proposal$5[/* data */5]
            ]
          ],
          newrecord[/* payoutData */14]
        ];
        return newrecord$12;
    case 2 : 
    case 6 : 
    case 10 : 
    case 14 : 
    case 18 : 
    case 22 : 
        return newrecord;
    case 3 : 
    case 7 : 
    case 11 : 
    case 15 : 
    case 19 : 
    case 23 : 
        return endorseProcess($$event[0], newrecord);
    case 24 : 
        return completeProcess($$event[0], newrecord);
    case 29 : 
        var match$3 = $$event[0];
        var keyChain = match$3[/* keyChain */2];
        var custodianId$1 = match$3[/* custodianId */1];
        var userChains$1;
        try {
          userChains$1 = List.assoc(custodianId$1, newrecord[/* custodianKeyChains */19]);
        }
        catch (exn$2){
          if (exn$2 === Caml_builtin_exceptions.not_found) {
            userChains$1 = /* [] */0;
          } else {
            throw exn$2;
          }
        }
        var accountChains$1;
        try {
          accountChains$1 = List.assoc(CustodianKeyChain.accountIdx(keyChain), userChains$1);
        }
        catch (exn$3){
          if (exn$3 === Caml_builtin_exceptions.not_found) {
            accountChains$1 = /* [] */0;
          } else {
            throw exn$3;
          }
        }
        var newrecord$13 = Caml_array.caml_array_dup(newrecord);
        newrecord$13[/* custodianKeyChains */19] = /* :: */[
          /* tuple */[
            custodianId$1,
            /* :: */[
              /* tuple */[
                CustodianKeyChain.accountIdx(keyChain),
                /* :: */[
                  keyChain,
                  accountChains$1
                ]
              ],
              /* [] */0
            ]
          ],
          List.remove_assoc(custodianId$1, newrecord[/* custodianKeyChains */19])
        ];
        return newrecord$13;
    case 30 : 
        var keyChain$1 = $$event[0][/* keyChain */0];
        var accountChains$2;
        try {
          accountChains$2 = List.assoc(keyChain$1[/* accountIdx */0], newrecord[/* accountKeyChains */20]);
        }
        catch (exn$4){
          if (exn$4 === Caml_builtin_exceptions.not_found) {
            accountChains$2 = /* [] */0;
          } else {
            throw exn$4;
          }
        }
        var newrecord$14 = Caml_array.caml_array_dup(newrecord);
        newrecord$14[/* accountKeyChains */20] = /* :: */[
          /* tuple */[
            keyChain$1[/* accountIdx */0],
            /* :: */[
              /* tuple */[
                keyChain$1[/* keyChainIdx */1],
                keyChain$1
              ],
              accountChains$2
            ]
          ],
          /* [] */0
        ];
        return newrecord$14;
    default:
      return newrecord;
  }
}

function resultToString(param) {
  if (typeof param === "number") {
    switch (param) {
      case 0 : 
          return "Ok";
      case 1 : 
          return "Ignore";
      case 2 : 
          return "InvalidIssuer";
      case 3 : 
          return "UnknownProcessId";
      case 4 : 
          return "AlreadyEndorsed";
      case 5 : 
          return "PolicyMissmatch";
      case 6 : 
          return "PolicyNotFulfilled";
      case 7 : 
          return "DependencyNotMet";
      
    }
  } else {
    return "BadData('" + (param[0] + "')");
  }
}

function defaultDataValidator(_, _$1) {
  return /* Ok */0;
}

function validateProposal($staropt$star, processName, dataList, param, state, issuerPubKey) {
  var completedProcesses = state[/* completedProcesses */16];
  var processes = state[/* processes */15];
  var data = param[/* data */5];
  var supporterId = param[/* supporterId */3];
  var validateData = $staropt$star ? $staropt$star[0] : defaultDataValidator;
  if (List.exists((function (param) {
            var match = param[1];
            if (PrimitiveTypes.UserId[/* eq */5](match[0], supporterId)) {
              return Caml_obj.caml_equal(match[1], data);
            } else {
              return false;
            }
          }), dataList)) {
    return /* BadData */["This proposal already exists"];
  } else if (Policy.neq(param[/* policy */4], List.assoc(processName, state[/* policies */17]))) {
    return /* PolicyMissmatch */5;
  } else if (PrimitiveTypes.UserId[/* neq */6](List.assoc(issuerPubKey, state[/* currentPartnerPubKeys */4]), supporterId)) {
    return /* InvalidIssuer */2;
  } else {
    var proposalsThere = List.fold_left((function (res, processId) {
            if (List.mem(processId, completedProcesses) || List.mem_assoc(processId, processes)) {
              return res;
            } else {
              return false;
            }
          }), true, param[/* dependsOnProposals */1]);
    var completionsThere = List.fold_left((function (res, processId) {
            if (List.mem(processId, completedProcesses)) {
              return res;
            } else {
              return false;
            }
          }), true, param[/* dependsOnCompletions */2]);
    if (proposalsThere && completionsThere) {
      return Curry._2(validateData, data, state);
    } else {
      return /* DependencyNotMet */7;
    }
  }
}

function validateRejection(param, param$1, issuerPubKey) {
  var rejectorId = param[/* rejectorId */1];
  try {
    var match = List.assoc(param[/* processId */0], param$1[/* processes */15]);
    if (PrimitiveTypes.UserId[/* neq */6](List.assoc(issuerPubKey, param$1[/* currentPartnerPubKeys */4]), rejectorId)) {
      return /* InvalidIssuer */2;
    } else if (List.mem(rejectorId, match[/* supporterIds */0])) {
      return /* AlreadyEndorsed */4;
    } else {
      return /* Ok */0;
    }
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return /* UnknownProcessId */3;
    } else {
      throw exn;
    }
  }
}

function validateEndorsement(param, param$1, issuerPubKey) {
  var supporterId = param[/* supporterId */1];
  try {
    var match = List.assoc(param[/* processId */0], param$1[/* processes */15]);
    if (PrimitiveTypes.UserId[/* neq */6](List.assoc(issuerPubKey, param$1[/* currentPartnerPubKeys */4]), supporterId)) {
      return /* InvalidIssuer */2;
    } else if (List.mem(supporterId, match[/* supporterIds */0])) {
      return /* Ignore */1;
    } else {
      return /* Ok */0;
    }
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return /* UnknownProcessId */3;
    } else {
      throw exn;
    }
  }
}

function validateAcceptance(param, dataList, eq, param$1, _) {
  var completedProcesses = param$1[/* completedProcesses */16];
  var processId = param[/* processId */0];
  try {
    var match = List.assoc(processId, param$1[/* processes */15]);
    if (Curry._2(eq, param[/* data */2], List.assoc(processId, dataList)[1]) === false) {
      return /* BadData */["Data doesn't match proposal"];
    } else if (Policy.fulfilled(match[/* policy */1])(param$1[/* currentPartners */3], match[/* supporterIds */0]) === false) {
      return /* PolicyNotFulfilled */6;
    } else {
      var match$1 = List.fold_left((function (res, processId) {
              if (List.mem(processId, completedProcesses)) {
                return res;
              } else {
                return false;
              }
            }), true, param[/* dependsOnCompletions */1]);
      if (match$1) {
        return /* Ok */0;
      } else {
        return /* DependencyNotMet */7;
      }
    }
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return /* UnknownProcessId */3;
    } else {
      throw exn;
    }
  }
}

function validatePartnerData(param, param$1) {
  var id = param[/* id */1];
  if (List.mem(id, param$1[/* currentPartners */3])) {
    return /* BadData */["Partner already exists"];
  } else {
    var partnerRemovalProcess;
    try {
      partnerRemovalProcess = /* Some */[List.assoc(id, param$1[/* partnerRemovals */8])];
    }
    catch (exn){
      if (exn === Caml_builtin_exceptions.not_found) {
        partnerRemovalProcess = /* None */0;
      } else {
        throw exn;
      }
    }
    if (Caml_obj.caml_notequal(partnerRemovalProcess, param[/* lastPartnerRemovalProcess */0])) {
      return /* BadData */["Last removal doesn't match"];
    } else {
      return /* Ok */0;
    }
  }
}

function validatePartnerRemovalData(param, param$1) {
  var id = param[/* id */0];
  if (List.mem(id, param$1[/* currentPartners */3]) === false) {
    return /* BadData */["Partner with Id '" + (PrimitiveTypes.UserId[/* toString */0](id) + "' doesn't exist")];
  } else {
    try {
      var partnerProcess = List.assoc(id, param$1[/* partnerAccepted */6]);
      if (PrimitiveTypes.ProcessId[/* eq */5](partnerProcess, param[/* lastPartnerProcess */1])) {
        return /* Ok */0;
      } else {
        return /* BadData */["lastPartnerProcess doesn't match"];
      }
    }
    catch (exn){
      if (exn === Caml_builtin_exceptions.not_found) {
        return /* BadData */["lastPartnerProcess doesn't match"];
      } else {
        throw exn;
      }
    }
  }
}

function validateCustodianData(param, param$1) {
  var accountIdx = param[/* accountIdx */3];
  var partnerId = param[/* partnerId */0];
  if (List.exists((function (param) {
            return WalletTypes.AccountIndex[/* eq */7](param[1][1][/* accountIdx */0], accountIdx);
          }), param$1[/* accountCreationData */13]) === false) {
    return /* BadData */["account doesn't exist"];
  } else {
    try {
      var pData = List.assoc(param[/* partnerApprovalProcess */1], param$1[/* partnerData */5])[1];
      if (PrimitiveTypes.UserId[/* neq */6](pData[/* id */1], partnerId)) {
        return /* BadData */["Partner approval process doesn't match user id"];
      } else {
        var custodianRemovalProcess;
        try {
          custodianRemovalProcess = /* Some */[List.assoc(partnerId, param$1[/* custodianRemovals */11])];
        }
        catch (exn){
          if (exn === Caml_builtin_exceptions.not_found) {
            custodianRemovalProcess = /* None */0;
          } else {
            throw exn;
          }
        }
        if (Caml_obj.caml_notequal(custodianRemovalProcess, param[/* lastCustodianRemovalProcess */2])) {
          return /* BadData */["Last removal doesn't match"];
        } else {
          return /* Ok */0;
        }
      }
    }
    catch (exn$1){
      if (exn$1 === Caml_builtin_exceptions.not_found) {
        return /* BadData */["partner approval process doesn't exist"];
      } else {
        throw exn$1;
      }
    }
  }
}

function validateCustodianRemovalData(param, param$1) {
  var accountIdx = param[/* accountIdx */1];
  var custodianId = param[/* custodianId */0];
  try {
    var match = List.exists((function (param) {
            var data = param[1][1];
            if (PrimitiveTypes.UserId[/* eq */5](data[/* partnerId */0], custodianId)) {
              return WalletTypes.AccountIndex[/* eq */7](accountIdx, data[/* accountIdx */3]);
            } else {
              return false;
            }
          }), param$1[/* custodianData */9]);
    if (match) {
      return /* Ok */0;
    } else {
      throw Caml_builtin_exceptions.not_found;
    }
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return /* BadData */["Partner with Id '" + (PrimitiveTypes.UserId[/* toString */0](custodianId) + ("' is not a custodian of account with index " + String(WalletTypes.AccountIndex[/* toInt */0](accountIdx))))];
    } else {
      throw exn;
    }
  }
}

function validateAccountCreationData(param, param$1) {
  var match = WalletTypes.AccountIndex[/* toInt */0](param[/* accountIdx */0]) === List.length(param$1[/* accountCreationData */13]);
  if (match) {
    return /* Ok */0;
  } else {
    return /* BadData */["Bad Account Index"];
  }
}

function validateCustodianKeyChainUpdated(param, param$1, issuerPubKey) {
  var completedProcesses = param$1[/* completedProcesses */16];
  var custodianData = param$1[/* custodianData */9];
  var keyChain = param[/* keyChain */2];
  var custodianId = param[/* custodianId */1];
  var custodianApprovalProcess = param[/* custodianApprovalProcess */0];
  var tmp;
  try {
    tmp = List.assoc(issuerPubKey, param$1[/* currentPartnerPubKeys */4]);
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      tmp = PrimitiveTypes.UserId[/* fromString */1]("impossible");
    } else {
      throw exn;
    }
  }
  if (PrimitiveTypes.UserId[/* neq */6](tmp, custodianId)) {
    return /* InvalidIssuer */2;
  } else {
    var accountIdx = CustodianKeyChain.accountIdx(keyChain);
    var pId;
    try {
      pId = List.find((function (param) {
                return WalletTypes.AccountIndex[/* eq */7](param[1][1][/* accountIdx */0], accountIdx);
              }), param$1[/* accountCreationData */13])[0];
    }
    catch (exn$1){
      if (exn$1 === Caml_builtin_exceptions.not_found) {
        pId = PrimitiveTypes.ProcessId[/* fromString */1]("impossible");
      } else {
        throw exn$1;
      }
    }
    if (List.mem(pId, completedProcesses) === false) {
      return /* BadData */["Account doesn't exist"];
    } else if (List.mem_assoc(custodianApprovalProcess, custodianData) === false || List.mem(custodianApprovalProcess, completedProcesses) === false) {
      return /* BadData */["Bad custodianApprovalProcess"];
    } else {
      var match = List.assoc(custodianApprovalProcess, custodianData);
      if (PrimitiveTypes.UserId[/* neq */6](match[1][/* partnerId */0], custodianId)) {
        return /* BadData */["CustodianApprovalProcess is for another partner"];
      } else if (WalletTypes.CustodianKeyChainIndex[/* neq */7](CustodianKeyChain.keyChainIdx(keyChain), WalletTypes.CustodianKeyChainIndex[/* fromInt */1](List.length(List.assoc(accountIdx, List.assoc(custodianId, param$1[/* custodianKeyChains */19])))))) {
        return /* BadData */["CustodianKeyChainIndex isn't in order"];
      } else {
        return /* Ok */0;
      }
    }
  }
}

function validateAccountKeyChainUpdated(param, param$1, _) {
  var currentCustodianKeyChains = param$1[/* custodianKeyChains */19];
  var match = param[/* keyChain */0];
  var custodianKeyChains = match[/* custodianKeyChains */3];
  var accountIdx = match[/* accountIdx */0];
  try {
    var match$1 = List.find((function (param) {
            return WalletTypes.AccountIndex[/* eq */7](param[1][1][/* accountIdx */0], accountIdx);
          }), param$1[/* accountCreationData */13]);
    if (List.mem(match$1[0], param$1[/* completedProcesses */16])) {
      if (List.length(List.assoc(accountIdx, param$1[/* accountKeyChains */20])) !== WalletTypes.AccountKeyChainIndex[/* toInt */0](match[/* keyChainIdx */1])) {
        return /* BadData */["Bad AccountKeyChainIndex"];
      } else {
        var currentCustodians = List.assoc(accountIdx, param$1[/* currentCustodians */12]);
        var allThere = List.fold_left((function (res, custodian) {
                if (res) {
                  return List.mem_assoc(custodian, custodianKeyChains);
                } else {
                  return false;
                }
              }), true, currentCustodians);
        if (allThere === false || List.length(currentCustodians) !== List.length(custodianKeyChains)) {
          return /* BadData */["Wrong custodians"];
        } else {
          var match$2 = List.fold_left((function (result, test) {
                  if (result) {
                    return test;
                  } else {
                    return false;
                  }
                }), true, List.map((function (param) {
                      try {
                        var latestKeyChain = List.hd(List.assoc(accountIdx, List.assoc(param[0], currentCustodianKeyChains)));
                        return CustodianKeyChain.eq(param[1], latestKeyChain);
                      }
                      catch (exn){
                        if (exn === Caml_builtin_exceptions.not_found) {
                          return false;
                        } else {
                          throw exn;
                        }
                      }
                    }), custodianKeyChains));
          if (match$2) {
            return /* Ok */0;
          } else {
            return /* BadData */["Bad CustodianKeyChain"];
          }
        }
      }
    } else {
      return /* BadData */["Account doesn't exist"];
    }
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return /* BadData */["Account doesn't exist"];
    } else {
      throw exn;
    }
  }
}

function validateIncomeAddressExposed(param, param$1, _) {
  try {
    var generatedAddress = Address.find(param[/* coordinates */0], param$1[/* accountKeyChains */20]);
    if (param[/* address */1] === generatedAddress[/* address */5]) {
      return /* Ok */0;
    } else {
      return /* BadData */["Unknown Address"];
    }
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return /* BadData */["Unknown Address"];
    } else {
      throw exn;
    }
  }
}

function validateEvent(param) {
  switch (param.tag | 0) {
    case 0 : 
        return (function (_, _$1) {
            return /* Ok */0;
          });
    case 1 : 
        var proposal = param[0];
        return (function (state) {
            var partial_arg = state[/* partnerData */5];
            var partial_arg$1 = Event.Partner[/* processName */1];
            var partial_arg$2 = /* Some */[validatePartnerData];
            return (function (param) {
                return validateProposal(partial_arg$2, partial_arg$1, partial_arg, proposal, state, param);
              });
          });
    case 2 : 
        var partial_arg = param[0];
        return (function (param, param$1) {
            return validateRejection(partial_arg, param, param$1);
          });
    case 4 : 
        var acceptance = param[0];
        return (function (state) {
            var partial_arg = Event.Partner[/* dataEq */2];
            var partial_arg$1 = state[/* partnerData */5];
            return (function (param) {
                return validateAcceptance(acceptance, partial_arg$1, partial_arg, state, param);
              });
          });
    case 5 : 
        var proposal$1 = param[0];
        return (function (state) {
            var partial_arg = state[/* partnerRemovalData */7];
            var partial_arg$1 = Event.Partner[/* Removal */7][/* processName */1];
            var partial_arg$2 = /* Some */[validatePartnerRemovalData];
            return (function (param) {
                return validateProposal(partial_arg$2, partial_arg$1, partial_arg, proposal$1, state, param);
              });
          });
    case 6 : 
        var partial_arg$1 = param[0];
        return (function (param, param$1) {
            return validateRejection(partial_arg$1, param, param$1);
          });
    case 8 : 
        var acceptance$1 = param[0];
        return (function (state) {
            var partial_arg = Event.Partner[/* Removal */7][/* dataEq */2];
            var partial_arg$1 = state[/* partnerRemovalData */7];
            return (function (param) {
                return validateAcceptance(acceptance$1, partial_arg$1, partial_arg, state, param);
              });
          });
    case 9 : 
        var proposal$2 = param[0];
        return (function (state) {
            var partial_arg = state[/* accountCreationData */13];
            var partial_arg$1 = Event.AccountCreation[/* processName */1];
            var partial_arg$2 = /* Some */[validateAccountCreationData];
            return (function (param) {
                return validateProposal(partial_arg$2, partial_arg$1, partial_arg, proposal$2, state, param);
              });
          });
    case 10 : 
        var partial_arg$2 = param[0];
        return (function (param, param$1) {
            return validateRejection(partial_arg$2, param, param$1);
          });
    case 12 : 
        var acceptance$2 = param[0];
        return (function (state) {
            var partial_arg = Event.AccountCreation[/* dataEq */2];
            var partial_arg$1 = state[/* accountCreationData */13];
            return (function (param) {
                return validateAcceptance(acceptance$2, partial_arg$1, partial_arg, state, param);
              });
          });
    case 13 : 
        var proposal$3 = param[0];
        return (function (state) {
            var partial_arg = state[/* custodianData */9];
            var partial_arg$1 = Event.Custodian[/* processName */1];
            var partial_arg$2 = /* Some */[validateCustodianData];
            return (function (param) {
                return validateProposal(partial_arg$2, partial_arg$1, partial_arg, proposal$3, state, param);
              });
          });
    case 14 : 
        var partial_arg$3 = param[0];
        return (function (param, param$1) {
            return validateRejection(partial_arg$3, param, param$1);
          });
    case 16 : 
        var acceptance$3 = param[0];
        return (function (state) {
            var partial_arg = Event.Custodian[/* dataEq */2];
            var partial_arg$1 = state[/* custodianData */9];
            return (function (param) {
                return validateAcceptance(acceptance$3, partial_arg$1, partial_arg, state, param);
              });
          });
    case 17 : 
        var proposal$4 = param[0];
        return (function (state) {
            var partial_arg = state[/* custodianRemovalData */10];
            var partial_arg$1 = Event.Custodian[/* Removal */7][/* processName */1];
            var partial_arg$2 = /* Some */[validateCustodianRemovalData];
            return (function (param) {
                return validateProposal(partial_arg$2, partial_arg$1, partial_arg, proposal$4, state, param);
              });
          });
    case 18 : 
        var partial_arg$4 = param[0];
        return (function (param, param$1) {
            return validateRejection(partial_arg$4, param, param$1);
          });
    case 20 : 
        var acceptance$4 = param[0];
        return (function (state) {
            var partial_arg = Event.Custodian[/* Removal */7][/* dataEq */2];
            var partial_arg$1 = state[/* custodianRemovalData */10];
            return (function (param) {
                return validateAcceptance(acceptance$4, partial_arg$1, partial_arg, state, param);
              });
          });
    case 21 : 
        var proposal$5 = param[0];
        return (function (state) {
            var partial_arg = state[/* payoutData */14];
            var partial_arg$1 = Event.Payout[/* processName */1];
            return (function (param) {
                return validateProposal(/* None */0, partial_arg$1, partial_arg, proposal$5, state, param);
              });
          });
    case 22 : 
        var partial_arg$5 = param[0];
        return (function (param, param$1) {
            return validateRejection(partial_arg$5, param, param$1);
          });
    case 24 : 
        var acceptance$5 = param[0];
        return (function (state) {
            var partial_arg = Event.Payout[/* dataEq */2];
            var partial_arg$1 = state[/* payoutData */14];
            return (function (param) {
                return validateAcceptance(acceptance$5, partial_arg$1, partial_arg, state, param);
              });
          });
    case 25 : 
        return (function (_, _$1) {
            return /* Ok */0;
          });
    case 26 : 
        return (function (_, _$1) {
            return /* Ok */0;
          });
    case 27 : 
        return (function (_, _$1) {
            return /* Ignore */1;
          });
    case 28 : 
        return (function (_, _$1) {
            return /* Ok */0;
          });
    case 29 : 
        var partial_arg$6 = param[0];
        return (function (param, param$1) {
            return validateCustodianKeyChainUpdated(partial_arg$6, param, param$1);
          });
    case 30 : 
        var partial_arg$7 = param[0];
        return (function (param, param$1) {
            return validateAccountKeyChainUpdated(partial_arg$7, param, param$1);
          });
    case 31 : 
        var partial_arg$8 = param[0];
        return (function (param, param$1) {
            return validateIncomeAddressExposed(partial_arg$8, param, param$1);
          });
    case 32 : 
        return (function (_, _$1) {
            return /* Ok */0;
          });
    default:
      var partial_arg$9 = param[0];
      return (function (param, param$1) {
          return validateEndorsement(partial_arg$9, param, param$1);
        });
  }
}

function validate(state, param) {
  var issuerPubKey = param[/* issuerPubKey */2];
  var $$event = param[/* event */0];
  if (List.mem(param[/* hash */1], state[/* knownItems */2])) {
    return /* Ignore */1;
  } else {
    var match = Event.isSystemEvent($$event);
    var match$1 = List.mem_assoc(issuerPubKey, state[/* currentPartnerPubKeys */4]);
    var exit = 0;
    switch ($$event.tag | 0) {
      case 0 : 
          var match$2 = PrimitiveTypes.UserId[/* eq */5](state[/* creatorData */18][/* id */1], PrimitiveTypes.UserId[/* fromString */1](""));
          if (match$2) {
            return /* Ok */0;
          } else {
            return /* BadData */["Venture is already created"];
          }
      case 1 : 
          if (match) {
            exit = 1;
          } else if (match$1) {
            return Curry._2(validateEvent($$event), state, issuerPubKey);
          } else if (Caml_obj.caml_equal($$event[0][/* data */5], state[/* creatorData */18]) && issuerPubKey === state[/* creatorData */18][/* pubKey */2] && List.length(state[/* partnerData */5]) === 0) {
            return /* Ok */0;
          } else {
            exit = 1;
          }
          break;
      default:
        exit = 1;
    }
    if (exit === 1) {
      if (match) {
        if (issuerPubKey !== state[/* systemPubKey */0]) {
          return /* InvalidIssuer */2;
        } else if ($$event.tag === 4 && !(match$1 || !(Caml_obj.caml_equal($$event[0][/* data */2], state[/* creatorData */18]) && List.length(state[/* partnerData */5]) === 1))) {
          return /* Ok */0;
        } else {
          return Curry._2(validateEvent($$event), state, issuerPubKey);
        }
      } else if (match$1) {
        return Curry._2(validateEvent($$event), state, issuerPubKey);
      } else {
        return /* InvalidIssuer */2;
      }
    }
    
  }
}

exports.make = make;
exports.addProcess = addProcess;
exports.endorseProcess = endorseProcess;
exports.completeProcess = completeProcess;
exports.apply = apply;
exports.resultToString = resultToString;
exports.defaultDataValidator = defaultDataValidator;
exports.validateProposal = validateProposal;
exports.validateRejection = validateRejection;
exports.validateEndorsement = validateEndorsement;
exports.validateAcceptance = validateAcceptance;
exports.validatePartnerData = validatePartnerData;
exports.validatePartnerRemovalData = validatePartnerRemovalData;
exports.validateCustodianData = validateCustodianData;
exports.validateCustodianRemovalData = validateCustodianRemovalData;
exports.validateAccountCreationData = validateAccountCreationData;
exports.validateCustodianKeyChainUpdated = validateCustodianKeyChainUpdated;
exports.validateAccountKeyChainUpdated = validateAccountKeyChainUpdated;
exports.validateIncomeAddressExposed = validateIncomeAddressExposed;
exports.validateEvent = validateEvent;
exports.validate = validate;
/* Event Not a pure module */
