// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Event = require("./events/Event.bs.js");
var Utils = require("../utils/Utils.bs.js");
var Policy = require("./Policy.bs.js");
var Address = require("./wallet/Address.bs.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var WalletTypes = require("./wallet/WalletTypes.bs.js");
var PrimitiveTypes = require("./PrimitiveTypes.bs.js");
var CustodianKeyChain = require("./wallet/CustodianKeyChain.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function make() {
  return /* record */[
          /* systemPubKey */"",
          /* metaPolicy */Policy.unanimous,
          /* knownItems : [] */0,
          /* currentPartners : [] */0,
          /* currentPartnerPubKeys : [] */0,
          /* partnerData : [] */0,
          /* partnerRemovalData : [] */0,
          /* partnerRemovals : [] */0,
          /* custodianData : [] */0,
          /* custodianRemovalData : [] */0,
          /* accountCreationData : [] */0,
          /* payoutData : [] */0,
          /* processes : [] */0,
          /* completedProcesses : [] */0,
          /* policies : [] */0,
          /* creatorData : record */[
            /* lastRemoval : None */0,
            /* id */PrimitiveTypes.UserId[/* fromString */1](""),
            /* pubKey */""
          ],
          /* custodianKeyChains : [] */0,
          /* accountKeyChains : [] */0
        ];
}

function addProcess(param, state) {
  return /* record */[
          /* systemPubKey */state[/* systemPubKey */0],
          /* metaPolicy */state[/* metaPolicy */1],
          /* knownItems */state[/* knownItems */2],
          /* currentPartners */state[/* currentPartners */3],
          /* currentPartnerPubKeys */state[/* currentPartnerPubKeys */4],
          /* partnerData */state[/* partnerData */5],
          /* partnerRemovalData */state[/* partnerRemovalData */6],
          /* partnerRemovals */state[/* partnerRemovals */7],
          /* custodianData */state[/* custodianData */8],
          /* custodianRemovalData */state[/* custodianRemovalData */9],
          /* accountCreationData */state[/* accountCreationData */10],
          /* payoutData */state[/* payoutData */11],
          /* processes : :: */[
            /* tuple */[
              param[/* processId */0],
              /* record */[
                /* supporterIds : :: */[
                  param[/* supporterId */3],
                  /* [] */0
                ],
                /* policy */param[/* policy */4]
              ]
            ],
            state[/* processes */12]
          ],
          /* completedProcesses */state[/* completedProcesses */13],
          /* policies */state[/* policies */14],
          /* creatorData */state[/* creatorData */15],
          /* custodianKeyChains */state[/* custodianKeyChains */16],
          /* accountKeyChains */state[/* accountKeyChains */17]
        ];
}

function completeProcess(param, state) {
  return /* record */[
          /* systemPubKey */state[/* systemPubKey */0],
          /* metaPolicy */state[/* metaPolicy */1],
          /* knownItems */state[/* knownItems */2],
          /* currentPartners */state[/* currentPartners */3],
          /* currentPartnerPubKeys */state[/* currentPartnerPubKeys */4],
          /* partnerData */state[/* partnerData */5],
          /* partnerRemovalData */state[/* partnerRemovalData */6],
          /* partnerRemovals */state[/* partnerRemovals */7],
          /* custodianData */state[/* custodianData */8],
          /* custodianRemovalData */state[/* custodianRemovalData */9],
          /* accountCreationData */state[/* accountCreationData */10],
          /* payoutData */state[/* payoutData */11],
          /* processes */state[/* processes */12],
          /* completedProcesses : :: */[
            param[/* processId */0],
            state[/* completedProcesses */13]
          ],
          /* policies */state[/* policies */14],
          /* creatorData */state[/* creatorData */15],
          /* custodianKeyChains */state[/* custodianKeyChains */16],
          /* accountKeyChains */state[/* accountKeyChains */17]
        ];
}

function apply(param, state) {
  var $$event = param[/* event */0];
  var state_000 = /* systemPubKey */state[/* systemPubKey */0];
  var state_001 = /* metaPolicy */state[/* metaPolicy */1];
  var state_002 = /* knownItems : :: */[
    param[/* hash */1],
    state[/* knownItems */2]
  ];
  var state_003 = /* currentPartners */state[/* currentPartners */3];
  var state_004 = /* currentPartnerPubKeys */state[/* currentPartnerPubKeys */4];
  var state_005 = /* partnerData */state[/* partnerData */5];
  var state_006 = /* partnerRemovalData */state[/* partnerRemovalData */6];
  var state_007 = /* partnerRemovals */state[/* partnerRemovals */7];
  var state_008 = /* custodianData */state[/* custodianData */8];
  var state_009 = /* custodianRemovalData */state[/* custodianRemovalData */9];
  var state_010 = /* accountCreationData */state[/* accountCreationData */10];
  var state_011 = /* payoutData */state[/* payoutData */11];
  var state_012 = /* processes */state[/* processes */12];
  var state_013 = /* completedProcesses */state[/* completedProcesses */13];
  var state_014 = /* policies */state[/* policies */14];
  var state_015 = /* creatorData */state[/* creatorData */15];
  var state_016 = /* custodianKeyChains */state[/* custodianKeyChains */16];
  var state_017 = /* accountKeyChains */state[/* accountKeyChains */17];
  var state$1 = /* record */[
    state_000,
    state_001,
    state_002,
    state_003,
    state_004,
    state_005,
    state_006,
    state_007,
    state_008,
    state_009,
    state_010,
    state_011,
    state_012,
    state_013,
    state_014,
    state_015,
    state_016,
    state_017
  ];
  switch ($$event.tag | 0) {
    case 0 : 
        var match = $$event[0];
        var metaPolicy = match[/* metaPolicy */4];
        return /* record */[
                /* systemPubKey */Utils.publicKeyFromKeyPair(match[/* systemIssuer */5]),
                /* metaPolicy */metaPolicy,
                state_002,
                state_003,
                state_004,
                state_005,
                state_006,
                state_007,
                state_008,
                state_009,
                state_010,
                state_011,
                state_012,
                state_013,
                /* policies : :: */[
                  /* tuple */[
                    Event.Partner[/* Removal */7][/* processName */1],
                    /* UnanimousMinusOne */1
                  ],
                  /* :: */[
                    /* tuple */[
                      Event.Custodian[/* Removal */7][/* processName */1],
                      /* UnanimousMinusOne */1
                    ],
                    List.map((function (n) {
                            return /* tuple */[
                                    n,
                                    metaPolicy
                                  ];
                          }), /* :: */[
                          Event.Partner[/* processName */1],
                          /* :: */[
                            Event.AccountCreation[/* processName */1],
                            /* :: */[
                              Event.Custodian[/* processName */1],
                              /* :: */[
                                Event.Payout[/* processName */1],
                                /* [] */0
                              ]
                            ]
                          ]
                        ])
                  ]
                ],
                /* creatorData : record */[
                  /* lastRemoval : None */0,
                  /* id */match[/* creatorId */2],
                  /* pubKey */match[/* creatorPubKey */3]
                ],
                state_016,
                state_017
              ];
    case 1 : 
        var proposal = $$event[0];
        var init = addProcess(proposal, state$1);
        return /* record */[
                /* systemPubKey */init[/* systemPubKey */0],
                /* metaPolicy */init[/* metaPolicy */1],
                /* knownItems */init[/* knownItems */2],
                /* currentPartners */init[/* currentPartners */3],
                /* currentPartnerPubKeys */init[/* currentPartnerPubKeys */4],
                /* partnerData : :: */[
                  /* tuple */[
                    proposal[/* processId */0],
                    /* tuple */[
                      proposal[/* supporterId */3],
                      proposal[/* data */5]
                    ]
                  ],
                  state_005
                ],
                /* partnerRemovalData */init[/* partnerRemovalData */6],
                /* partnerRemovals */init[/* partnerRemovals */7],
                /* custodianData */init[/* custodianData */8],
                /* custodianRemovalData */init[/* custodianRemovalData */9],
                /* accountCreationData */init[/* accountCreationData */10],
                /* payoutData */init[/* payoutData */11],
                /* processes */init[/* processes */12],
                /* completedProcesses */init[/* completedProcesses */13],
                /* policies */init[/* policies */14],
                /* creatorData */init[/* creatorData */15],
                /* custodianKeyChains */init[/* custodianKeyChains */16],
                /* accountKeyChains */init[/* accountKeyChains */17]
              ];
    case 4 : 
        var acceptance = $$event[0];
        var data = acceptance[/* data */2];
        var init$1 = completeProcess(acceptance, state$1);
        return /* record */[
                /* systemPubKey */init$1[/* systemPubKey */0],
                /* metaPolicy */init$1[/* metaPolicy */1],
                /* knownItems */init$1[/* knownItems */2],
                /* currentPartners : :: */[
                  data[/* id */1],
                  state_003
                ],
                /* currentPartnerPubKeys : :: */[
                  /* tuple */[
                    data[/* pubKey */2],
                    data[/* id */1]
                  ],
                  state_004
                ],
                /* partnerData */init$1[/* partnerData */5],
                /* partnerRemovalData */init$1[/* partnerRemovalData */6],
                /* partnerRemovals */init$1[/* partnerRemovals */7],
                /* custodianData */init$1[/* custodianData */8],
                /* custodianRemovalData */init$1[/* custodianRemovalData */9],
                /* accountCreationData */init$1[/* accountCreationData */10],
                /* payoutData */init$1[/* payoutData */11],
                /* processes */init$1[/* processes */12],
                /* completedProcesses */init$1[/* completedProcesses */13],
                /* policies */init$1[/* policies */14],
                /* creatorData */init$1[/* creatorData */15],
                /* custodianKeyChains */init$1[/* custodianKeyChains */16],
                /* accountKeyChains */init$1[/* accountKeyChains */17]
              ];
    case 5 : 
        var proposal$1 = $$event[0];
        var init$2 = addProcess(proposal$1, state$1);
        return /* record */[
                /* systemPubKey */init$2[/* systemPubKey */0],
                /* metaPolicy */init$2[/* metaPolicy */1],
                /* knownItems */init$2[/* knownItems */2],
                /* currentPartners */init$2[/* currentPartners */3],
                /* currentPartnerPubKeys */init$2[/* currentPartnerPubKeys */4],
                /* partnerData */init$2[/* partnerData */5],
                /* partnerRemovalData : :: */[
                  /* tuple */[
                    proposal$1[/* processId */0],
                    /* tuple */[
                      proposal$1[/* supporterId */3],
                      proposal$1[/* data */5]
                    ]
                  ],
                  state_006
                ],
                /* partnerRemovals */init$2[/* partnerRemovals */7],
                /* custodianData */init$2[/* custodianData */8],
                /* custodianRemovalData */init$2[/* custodianRemovalData */9],
                /* accountCreationData */init$2[/* accountCreationData */10],
                /* payoutData */init$2[/* payoutData */11],
                /* processes */init$2[/* processes */12],
                /* completedProcesses */init$2[/* completedProcesses */13],
                /* policies */init$2[/* policies */14],
                /* creatorData */init$2[/* creatorData */15],
                /* custodianKeyChains */init$2[/* custodianKeyChains */16],
                /* accountKeyChains */init$2[/* accountKeyChains */17]
              ];
    case 8 : 
        var acceptance$1 = $$event[0];
        var id = acceptance$1[/* data */2][/* id */0];
        var pubKey = List.find((function (param) {
                  return PrimitiveTypes.UserId[/* eq */5](param[1], id);
                }), state_004)[0];
        var init$3 = completeProcess(acceptance$1, state$1);
        var partial_arg = PrimitiveTypes.UserId[/* neq */6];
        return /* record */[
                /* systemPubKey */init$3[/* systemPubKey */0],
                /* metaPolicy */init$3[/* metaPolicy */1],
                /* knownItems */init$3[/* knownItems */2],
                /* currentPartners */List.filter((function (param) {
                          return partial_arg(id, param);
                        }))(state_003),
                /* currentPartnerPubKeys */List.remove_assoc(pubKey, state_004),
                /* partnerData */init$3[/* partnerData */5],
                /* partnerRemovalData */init$3[/* partnerRemovalData */6],
                /* partnerRemovals : :: */[
                  /* tuple */[
                    id,
                    acceptance$1[/* processId */0]
                  ],
                  state_007
                ],
                /* custodianData */init$3[/* custodianData */8],
                /* custodianRemovalData */init$3[/* custodianRemovalData */9],
                /* accountCreationData */init$3[/* accountCreationData */10],
                /* payoutData */init$3[/* payoutData */11],
                /* processes */init$3[/* processes */12],
                /* completedProcesses */init$3[/* completedProcesses */13],
                /* policies */init$3[/* policies */14],
                /* creatorData */init$3[/* creatorData */15],
                /* custodianKeyChains */init$3[/* custodianKeyChains */16],
                /* accountKeyChains */init$3[/* accountKeyChains */17]
              ];
    case 9 : 
        var proposal$2 = $$event[0];
        var init$4 = addProcess(proposal$2, state$1);
        return /* record */[
                /* systemPubKey */init$4[/* systemPubKey */0],
                /* metaPolicy */init$4[/* metaPolicy */1],
                /* knownItems */init$4[/* knownItems */2],
                /* currentPartners */init$4[/* currentPartners */3],
                /* currentPartnerPubKeys */init$4[/* currentPartnerPubKeys */4],
                /* partnerData */init$4[/* partnerData */5],
                /* partnerRemovalData */init$4[/* partnerRemovalData */6],
                /* partnerRemovals */init$4[/* partnerRemovals */7],
                /* custodianData */init$4[/* custodianData */8],
                /* custodianRemovalData */init$4[/* custodianRemovalData */9],
                /* accountCreationData : :: */[
                  /* tuple */[
                    proposal$2[/* processId */0],
                    /* tuple */[
                      proposal$2[/* supporterId */3],
                      proposal$2[/* data */5]
                    ]
                  ],
                  state_010
                ],
                /* payoutData */init$4[/* payoutData */11],
                /* processes */init$4[/* processes */12],
                /* completedProcesses */init$4[/* completedProcesses */13],
                /* policies */init$4[/* policies */14],
                /* creatorData */init$4[/* creatorData */15],
                /* custodianKeyChains */init$4[/* custodianKeyChains */16],
                /* accountKeyChains */init$4[/* accountKeyChains */17]
              ];
    case 12 : 
        var acceptance$2 = $$event[0];
        var init$5 = completeProcess(acceptance$2, state$1);
        return /* record */[
                /* systemPubKey */init$5[/* systemPubKey */0],
                /* metaPolicy */init$5[/* metaPolicy */1],
                /* knownItems */init$5[/* knownItems */2],
                /* currentPartners */init$5[/* currentPartners */3],
                /* currentPartnerPubKeys */init$5[/* currentPartnerPubKeys */4],
                /* partnerData */init$5[/* partnerData */5],
                /* partnerRemovalData */init$5[/* partnerRemovalData */6],
                /* partnerRemovals */init$5[/* partnerRemovals */7],
                /* custodianData */init$5[/* custodianData */8],
                /* custodianRemovalData */init$5[/* custodianRemovalData */9],
                /* accountCreationData */init$5[/* accountCreationData */10],
                /* payoutData */init$5[/* payoutData */11],
                /* processes */init$5[/* processes */12],
                /* completedProcesses */init$5[/* completedProcesses */13],
                /* policies */init$5[/* policies */14],
                /* creatorData */init$5[/* creatorData */15],
                /* custodianKeyChains */init$5[/* custodianKeyChains */16],
                /* accountKeyChains : :: */[
                  /* tuple */[
                    acceptance$2[/* data */2][/* accountIdx */0],
                    /* [] */0
                  ],
                  state_017
                ]
              ];
    case 13 : 
        var proposal$3 = $$event[0];
        var init$6 = addProcess(proposal$3, state$1);
        return /* record */[
                /* systemPubKey */init$6[/* systemPubKey */0],
                /* metaPolicy */init$6[/* metaPolicy */1],
                /* knownItems */init$6[/* knownItems */2],
                /* currentPartners */init$6[/* currentPartners */3],
                /* currentPartnerPubKeys */init$6[/* currentPartnerPubKeys */4],
                /* partnerData */init$6[/* partnerData */5],
                /* partnerRemovalData */init$6[/* partnerRemovalData */6],
                /* partnerRemovals */init$6[/* partnerRemovals */7],
                /* custodianData : :: */[
                  /* tuple */[
                    proposal$3[/* processId */0],
                    /* tuple */[
                      proposal$3[/* supporterId */3],
                      proposal$3[/* data */5]
                    ]
                  ],
                  state_008
                ],
                /* custodianRemovalData */init$6[/* custodianRemovalData */9],
                /* accountCreationData */init$6[/* accountCreationData */10],
                /* payoutData */init$6[/* payoutData */11],
                /* processes */init$6[/* processes */12],
                /* completedProcesses */init$6[/* completedProcesses */13],
                /* policies */init$6[/* policies */14],
                /* creatorData */init$6[/* creatorData */15],
                /* custodianKeyChains */init$6[/* custodianKeyChains */16],
                /* accountKeyChains */init$6[/* accountKeyChains */17]
              ];
    case 16 : 
        var acceptance$3 = $$event[0];
        var match$1 = acceptance$3[/* data */2];
        var accountIdx = match$1[/* accountIdx */2];
        var partnerId = match$1[/* partnerId */0];
        var userChains;
        try {
          userChains = List.assoc(partnerId, state_016);
        }
        catch (exn){
          if (exn === Caml_builtin_exceptions.not_found) {
            userChains = /* [] */0;
          } else {
            throw exn;
          }
        }
        var accountChains;
        try {
          accountChains = List.assoc(accountIdx, userChains);
        }
        catch (exn$1){
          if (exn$1 === Caml_builtin_exceptions.not_found) {
            accountChains = /* [] */0;
          } else {
            throw exn$1;
          }
        }
        var init$7 = completeProcess(acceptance$3, state$1);
        return /* record */[
                /* systemPubKey */init$7[/* systemPubKey */0],
                /* metaPolicy */init$7[/* metaPolicy */1],
                /* knownItems */init$7[/* knownItems */2],
                /* currentPartners */init$7[/* currentPartners */3],
                /* currentPartnerPubKeys */init$7[/* currentPartnerPubKeys */4],
                /* partnerData */init$7[/* partnerData */5],
                /* partnerRemovalData */init$7[/* partnerRemovalData */6],
                /* partnerRemovals */init$7[/* partnerRemovals */7],
                /* custodianData */init$7[/* custodianData */8],
                /* custodianRemovalData */init$7[/* custodianRemovalData */9],
                /* accountCreationData */init$7[/* accountCreationData */10],
                /* payoutData */init$7[/* payoutData */11],
                /* processes */init$7[/* processes */12],
                /* completedProcesses */init$7[/* completedProcesses */13],
                /* policies */init$7[/* policies */14],
                /* creatorData */init$7[/* creatorData */15],
                /* custodianKeyChains : :: */[
                  /* tuple */[
                    partnerId,
                    /* :: */[
                      /* tuple */[
                        accountIdx,
                        accountChains
                      ],
                      List.remove_assoc(accountIdx, userChains)
                    ]
                  ],
                  List.remove_assoc(partnerId, state_016)
                ],
                /* accountKeyChains */init$7[/* accountKeyChains */17]
              ];
    case 17 : 
        var proposal$4 = $$event[0];
        var init$8 = addProcess(proposal$4, state$1);
        return /* record */[
                /* systemPubKey */init$8[/* systemPubKey */0],
                /* metaPolicy */init$8[/* metaPolicy */1],
                /* knownItems */init$8[/* knownItems */2],
                /* currentPartners */init$8[/* currentPartners */3],
                /* currentPartnerPubKeys */init$8[/* currentPartnerPubKeys */4],
                /* partnerData */init$8[/* partnerData */5],
                /* partnerRemovalData */init$8[/* partnerRemovalData */6],
                /* partnerRemovals */init$8[/* partnerRemovals */7],
                /* custodianData */init$8[/* custodianData */8],
                /* custodianRemovalData : :: */[
                  /* tuple */[
                    proposal$4[/* processId */0],
                    /* tuple */[
                      proposal$4[/* supporterId */3],
                      proposal$4[/* data */5]
                    ]
                  ],
                  state_009
                ],
                /* accountCreationData */init$8[/* accountCreationData */10],
                /* payoutData */init$8[/* payoutData */11],
                /* processes */init$8[/* processes */12],
                /* completedProcesses */init$8[/* completedProcesses */13],
                /* policies */init$8[/* policies */14],
                /* creatorData */init$8[/* creatorData */15],
                /* custodianKeyChains */init$8[/* custodianKeyChains */16],
                /* accountKeyChains */init$8[/* accountKeyChains */17]
              ];
    case 21 : 
        var proposal$5 = $$event[0];
        var init$9 = addProcess(proposal$5, state$1);
        return /* record */[
                /* systemPubKey */init$9[/* systemPubKey */0],
                /* metaPolicy */init$9[/* metaPolicy */1],
                /* knownItems */init$9[/* knownItems */2],
                /* currentPartners */init$9[/* currentPartners */3],
                /* currentPartnerPubKeys */init$9[/* currentPartnerPubKeys */4],
                /* partnerData */init$9[/* partnerData */5],
                /* partnerRemovalData */init$9[/* partnerRemovalData */6],
                /* partnerRemovals */init$9[/* partnerRemovals */7],
                /* custodianData */init$9[/* custodianData */8],
                /* custodianRemovalData */init$9[/* custodianRemovalData */9],
                /* accountCreationData */init$9[/* accountCreationData */10],
                /* payoutData : :: */[
                  /* tuple */[
                    proposal$5[/* processId */0],
                    /* tuple */[
                      proposal$5[/* supporterId */3],
                      proposal$5[/* data */5]
                    ]
                  ],
                  state_011
                ],
                /* processes */init$9[/* processes */12],
                /* completedProcesses */init$9[/* completedProcesses */13],
                /* policies */init$9[/* policies */14],
                /* creatorData */init$9[/* creatorData */15],
                /* custodianKeyChains */init$9[/* custodianKeyChains */16],
                /* accountKeyChains */init$9[/* accountKeyChains */17]
              ];
    case 2 : 
    case 6 : 
    case 10 : 
    case 14 : 
    case 18 : 
    case 22 : 
        return state$1;
    case 3 : 
    case 7 : 
    case 11 : 
    case 15 : 
    case 19 : 
    case 23 : 
        var param$1 = $$event[0];
        var state$2 = state$1;
        var supporterId = param$1[/* supporterId */1];
        var processId = param$1[/* processId */0];
        return /* record */[
                /* systemPubKey */state$2[/* systemPubKey */0],
                /* metaPolicy */state$2[/* metaPolicy */1],
                /* knownItems */state$2[/* knownItems */2],
                /* currentPartners */state$2[/* currentPartners */3],
                /* currentPartnerPubKeys */state$2[/* currentPartnerPubKeys */4],
                /* partnerData */state$2[/* partnerData */5],
                /* partnerRemovalData */state$2[/* partnerRemovalData */6],
                /* partnerRemovals */state$2[/* partnerRemovals */7],
                /* custodianData */state$2[/* custodianData */8],
                /* custodianRemovalData */state$2[/* custodianRemovalData */9],
                /* accountCreationData */state$2[/* accountCreationData */10],
                /* payoutData */state$2[/* payoutData */11],
                /* processes */List.map((function (param) {
                        var $$process = param[1];
                        var pId = param[0];
                        var match = PrimitiveTypes.ProcessId[/* eq */5](pId, processId);
                        if (match) {
                          return /* tuple */[
                                  pId,
                                  /* record */[
                                    /* supporterIds : :: */[
                                      supporterId,
                                      $$process[/* supporterIds */0]
                                    ],
                                    /* policy */$$process[/* policy */1]
                                  ]
                                ];
                        } else {
                          return /* tuple */[
                                  pId,
                                  $$process
                                ];
                        }
                      }), state$2[/* processes */12]),
                /* completedProcesses */state$2[/* completedProcesses */13],
                /* policies */state$2[/* policies */14],
                /* creatorData */state$2[/* creatorData */15],
                /* custodianKeyChains */state$2[/* custodianKeyChains */16],
                /* accountKeyChains */state$2[/* accountKeyChains */17]
              ];
    case 20 : 
    case 24 : 
        return completeProcess($$event[0], state$1);
    case 29 : 
        var match$2 = $$event[0];
        var keyChain = match$2[/* keyChain */2];
        var partnerId$1 = match$2[/* partnerId */1];
        var userChains$1;
        try {
          userChains$1 = List.assoc(partnerId$1, state_016);
        }
        catch (exn$2){
          if (exn$2 === Caml_builtin_exceptions.not_found) {
            userChains$1 = /* [] */0;
          } else {
            throw exn$2;
          }
        }
        var accountChains$1;
        try {
          accountChains$1 = List.assoc(CustodianKeyChain.accountIdx(keyChain), userChains$1);
        }
        catch (exn$3){
          if (exn$3 === Caml_builtin_exceptions.not_found) {
            accountChains$1 = /* [] */0;
          } else {
            throw exn$3;
          }
        }
        return /* record */[
                state_000,
                state_001,
                state_002,
                state_003,
                state_004,
                state_005,
                state_006,
                state_007,
                state_008,
                state_009,
                state_010,
                state_011,
                state_012,
                state_013,
                state_014,
                state_015,
                /* custodianKeyChains : :: */[
                  /* tuple */[
                    partnerId$1,
                    /* :: */[
                      /* tuple */[
                        CustodianKeyChain.accountIdx(keyChain),
                        /* :: */[
                          keyChain,
                          accountChains$1
                        ]
                      ],
                      /* [] */0
                    ]
                  ],
                  List.remove_assoc(partnerId$1, state_016)
                ],
                state_017
              ];
    case 30 : 
        var keyChain$1 = $$event[0][/* keyChain */0];
        var accountChains$2;
        try {
          accountChains$2 = List.assoc(keyChain$1[/* accountIdx */0], state_017);
        }
        catch (exn$4){
          if (exn$4 === Caml_builtin_exceptions.not_found) {
            accountChains$2 = /* [] */0;
          } else {
            throw exn$4;
          }
        }
        return /* record */[
                state_000,
                state_001,
                state_002,
                state_003,
                state_004,
                state_005,
                state_006,
                state_007,
                state_008,
                state_009,
                state_010,
                state_011,
                state_012,
                state_013,
                state_014,
                state_015,
                state_016,
                /* accountKeyChains : :: */[
                  /* tuple */[
                    keyChain$1[/* accountIdx */0],
                    /* :: */[
                      /* tuple */[
                        keyChain$1[/* keyChainIdx */1],
                        keyChain$1
                      ],
                      accountChains$2
                    ]
                  ],
                  /* [] */0
                ]
              ];
    default:
      return state$1;
  }
}

function resultToString(param) {
  if (typeof param === "number") {
    switch (param) {
      case 0 : 
          return "Ok";
      case 1 : 
          return "Ignore";
      case 2 : 
          return "InvalidIssuer";
      case 3 : 
          return "UnknownProcessId";
      case 4 : 
          return "AlreadyEndorsed";
      case 5 : 
          return "PolicyMissmatch";
      case 6 : 
          return "PolicyNotFulfilled";
      case 7 : 
          return "DependencyNotMet";
      
    }
  } else {
    return "BadData('" + (param[0] + "')");
  }
}

function defaultDataValidator(_, _$1) {
  return /* Ok */0;
}

function validateProposal($staropt$star, processName, dataList, param, state, issuerPubKey) {
  var completedProcesses = state[/* completedProcesses */13];
  var processes = state[/* processes */12];
  var data = param[/* data */5];
  var supporterId = param[/* supporterId */3];
  var validateData = $staropt$star ? $staropt$star[0] : defaultDataValidator;
  if (List.exists((function (param) {
            var match = param[1];
            if (PrimitiveTypes.UserId[/* eq */5](match[0], supporterId)) {
              return Caml_obj.caml_equal(match[1], data);
            } else {
              return false;
            }
          }), dataList)) {
    return /* BadData */["This proposal already exists"];
  } else if (Policy.neq(param[/* policy */4], List.assoc(processName, state[/* policies */14]))) {
    return /* PolicyMissmatch */5;
  } else if (PrimitiveTypes.UserId[/* neq */6](List.assoc(issuerPubKey, state[/* currentPartnerPubKeys */4]), supporterId)) {
    return /* InvalidIssuer */2;
  } else {
    var proposalsThere = List.fold_left((function (res, processId) {
            if (List.mem(processId, completedProcesses) || List.mem_assoc(processId, processes)) {
              return res;
            } else {
              return false;
            }
          }), true, param[/* dependsOnProposals */1]);
    var completionsThere = List.fold_left((function (res, processId) {
            if (List.mem(processId, completedProcesses)) {
              return res;
            } else {
              return false;
            }
          }), true, param[/* dependsOnCompletions */2]);
    if (proposalsThere && completionsThere) {
      return Curry._2(validateData, data, state);
    } else {
      return /* DependencyNotMet */7;
    }
  }
}

function validateRejection(param, param$1, issuerPubKey) {
  var rejectorId = param[/* rejectorId */1];
  try {
    var match = List.assoc(param[/* processId */0], param$1[/* processes */12]);
    if (PrimitiveTypes.UserId[/* neq */6](List.assoc(issuerPubKey, param$1[/* currentPartnerPubKeys */4]), rejectorId)) {
      return /* InvalidIssuer */2;
    } else if (List.mem(rejectorId, match[/* supporterIds */0])) {
      return /* AlreadyEndorsed */4;
    } else {
      return /* Ok */0;
    }
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return /* UnknownProcessId */3;
    } else {
      throw exn;
    }
  }
}

function validateAcceptance(param, dataList, eq, param$1, _) {
  var completedProcesses = param$1[/* completedProcesses */13];
  var processId = param[/* processId */0];
  try {
    var match = List.assoc(processId, param$1[/* processes */12]);
    if (Curry._2(eq, param[/* data */2], List.assoc(processId, dataList)[1]) === false) {
      return /* BadData */["Data doesn't match proposal"];
    } else if (Policy.fulfilled(match[/* policy */1])(param$1[/* currentPartners */3], match[/* supporterIds */0]) === false) {
      return /* PolicyNotFulfilled */6;
    } else {
      var match$1 = List.fold_left((function (res, processId) {
              if (List.mem(processId, completedProcesses)) {
                return res;
              } else {
                return false;
              }
            }), true, param[/* dependsOnCompletions */1]);
      if (match$1) {
        return /* Ok */0;
      } else {
        return /* DependencyNotMet */7;
      }
    }
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return /* UnknownProcessId */3;
    } else {
      throw exn;
    }
  }
}

function validatePartnerData(param, param$1) {
  var id = param[/* id */1];
  if (List.mem(id, param$1[/* currentPartners */3])) {
    return /* BadData */["Partner already exists"];
  } else {
    var partnerRemovalProcess;
    try {
      partnerRemovalProcess = /* Some */[List.assoc(id, param$1[/* partnerRemovals */7])];
    }
    catch (exn){
      if (exn === Caml_builtin_exceptions.not_found) {
        partnerRemovalProcess = /* None */0;
      } else {
        throw exn;
      }
    }
    if (Caml_obj.caml_notequal(partnerRemovalProcess, param[/* lastRemoval */0])) {
      return /* BadData */["Last removal doesn't match"];
    } else {
      return /* Ok */0;
    }
  }
}

function validatePartnerRemovalData(param, param$1) {
  var id = param[/* id */0];
  var match = List.mem(id, param$1[/* currentPartners */3]);
  if (match) {
    return /* Ok */0;
  } else {
    return /* BadData */["Partner with Id '" + (PrimitiveTypes.UserId[/* toString */0](id) + "' doesn't exist")];
  }
}

function validateCustodianData(param, param$1) {
  try {
    var pData = List.assoc(param[/* partnerApprovalProcess */1], param$1[/* partnerData */5])[1];
    var match = PrimitiveTypes.UserId[/* eq */5](pData[/* id */1], param[/* partnerId */0]);
    if (match) {
      return /* Ok */0;
    } else {
      return /* BadData */["Partner with Id 'custodian.id' doesn't exist"];
    }
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return /* BadData */["Partner with Id 'custodian.id' doesn't exist"];
    } else {
      throw exn;
    }
  }
}

function validateCustodianRemovalData(param, param$1) {
  var accountIdx = param[/* accountIdx */1];
  var custodianId = param[/* custodianId */0];
  try {
    var match = List.exists((function (param) {
            var data = param[1][1];
            if (PrimitiveTypes.UserId[/* eq */5](data[/* partnerId */0], custodianId)) {
              return WalletTypes.AccountIndex[/* eq */7](accountIdx, data[/* accountIdx */2]);
            } else {
              return false;
            }
          }), param$1[/* custodianData */8]);
    if (match) {
      return /* Ok */0;
    } else {
      throw Caml_builtin_exceptions.not_found;
    }
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return /* BadData */["Partner with Id '" + (PrimitiveTypes.UserId[/* toString */0](custodianId) + ("' is not a custodian of account with index " + String(WalletTypes.AccountIndex[/* toInt */0](accountIdx))))];
    } else {
      throw exn;
    }
  }
}

function validateAccountCreationData(param, param$1) {
  var match = WalletTypes.AccountIndex[/* toInt */0](param[/* accountIdx */0]) === List.length(param$1[/* accountCreationData */10]);
  if (match) {
    return /* Ok */0;
  } else {
    return /* BadData */["Bad Account Index"];
  }
}

function validateEvent(param) {
  switch (param.tag | 0) {
    case 0 : 
        return (function (_, _$1) {
            return /* Ok */0;
          });
    case 1 : 
        var proposal = param[0];
        return (function (state) {
            var partial_arg = state[/* partnerData */5];
            var partial_arg$1 = Event.Partner[/* processName */1];
            var partial_arg$2 = /* Some */[validatePartnerData];
            return (function (param) {
                return validateProposal(partial_arg$2, partial_arg$1, partial_arg, proposal, state, param);
              });
          });
    case 2 : 
        var partial_arg = param[0];
        return (function (param, param$1) {
            return validateRejection(partial_arg, param, param$1);
          });
    case 4 : 
        var acceptance = param[0];
        return (function (state) {
            var partial_arg = Event.Partner[/* dataEq */2];
            var partial_arg$1 = state[/* partnerData */5];
            return (function (param) {
                return validateAcceptance(acceptance, partial_arg$1, partial_arg, state, param);
              });
          });
    case 5 : 
        var proposal$1 = param[0];
        return (function (state) {
            var partial_arg = state[/* partnerRemovalData */6];
            var partial_arg$1 = Event.Partner[/* Removal */7][/* processName */1];
            var partial_arg$2 = /* Some */[validatePartnerRemovalData];
            return (function (param) {
                return validateProposal(partial_arg$2, partial_arg$1, partial_arg, proposal$1, state, param);
              });
          });
    case 6 : 
        var partial_arg$1 = param[0];
        return (function (param, param$1) {
            return validateRejection(partial_arg$1, param, param$1);
          });
    case 8 : 
        var acceptance$1 = param[0];
        return (function (state) {
            var partial_arg = Event.Partner[/* Removal */7][/* dataEq */2];
            var partial_arg$1 = state[/* partnerRemovalData */6];
            return (function (param) {
                return validateAcceptance(acceptance$1, partial_arg$1, partial_arg, state, param);
              });
          });
    case 9 : 
        var proposal$2 = param[0];
        return (function (state) {
            var partial_arg = state[/* accountCreationData */10];
            var partial_arg$1 = Event.AccountCreation[/* processName */1];
            var partial_arg$2 = /* Some */[validateAccountCreationData];
            return (function (param) {
                return validateProposal(partial_arg$2, partial_arg$1, partial_arg, proposal$2, state, param);
              });
          });
    case 10 : 
        var partial_arg$2 = param[0];
        return (function (param, param$1) {
            return validateRejection(partial_arg$2, param, param$1);
          });
    case 12 : 
        var acceptance$2 = param[0];
        return (function (state) {
            var partial_arg = Event.AccountCreation[/* dataEq */2];
            var partial_arg$1 = state[/* accountCreationData */10];
            return (function (param) {
                return validateAcceptance(acceptance$2, partial_arg$1, partial_arg, state, param);
              });
          });
    case 13 : 
        var proposal$3 = param[0];
        return (function (state) {
            var partial_arg = state[/* custodianData */8];
            var partial_arg$1 = Event.Custodian[/* processName */1];
            var partial_arg$2 = /* Some */[validateCustodianData];
            return (function (param) {
                return validateProposal(partial_arg$2, partial_arg$1, partial_arg, proposal$3, state, param);
              });
          });
    case 14 : 
        var partial_arg$3 = param[0];
        return (function (param, param$1) {
            return validateRejection(partial_arg$3, param, param$1);
          });
    case 16 : 
        var acceptance$3 = param[0];
        return (function (state) {
            var partial_arg = Event.Custodian[/* dataEq */2];
            var partial_arg$1 = state[/* custodianData */8];
            return (function (param) {
                return validateAcceptance(acceptance$3, partial_arg$1, partial_arg, state, param);
              });
          });
    case 17 : 
        var proposal$4 = param[0];
        return (function (state) {
            var partial_arg = state[/* custodianRemovalData */9];
            var partial_arg$1 = Event.Custodian[/* Removal */7][/* processName */1];
            var partial_arg$2 = /* Some */[validateCustodianRemovalData];
            return (function (param) {
                return validateProposal(partial_arg$2, partial_arg$1, partial_arg, proposal$4, state, param);
              });
          });
    case 18 : 
        var partial_arg$4 = param[0];
        return (function (param, param$1) {
            return validateRejection(partial_arg$4, param, param$1);
          });
    case 20 : 
        var acceptance$4 = param[0];
        return (function (state) {
            var partial_arg = Event.Custodian[/* Removal */7][/* dataEq */2];
            var partial_arg$1 = state[/* custodianRemovalData */9];
            return (function (param) {
                return validateAcceptance(acceptance$4, partial_arg$1, partial_arg, state, param);
              });
          });
    case 21 : 
        var proposal$5 = param[0];
        return (function (state) {
            var partial_arg = state[/* payoutData */11];
            var partial_arg$1 = Event.Payout[/* processName */1];
            return (function (param) {
                return validateProposal(/* None */0, partial_arg$1, partial_arg, proposal$5, state, param);
              });
          });
    case 22 : 
        var partial_arg$5 = param[0];
        return (function (param, param$1) {
            return validateRejection(partial_arg$5, param, param$1);
          });
    case 24 : 
        var acceptance$5 = param[0];
        return (function (state) {
            var partial_arg = Event.Payout[/* dataEq */2];
            var partial_arg$1 = state[/* payoutData */11];
            return (function (param) {
                return validateAcceptance(acceptance$5, partial_arg$1, partial_arg, state, param);
              });
          });
    case 25 : 
        return (function (_, _$1) {
            return /* Ok */0;
          });
    case 26 : 
        return (function (_, _$1) {
            return /* Ok */0;
          });
    case 27 : 
        return (function (_, _$1) {
            return /* Ignore */1;
          });
    case 28 : 
        return (function (_, _$1) {
            return /* Ok */0;
          });
    case 29 : 
        var partial_arg$6 = param[0];
        return (function (param, param$1) {
            var param$2 = partial_arg$6;
            var param$3 = param;
            var issuerPubKey = param$1;
            var keyChain = param$2[/* keyChain */2];
            var partnerId = param$2[/* partnerId */1];
            if (PrimitiveTypes.UserId[/* neq */6](List.assoc(issuerPubKey, param$3[/* currentPartnerPubKeys */4]), partnerId)) {
              return /* InvalidIssuer */2;
            } else {
              try {
                var match = List.find((function (param) {
                        var data = param[1][1];
                        if (Caml_obj.caml_equal(data[/* partnerId */0], partnerId)) {
                          return Caml_obj.caml_equal(data[/* accountIdx */2], CustodianKeyChain.accountIdx(keyChain));
                        } else {
                          return false;
                        }
                      }), param$3[/* custodianData */8]);
                if (List.mem(match[0], param$3[/* completedProcesses */13])) {
                  if (List.length(List.assoc(CustodianKeyChain.accountIdx(keyChain), List.assoc(partnerId, param$3[/* custodianKeyChains */16]))) !== WalletTypes.CustodianKeyChainIndex[/* toInt */0](CustodianKeyChain.keyChainIdx(keyChain))) {
                    return /* BadData */["Bad KeyChainIndex"];
                  } else {
                    return /* Ok */0;
                  }
                } else {
                  return /* BadData */["Custodian isn't accepted yet"];
                }
              }
              catch (exn){
                if (exn === Caml_builtin_exceptions.not_found) {
                  return /* BadData */["Custodian doesn't exist"];
                } else {
                  throw exn;
                }
              }
            }
          });
    case 30 : 
        var partial_arg$7 = param[0];
        return (function (param, param$1) {
            var param$2 = partial_arg$7;
            var param$3 = param;
            var custodianKeyChains = param$3[/* custodianKeyChains */16];
            var keyChain = param$2[/* keyChain */0];
            try {
              var match = List.find((function (param) {
                      return Caml_obj.caml_equal(param[1][1][/* accountIdx */0], keyChain[/* accountIdx */0]);
                    }), param$3[/* accountCreationData */10]);
              if (List.mem(match[0], param$3[/* completedProcesses */13])) {
                if (List.length(List.assoc(keyChain[/* accountIdx */0], param$3[/* accountKeyChains */17])) !== WalletTypes.AccountKeyChainIndex[/* toInt */0](keyChain[/* keyChainIdx */1])) {
                  return /* BadData */["Bad KeyChainIndex"];
                } else {
                  var accountIdx = keyChain[/* accountIdx */0];
                  return List.fold_left((function (result, test) {
                                var match = test === /* Ok */0;
                                if (match) {
                                  return result;
                                } else {
                                  return test;
                                }
                              }), /* Ok */0, List.map((function (param) {
                                    try {
                                      var latestKeyChain = List.hd(List.rev(List.sort((function (keysA, keysB) {
                                                      return Caml_obj.caml_compare(CustodianKeyChain.keyChainIdx(keysA), CustodianKeyChain.keyChainIdx(keysB));
                                                    }), List.assoc(accountIdx, List.assoc(param[0], custodianKeyChains)))));
                                      var match = Caml_obj.caml_equal(param[1], latestKeyChain);
                                      if (match) {
                                        return /* Ok */0;
                                      } else {
                                        return /* BadData */["Bad CustodianKeyChain"];
                                      }
                                    }
                                    catch (exn){
                                      if (exn === Caml_builtin_exceptions.not_found) {
                                        return /* BadData */["Bad CustodianKeyChain"];
                                      } else {
                                        throw exn;
                                      }
                                    }
                                  }), keyChain[/* custodianKeyChains */3]));
                }
              } else {
                return /* BadData */["Account doesn't exist"];
              }
            }
            catch (exn){
              if (exn === Caml_builtin_exceptions.not_found) {
                return /* BadData */["Account doesn't exist"];
              } else {
                throw exn;
              }
            }
          });
    case 31 : 
        var partial_arg$8 = param[0];
        return (function (param, param$1) {
            var param$2 = partial_arg$8;
            var param$3 = param;
            try {
              var generatedAddress = Address.find(param$2[/* coordinates */0], param$3[/* accountKeyChains */17]);
              if (param$2[/* address */1] === generatedAddress[/* address */5]) {
                return /* Ok */0;
              } else {
                return /* BadData */["Unknown Address"];
              }
            }
            catch (exn){
              if (exn === Caml_builtin_exceptions.not_found) {
                return /* BadData */["Unknown Address"];
              } else {
                throw exn;
              }
            }
          });
    case 32 : 
        return (function (_, _$1) {
            return /* Ok */0;
          });
    default:
      var partial_arg$9 = param[0];
      return (function (param, param$1) {
          var param$2 = partial_arg$9;
          var param$3 = param;
          var issuerPubKey = param$1;
          var supporterId = param$2[/* supporterId */1];
          try {
            var match = List.assoc(param$2[/* processId */0], param$3[/* processes */12]);
            if (PrimitiveTypes.UserId[/* neq */6](List.assoc(issuerPubKey, param$3[/* currentPartnerPubKeys */4]), supporterId)) {
              return /* InvalidIssuer */2;
            } else if (List.mem(supporterId, match[/* supporterIds */0])) {
              return /* Ignore */1;
            } else {
              return /* Ok */0;
            }
          }
          catch (exn){
            if (exn === Caml_builtin_exceptions.not_found) {
              return /* UnknownProcessId */3;
            } else {
              throw exn;
            }
          }
        });
  }
}

function validate(state, param) {
  var issuerPubKey = param[/* issuerPubKey */2];
  var $$event = param[/* event */0];
  if (List.mem(param[/* hash */1], state[/* knownItems */2])) {
    return /* Ignore */1;
  } else {
    var match = Event.isSystemEvent($$event);
    var match$1 = List.mem_assoc(issuerPubKey, state[/* currentPartnerPubKeys */4]);
    var exit = 0;
    switch ($$event.tag | 0) {
      case 0 : 
          var match$2 = PrimitiveTypes.UserId[/* eq */5](state[/* creatorData */15][/* id */1], PrimitiveTypes.UserId[/* fromString */1](""));
          if (match$2) {
            return /* Ok */0;
          } else {
            return /* BadData */["Venture is already created"];
          }
      case 1 : 
          if (match) {
            exit = 1;
          } else if (match$1) {
            return Curry._2(validateEvent($$event), state, issuerPubKey);
          } else if (Caml_obj.caml_equal($$event[0][/* data */5], state[/* creatorData */15]) && issuerPubKey === state[/* creatorData */15][/* pubKey */2] && List.length(state[/* partnerData */5]) === 0) {
            return /* Ok */0;
          } else {
            exit = 1;
          }
          break;
      default:
        exit = 1;
    }
    if (exit === 1) {
      if (match) {
        if (issuerPubKey !== state[/* systemPubKey */0]) {
          return /* InvalidIssuer */2;
        } else if ($$event.tag === 4 && !(match$1 || !(Caml_obj.caml_equal($$event[0][/* data */2], state[/* creatorData */15]) && List.length(state[/* partnerData */5]) === 1))) {
          return /* Ok */0;
        } else {
          return Curry._2(validateEvent($$event), state, issuerPubKey);
        }
      } else if (match$1) {
        return Curry._2(validateEvent($$event), state, issuerPubKey);
      } else {
        return /* InvalidIssuer */2;
      }
    }
    
  }
}

exports.make = make;
exports.apply = apply;
exports.resultToString = resultToString;
exports.validate = validate;
/* Event Not a pure module */
