// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Json_decode = require("bs-json/src/Json_decode.js");
var Json_encode = require("bs-json/src/Json_encode.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

function filterUsers(eligable, endorsed) {
  return List.filter((function (user) {
                  return List.mem(user, eligable);
                }))(endorsed);
}

function fulfilled(eligable, endorsed) {
  var endorsed$1 = filterUsers(eligable, endorsed);
  if (List.length(eligable) === List.length(endorsed$1)) {
    return List.length(eligable) > 0;
  } else {
    return false;
  }
}

function encode() {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "type",
                "Unanimous"
              ],
              /* [] */0
            ]);
}

var Unanimous = /* module */[
  /* fulfilled */fulfilled,
  /* encode */encode
];

function fulfilled$1(eligable, endorsed) {
  var endorsed$1 = filterUsers(eligable, endorsed);
  if (List.length(endorsed$1) >= (List.length(eligable) - 1 | 0)) {
    return List.length(eligable) > 0;
  } else {
    return false;
  }
}

function encode$1() {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "type",
                "UnanimousMinusOne"
              ],
              /* [] */0
            ]);
}

var UnanimousMinusOne = /* module */[
  /* fulfilled */fulfilled$1,
  /* encode */encode$1
];

function fulfilled$2(param) {
  if (param) {
    return fulfilled$1;
  } else {
    return fulfilled;
  }
}

var eq = Caml_obj.caml_equal;

var neq = Caml_obj.caml_notequal;

function encode$2(policy) {
  if (policy) {
    return encode$1(policy);
  } else {
    return encode(policy);
  }
}

var UnknownPolicy = Caml_exceptions.create("Policy.UnknownPolicy");

function decode(raw) {
  var type_ = Json_decode.field("type", Json_decode.string, raw);
  switch (type_) {
    case "Unanimous" : 
        return /* Unanimous */0;
    case "UnanimousMinusOne" : 
        return /* UnanimousMinusOne */1;
    default:
      throw [
            UnknownPolicy,
            raw
          ];
  }
}

var unanimous = /* Unanimous */0;

var unanimousMinusOne = /* UnanimousMinusOne */1;

exports.filterUsers = filterUsers;
exports.Unanimous = Unanimous;
exports.UnanimousMinusOne = UnanimousMinusOne;
exports.unanimous = unanimous;
exports.unanimousMinusOne = unanimousMinusOne;
exports.fulfilled = fulfilled$2;
exports.eq = eq;
exports.neq = neq;
exports.encode = encode$2;
exports.UnknownPolicy = UnknownPolicy;
exports.decode = decode;
/* Json_encode Not a pure module */
