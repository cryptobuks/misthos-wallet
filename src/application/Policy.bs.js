// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var Belt_Set = require("bs-platform/lib/js/belt_Set.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

function fulfilled(eligible, endorsed) {
  var endorsed$1 = Belt_Set.intersect(eligible, endorsed);
  if (Belt_Set.size(endorsed$1) >= Belt_Set.size(eligible)) {
    return Belt_Set.size(eligible) > 0;
  } else {
    return false;
  }
}

function canBeFulfilled(eligible, rejected) {
  var releventRejections = Belt_Set.intersect(eligible, rejected);
  return Belt_Set.size(releventRejections) === 0;
}

function encode() {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "type",
                "Unanimous"
              ],
              /* [] */0
            ]);
}

var Unanimous = /* module */[
  /* fulfilled */fulfilled,
  /* canBeFulfilled */canBeFulfilled,
  /* encode */encode
];

function fulfilled$1(eligible, endorsed) {
  var endorsed$1 = Belt_Set.intersect(eligible, endorsed);
  if (Belt_Set.size(endorsed$1) >= (Belt_Set.size(eligible) - 1 | 0)) {
    return Belt_Set.size(eligible) > 0;
  } else {
    return false;
  }
}

function canBeFulfilled$1(eligible, rejected) {
  var releventRejections = Belt_Set.intersect(eligible, rejected);
  return Belt_Set.size(releventRejections) <= 1;
}

function encode$1() {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "type",
                "UnanimousMinusOne"
              ],
              /* [] */0
            ]);
}

var UnanimousMinusOne = /* module */[
  /* fulfilled */fulfilled$1,
  /* canBeFulfilled */canBeFulfilled$1,
  /* encode */encode$1
];

function fulfilled$2(eligible, endorsed) {
  var endorsed$1 = Belt_Set.intersect(eligible, endorsed);
  var eligibleSize = Belt_Set.size(eligible);
  if ((Belt_Set.size(endorsed$1) << 1) > eligibleSize && eligibleSize > 0) {
    return true;
  } else {
    return fulfilled(eligible, endorsed$1);
  }
}

function canBeFulfilled$2(eligible, rejected) {
  var releventRejections = Belt_Set.intersect(eligible, rejected);
  return (Belt_Set.size(releventRejections) << 1) < Belt_Set.size(eligible);
}

function encode$2() {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "type",
                "Majority"
              ],
              /* [] */0
            ]);
}

var Majority = /* module */[
  /* fulfilled */fulfilled$2,
  /* canBeFulfilled */canBeFulfilled$2,
  /* encode */encode$2
];

function fulfilled$3(param) {
  switch (param) {
    case 0 : 
        return fulfilled;
    case 1 : 
        return fulfilled$1;
    case 2 : 
        return fulfilled$2;
    
  }
}

function canBeFulfilled$3(param) {
  switch (param) {
    case 0 : 
        return canBeFulfilled;
    case 1 : 
        return canBeFulfilled$1;
    case 2 : 
        return canBeFulfilled$2;
    
  }
}

var eq = Caml_obj.caml_equal;

var neq = Caml_obj.caml_notequal;

function encode$3(policy) {
  switch (policy) {
    case 0 : 
        return encode(policy);
    case 1 : 
        return encode$1(policy);
    case 2 : 
        return encode$2(policy);
    
  }
}

var UnknownPolicy = Caml_exceptions.create("Policy.UnknownPolicy");

function decode(raw) {
  var type_ = Json_decode.field("type", Json_decode.string, raw);
  switch (type_) {
    case "Majority" : 
        return /* Majority */2;
    case "Unanimous" : 
        return /* Unanimous */0;
    case "UnanimousMinusOne" : 
        return /* UnanimousMinusOne */1;
    default:
      throw [
            UnknownPolicy,
            raw
          ];
  }
}

var defaultInitialPolicies = /* record */[
  /* addPartner : Unanimous */0,
  /* addCustodian : Unanimous */0,
  /* removePartner : UnanimousMinusOne */1,
  /* removeCustodian : UnanimousMinusOne */1,
  /* payout : Unanimous */0
];

function encodeInitialPolicies(policies) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "addPartner",
                encode$3(policies[/* addPartner */0])
              ],
              /* :: */[
                /* tuple */[
                  "addCustodian",
                  encode$3(policies[/* addCustodian */1])
                ],
                /* :: */[
                  /* tuple */[
                    "removePartner",
                    encode$3(policies[/* removePartner */2])
                  ],
                  /* :: */[
                    /* tuple */[
                      "removeCustodian",
                      encode$3(policies[/* removeCustodian */3])
                    ],
                    /* :: */[
                      /* tuple */[
                        "payout",
                        encode$3(policies[/* payout */4])
                      ],
                      /* [] */0
                    ]
                  ]
                ]
              ]
            ]);
}

function decodeInitialPolicies(raw) {
  return /* record */[
          /* addPartner */Json_decode.field("addPartner", decode, raw),
          /* addCustodian */Json_decode.field("addCustodian", decode, raw),
          /* removePartner */Json_decode.field("removePartner", decode, raw),
          /* removeCustodian */Json_decode.field("removeCustodian", decode, raw),
          /* payout */Json_decode.field("payout", decode, raw)
        ];
}

var unanimous = /* Unanimous */0;

var unanimousMinusOne = /* UnanimousMinusOne */1;

var majority = /* Majority */2;

var defaultMetaPolicy = /* Unanimous */0;

var defaultAddPartner = /* Unanimous */0;

var defaultAddCustodian = /* Unanimous */0;

var defaultRemovePartner = /* UnanimousMinusOne */1;

var defaultRemoveCustodian = /* UnanimousMinusOne */1;

var defaultPayout = /* Unanimous */0;

exports.Unanimous = Unanimous;
exports.UnanimousMinusOne = UnanimousMinusOne;
exports.Majority = Majority;
exports.unanimous = unanimous;
exports.unanimousMinusOne = unanimousMinusOne;
exports.majority = majority;
exports.fulfilled = fulfilled$3;
exports.canBeFulfilled = canBeFulfilled$3;
exports.eq = eq;
exports.neq = neq;
exports.encode = encode$3;
exports.UnknownPolicy = UnknownPolicy;
exports.decode = decode;
exports.defaultMetaPolicy = defaultMetaPolicy;
exports.defaultAddPartner = defaultAddPartner;
exports.defaultAddCustodian = defaultAddCustodian;
exports.defaultRemovePartner = defaultRemovePartner;
exports.defaultRemoveCustodian = defaultRemoveCustodian;
exports.defaultPayout = defaultPayout;
exports.defaultInitialPolicies = defaultInitialPolicies;
exports.encodeInitialPolicies = encodeInitialPolicies;
exports.decodeInitialPolicies = decodeInitialPolicies;
/* Json_encode Not a pure module */
