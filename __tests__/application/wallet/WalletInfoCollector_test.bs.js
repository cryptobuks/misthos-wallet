// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var BTC = require("../../../src/application/wallet/BTC.bs.js");
var Jest = require("@glennsl/bs-jest/src/jest.js");
var Belt_Set = require("bs-platform/lib/js/belt_Set.js");
var Fixtures = require("../../helpers/Fixtures.bs.js");
var Generators = require("../../helpers/Generators.bs.js");
var WalletTypes = require("../../../src/application/wallet/WalletTypes.bs.js");
var PrimitiveTypes = require("../../../src/application/PrimitiveTypes.bs.js");
var WalletInfoCollector = require("../../../src/application/wallet/WalletInfoCollector.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function constructState(log) {
  return Generators.Log[/* reduce */1]((function (s, param) {
                return WalletInfoCollector.apply(param[/* event */0], s);
              }), WalletInfoCollector.make(/* () */0), log);
}

describe("WalletInfoCollector", (function () {
        return Fixtures.withCached(/* None */0, /* None */0, "WalletInfoCollector", "oldInputs", (function () {
                      return Generators.withUserSessions(3);
                    }), (function (sessions) {
                      var match = Generators.twoUserSessionsFromArray(sessions);
                      var user2 = match[1];
                      var user1 = match[0];
                      return Generators.Log[/* withIncomeDetected */42](2, Generators.Log[/* withIncomeDetected */42](1, Generators.Log[/* withIncomeDetected */42](0, Generators.Log[/* withIncomeAddressExposed */41](user1, Generators.Log[/* withAccountKeyChainActivated */40](/* None */0, user1, Generators.Log[/* withAccountKeyChainIdentified */39](Generators.Log[/* withCustodianKeyChain */38](/* Some */[1], /* None */0, user1, Generators.Log[/* withPartnerRemoved */23](user2, /* :: */[
                                                              user1,
                                                              /* [] */0
                                                            ], Generators.Log[/* withIncomeAddressExposed */41](user1, Generators.Log[/* withAccountKeyChainActivated */40](/* None */0, user1, Generators.Log[/* withAccountKeyChainIdentified */39](Generators.Log[/* withCustodianKeyChain */38](/* None */0, /* None */0, user2, Generators.Log[/* withCustodian */33](user2, /* :: */[
                                                                                  user1,
                                                                                  /* :: */[
                                                                                    user2,
                                                                                    /* [] */0
                                                                                  ]
                                                                                ], Generators.Log[/* withPartner */17](/* None */0, user2, /* :: */[
                                                                                      user1,
                                                                                      /* [] */0
                                                                                    ], Generators.Log[/* withIncomeAddressExposed */41](user1, Generators.Log[/* withAccountKeyChainActivated */40](/* None */0, user1, Generators.Log[/* withAccountKeyChainIdentified */39](Generators.Log[/* withCustodianKeyChain */38](/* None */0, /* None */0, user1, Generators.Log[/* withCustodian */33](user1, /* :: */[
                                                                                                          user1,
                                                                                                          /* [] */0
                                                                                                        ], Generators.Log[/* withAccount */27](user1, Generators.Log[/* withFirstPartner */18](user1)(Generators.Log[/* createVenture */11](user1))))))))))))))))))))));
                    }), (function (sessions, log) {
                      var match = Generators.twoUserSessionsFromArray(sessions);
                      var user1 = match[0];
                      var info = constructState(log);
                      return Jest.test("1 input is old", (function () {
                                    return Jest.Expect[/* toEqual */12](1, Jest.Expect[/* expect */0](Belt_Set.size(WalletInfoCollector.nonReservedOldInputs(WalletTypes.AccountIndex[/* default */9], user1[/* userId */0], info))));
                                  }));
                    }));
      }));

describe("WalletInfoCollector-addressInfo", (function () {
        return Fixtures.withCached(/* None */0, /* None */0, "WalletInfoCollector-addressInfo", "classifies addresses", (function () {
                      return Fixtures.threeUserSessionsArray;
                    }), (function (sessions) {
                      var match = Generators.threeUserSessionsFromArray(sessions);
                      var user3 = match[2];
                      var user2 = match[1];
                      var user1 = match[0];
                      return Generators.Log[/* withIncomeAddressExposed */41](user1, Generators.Log[/* withAccountKeyChainActivated */40](/* None */0, user1, Generators.Log[/* withAccountKeyChainIdentified */39](Generators.Log[/* withCustodianRemoved */37](user2, /* :: */[
                                              user1,
                                              /* :: */[
                                                user3,
                                                /* [] */0
                                              ]
                                            ], Generators.Log[/* withIncomeAddressExposed */41](user1, Generators.Log[/* withAccountKeyChainActivated */40](/* None */0, user1, Generators.Log[/* withAccountKeyChainIdentified */39](Generators.Log[/* withCustodianKeyChain */38](/* None */0, /* None */0, user3, Generators.Log[/* withCustodian */33](user3, /* :: */[
                                                                  user1,
                                                                  /* :: */[
                                                                    user2,
                                                                    /* :: */[
                                                                      user3,
                                                                      /* [] */0
                                                                    ]
                                                                  ]
                                                                ], Generators.Log[/* withPartner */17](/* None */0, user3, /* :: */[
                                                                      user1,
                                                                      /* :: */[
                                                                        user2,
                                                                        /* [] */0
                                                                      ]
                                                                    ], Generators.Log[/* withCustodianKeyChain */38](/* None */0, /* None */0, user2, Generators.Log[/* withCustodian */33](user2, /* :: */[
                                                                              user1,
                                                                              /* :: */[
                                                                                user2,
                                                                                /* [] */0
                                                                              ]
                                                                            ], Generators.Log[/* withPartner */17](/* None */0, user2, /* :: */[
                                                                                  user1,
                                                                                  /* [] */0
                                                                                ], Generators.Log[/* withIncomeAddressExposed */41](user1, Generators.Log[/* withAccountKeyChainActivated */40](/* None */0, user1, Generators.Log[/* withAccountKeyChainIdentified */39](Generators.Log[/* withCustodianKeyChain */38](/* None */0, /* None */0, user1, Generators.Log[/* withCustodian */33](user1, /* :: */[
                                                                                                      user1,
                                                                                                      /* [] */0
                                                                                                    ], Generators.Log[/* withAccount */27](user1, Generators.Log[/* withFirstPartner */18](user1)(Fixtures.createVenture(user1)))))))))))))))))))));
                    }), (function (sessions, log) {
                      var match = Generators.threeUserSessionsFromArray(sessions);
                      var user3 = match[2];
                      var user1 = match[0];
                      var info = WalletInfoCollector.addressInfos(constructState(log));
                      var exit = 0;
                      if (info) {
                        var match$1 = info[1];
                        if (match$1) {
                          var match$2 = match$1[1];
                          if (match$2 && !match$2[1]) {
                            var firstInfo = match$2[0];
                            var lastInfo = info[0];
                            describe.skip("AddressInfo of first address", (function () {
                                    Jest.test("Custodians are correct", (function () {
                                            return Jest.Expect[/* toEqual */12](true, Jest.Expect[/* expect */0](Belt_Set.eq(Belt_Set.mergeMany(PrimitiveTypes.UserId[/* emptySet */9], /* array */[user1[/* userId */0]]), firstInfo[/* custodians */1])));
                                          }));
                                    return Jest.test("addressType, addressStatus, balance are correct", (function () {
                                                  return Jest.Expect[/* toEqual */12](/* tuple */[
                                                              /* Income */0,
                                                              /* OutdatedCustodians */2,
                                                              BTC.zero
                                                            ], Jest.Expect[/* expect */0](/* tuple */[
                                                                  firstInfo[/* addressType */0],
                                                                  firstInfo[/* addressStatus */5],
                                                                  firstInfo[/* balance */4]
                                                                ]));
                                                }));
                                  }));
                            describe("AddressInfo of last address", (function () {
                                    Jest.test("Custodians are correct", (function () {
                                            return Jest.Expect[/* toEqual */12](true, Jest.Expect[/* expect */0](Belt_Set.eq(Belt_Set.mergeMany(PrimitiveTypes.UserId[/* emptySet */9], /* array */[
                                                                    user1[/* userId */0],
                                                                    user3[/* userId */0]
                                                                  ]), lastInfo[/* custodians */1])));
                                          }));
                                    return Jest.test("addressType, addressStatus, balance are correct", (function () {
                                                  return Jest.Expect[/* toEqual */12](/* tuple */[
                                                              /* Income */0,
                                                              /* Accessible */0,
                                                              BTC.zero
                                                            ], Jest.Expect[/* expect */0](/* tuple */[
                                                                  lastInfo[/* addressType */0],
                                                                  lastInfo[/* addressStatus */5],
                                                                  lastInfo[/* balance */4]
                                                                ]));
                                                }));
                                  }));
                            return /* () */0;
                          } else {
                            exit = 1;
                          }
                        } else {
                          exit = 1;
                        }
                      } else {
                        exit = 1;
                      }
                      if (exit === 1) {
                        throw [
                              Caml_builtin_exceptions.match_failure,
                              [
                                "WalletInfoCollector_test.re",
                                103,
                                12
                              ]
                            ];
                      }
                      
                    }));
      }));

exports.constructState = constructState;
/*  Not a pure module */
