// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var BTC = require("../../../src/application/wallet/BTC.bs.js");
var Jest = require("@glennsl/bs-jest/src/jest.js");
var List = require("bs-platform/lib/js/list.js");
var WalletTypes = require("../../../src/application/wallet/WalletTypes.bs.js");
var PayoutTransaction = require("../../../src/application/wallet/PayoutTransaction.bs.js");

describe("build", (function () {
        var inputs_000 = /* record */[
          /* txId */"d66c39a24f63d80c13e44cf1ce562618d1d0d92675118aa331e5367a7ddb9de7",
          /* txOutputN */0,
          /* address */"2N3gWQwj2RrHaw7rWmbr1vKkzBnutSMp2LE",
          /* value */BTC.fromSatoshis(/* int64 */[
                /* hi */0,
                /* lo */10000
              ]),
          /* nCoSigners */1,
          /* nPubKeys */1,
          /* coordinates : tuple */[
            WalletTypes.AccountIndex[/* first */1],
            WalletTypes.AccountKeyChainIndex[/* first */1],
            WalletTypes.ChainIndex[/* externalChain */8],
            WalletTypes.AddressIndex[/* first */1]
          ]
        ];
        var inputs_001 = /* :: */[
          /* record */[
            /* txId */"d66c39a24f63d80c13e44cf1ce562618d1d0d92675118aa331e5367a7ddb9de7",
            /* txOutputN */1,
            /* address */"2N3CDv7U6xVYmNqdvNscKBWwUYky7SM6Wdq",
            /* value */BTC.fromSatoshis(/* int64 */[
                  /* hi */0,
                  /* lo */5000
                ]),
            /* nCoSigners */1,
            /* nPubKeys */1,
            /* coordinates : tuple */[
              WalletTypes.AccountIndex[/* first */1],
              WalletTypes.AccountKeyChainIndex[/* first */1],
              WalletTypes.ChainIndex[/* externalChain */8],
              WalletTypes.AddressIndex[/* next */2](WalletTypes.AddressIndex[/* first */1])
            ]
          ],
          /* [] */0
        ];
        var inputs = /* :: */[
          inputs_000,
          inputs_001
        ];
        var changeAddress_002 = /* coordinates : tuple */[
          WalletTypes.AccountIndex[/* first */1],
          WalletTypes.AccountKeyChainIndex[/* first */1],
          WalletTypes.ChainIndex[/* externalChain */8],
          WalletTypes.AddressIndex[/* first */1]
        ];
        var changeAddress = /* record */[
          /* nCoSigners */1,
          /* nPubKeys */1,
          changeAddress_002,
          /* witnessScript */"51210358ebee38e86598266dc351dfec81c0bd98e3a90a4e93bff72003569f2b02d13351ae",
          /* redeemScript */"002027fa0596838478a59b5c0512acf480fdba510cd320def9e3d9e9d27a13b7e72f",
          /* address */"2N3gWQwj2RrHaw7rWmbr1vKkzBnutSMp2LE"
        ];
        Jest.test("uses as many inputs as necessary", (function () {
                var match = PayoutTransaction.build(/* [] */0, inputs, /* :: */[
                      /* tuple */[
                        "mgWUuj1J1N882jmqFxtDepEC73Rr22E9GU",
                        BTC.fromSatoshis(/* int64 */[
                              /* hi */0,
                              /* lo */10000
                            ])
                      ],
                      /* [] */0
                    ], BTC.fromSatoshis(/* int64 */[
                          /* hi */0,
                          /* lo */1
                        ]), changeAddress, /* Regtest */0);
                var match$1;
                match$1 = match.tag ? /* tuple */[
                    match[0],
                    false
                  ] : /* tuple */[
                    match[0],
                    true
                  ];
                return Jest.Expect[/* toEqual */12](/* tuple */[
                            2,
                            true
                          ], Jest.Expect[/* expect */0](/* tuple */[
                                List.length(match$1[0][/* usedInputs */1]),
                                match$1[1]
                              ]));
              }));
        Jest.test("uses smallest possible input", (function () {
                var match = PayoutTransaction.build(/* [] */0, inputs, /* :: */[
                      /* tuple */[
                        "mgWUuj1J1N882jmqFxtDepEC73Rr22E9GU",
                        BTC.fromSatoshis(/* int64 */[
                              /* hi */0,
                              /* lo */4000
                            ])
                      ],
                      /* [] */0
                    ], BTC.fromSatoshis(/* int64 */[
                          /* hi */0,
                          /* lo */1
                        ]), changeAddress, /* Regtest */0);
                var match$1;
                match$1 = match.tag ? /* tuple */[
                    match[0],
                    false
                  ] : /* tuple */[
                    match[0],
                    true
                  ];
                return Jest.Expect[/* toEqual */12](/* tuple */[
                            1,
                            true
                          ], Jest.Expect[/* expect */0](/* tuple */[
                                List.hd(match$1[0][/* usedInputs */1])[1][/* txOutputN */1],
                                match$1[1]
                              ]));
              }));
        Jest.test("doesn't use change address if not worth it", (function () {
                var match = PayoutTransaction.build(/* [] */0, inputs, /* :: */[
                      /* tuple */[
                        "mgWUuj1J1N882jmqFxtDepEC73Rr22E9GU",
                        BTC.fromSatoshis(/* int64 */[
                              /* hi */0,
                              /* lo */9800
                            ])
                      ],
                      /* [] */0
                    ], BTC.fromSatoshis(/* int64 */[
                          /* hi */0,
                          /* lo */1
                        ]), changeAddress, /* Regtest */0);
                var match$1;
                match$1 = match.tag ? /* tuple */[
                    match[0],
                    false
                  ] : /* tuple */[
                    match[0],
                    true
                  ];
                return Jest.Expect[/* toEqual */12](/* tuple */[
                            0,
                            false
                          ], Jest.Expect[/* expect */0](/* tuple */[
                                List.hd(match$1[0][/* usedInputs */1])[1][/* txOutputN */1],
                                match$1[1]
                              ]));
              }));
        Jest.test("respects mandatory inputs", (function () {
                var match = PayoutTransaction.build(/* :: */[
                      List.nth(inputs, 1),
                      /* [] */0
                    ], inputs, /* :: */[
                      /* tuple */[
                        "mgWUuj1J1N882jmqFxtDepEC73Rr22E9GU",
                        BTC.fromSatoshis(/* int64 */[
                              /* hi */0,
                              /* lo */6000
                            ])
                      ],
                      /* [] */0
                    ], BTC.fromSatoshis(/* int64 */[
                          /* hi */0,
                          /* lo */1
                        ]), changeAddress, /* Regtest */0);
                var match$1;
                match$1 = match.tag ? /* tuple */[
                    match[0],
                    false
                  ] : /* tuple */[
                    match[0],
                    true
                  ];
                return Jest.Expect[/* toEqual */12](/* tuple */[
                            2,
                            true
                          ], Jest.Expect[/* expect */0](/* tuple */[
                                List.length(match$1[0][/* usedInputs */1]),
                                match$1[1]
                              ]));
              }));
        return Jest.test("raises when there aren't enough funds", (function () {
                      return Jest.Expect[/* toThrow */18](Jest.Expect[/* expectFn */1]((function () {
                                        return PayoutTransaction.build(/* [] */0, inputs, /* :: */[
                                                    /* tuple */[
                                                      "mgWUuj1J1N882jmqFxtDepEC73Rr22E9GU",
                                                      BTC.fromSatoshis(/* int64 */[
                                                            /* hi */0,
                                                            /* lo */15000
                                                          ])
                                                    ],
                                                    /* [] */0
                                                  ], BTC.fromSatoshis(/* int64 */[
                                                        /* hi */0,
                                                        /* lo */1
                                                      ]), changeAddress, /* Regtest */0);
                                      }), /* () */0));
                    }));
      }));

/*  Not a pure module */
