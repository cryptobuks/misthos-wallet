// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Utils = require("../../../src/utils/Utils.bs.js");
var WalletTypes = require("../../../src/application/wallet/WalletTypes.bs.js");
var BitcoinjsLib = require("bitcoinjs-lib");
var PrimitiveTypes = require("../../../src/application/PrimitiveTypes.bs.js");
var AccountKeyChain = require("../../../src/application/wallet/AccountKeyChain.bs.js");
var CustodianKeyChain = require("../../../src/application/wallet/CustodianKeyChain.bs.js");

describe("getAddress", (function () {
        var keyA = BitcoinjsLib.ECPair.fromWIF("cUVTgxrs44T7zVon5dSDicBkBRjyfLwL7RF1RvR7n94ar3HEaLs1", BitcoinjsLib.networks.testnet);
        var keyB = BitcoinjsLib.ECPair.fromWIF("cPfdeLvhwvAVRRM5wiEWopWviGG65gbxQCHdtFL56PYUJXsTYixf", BitcoinjsLib.networks.testnet);
        var keyC = BitcoinjsLib.ECPair.fromWIF("cPMRPo3fXGehCmFC5QsSFcZmYivsFtLVexxWi22CFwocvndXLqP1", BitcoinjsLib.networks.testnet);
        var chainCode = Utils.bufFromHex("c8bce5e6dac6f931af17863878cce2ca3b704c61b3d775fe56881cc8ff3ab1cb");
        var masterA = new BitcoinjsLib.HDNode(keyA, chainCode);
        var masterB = new BitcoinjsLib.HDNode(keyB, chainCode);
        var masterC = new BitcoinjsLib.HDNode(keyC, chainCode);
        var ventureId = PrimitiveTypes.VentureId[/* fromString */1]("test");
        var accountIdx = WalletTypes.AccountIndex[/* default */8];
        var keyChainIdx = WalletTypes.CustodianKeyChainIndex[/* first */7];
        var cKeyChainA = CustodianKeyChain.toPublicKeyChain(CustodianKeyChain.make(ventureId, accountIdx, keyChainIdx, masterA));
        CustodianKeyChain.toPublicKeyChain(CustodianKeyChain.make(ventureId, accountIdx, keyChainIdx, masterB));
        CustodianKeyChain.toPublicKeyChain(CustodianKeyChain.make(ventureId, accountIdx, keyChainIdx, masterC));
        return Jest.test("single Custodian", (function () {
                      var accountKeyChain = AccountKeyChain.make(WalletTypes.AccountIndex[/* first */1], WalletTypes.AccountKeyChainIndex[/* first */1], 1, /* :: */[
                            /* tuple */[
                              PrimitiveTypes.UserId[/* fromString */1]("custodianA"),
                              cKeyChainA
                            ],
                            /* [] */0
                          ]);
                      var firstCoordinates = Curry._1(AccountKeyChain.Address[/* Coordinates */0][/* firstExternal */0], accountKeyChain);
                      return Jest.Expect[/* toEqual */12](/* record */[
                                  /* nCoSigners */1,
                                  /* nPubKeys */1,
                                  /* coordinates : tuple */[
                                    WalletTypes.AccountIndex[/* first */1],
                                    WalletTypes.AccountKeyChainIndex[/* first */1],
                                    WalletTypes.ChainIndex[/* externalChain */8],
                                    WalletTypes.AddressIndex[/* first */1]
                                  ],
                                  /* witnessScript */"51210358ebee38e86598266dc351dfec81c0bd98e3a90a4e93bff72003569f2b02d13351ae",
                                  /* redeemScript */"002027fa0596838478a59b5c0512acf480fdba510cd320def9e3d9e9d27a13b7e72f",
                                  /* address */"2N3gWQwj2RrHaw7rWmbr1vKkzBnutSMp2LE"
                                ], Jest.Expect[/* expect */0](AccountKeyChain.Address[/* make */1](firstCoordinates, accountKeyChain)));
                    }));
      }));

/*  Not a pure module */
