// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var BTC = require("../../../src/application/wallet/BTC.bs.js");
var Jest = require("@glennsl/bs-jest/src/jest.js");
var Helpers = require("../../helpers/Helpers.bs.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var BitcoinOps = require("bitcoin-ops");
var BitcoinjsLib = require("bitcoinjs-lib");

Helpers.enableHttpRequests(/* () */0);

var script = /* array */[
  BitcoinOps.OP_DEPTH,
  BitcoinOps.OP_1,
  BitcoinOps.OP_EQUAL,
  BitcoinOps.OP_NIP
];

function encodeOutput() {
  return BitcoinjsLib.script.compile(script);
}

describe("thing", (function () {
        var compiledScript = BitcoinjsLib.script.compile(script);
        var redeemScript = BitcoinjsLib.script.witnessScriptHash.output.encode(BitcoinjsLib.crypto.sha256(compiledScript));
        var outputScript = BitcoinjsLib.script.scriptHash.output.encode(BitcoinjsLib.crypto.hash160(redeemScript));
        var displayAddress = BitcoinjsLib.address.fromOutputScript(outputScript, BitcoinjsLib.networks.testnet);
        var utxos = [/* [] */0];
        Jest.beforeAllPromise(/* Some */[40000], (function () {
                return Helpers.faucet(/* :: */[
                              /* tuple */[
                                displayAddress,
                                BTC.fromSatoshis(/* int64 */[
                                      /* hi */0,
                                      /* lo */10000
                                    ])
                              ],
                              /* [] */0
                            ]).then((function (us) {
                              utxos[0] = us;
                              return Promise.resolve(/* () */0);
                            }));
              }));
        return Jest.testPromise(/* None */0, "hello", (function () {
                      var txB = new BitcoinjsLib.TransactionBuilder(BitcoinjsLib.networks.testnet);
                      txB.addOutput(Helpers.faucetAddress, 9000);
                      var inX = txB.addInput(Belt_List.headExn(utxos[0])[/* txId */0], 0);
                      var tx = txB.buildIncomplete();
                      tx.setInputScript(inX, BitcoinjsLib.script.compile(/* array */[redeemScript]));
                      tx.setWitness(inX, /* array */[
                            Buffer.from(""),
                            compiledScript
                          ]);
                      return Helpers.broadcastTransaction(tx).then((function (result) {
                                    console.log(result);
                                    return Promise.resolve(Jest.Expect[/* toEqual */12]("", Jest.Expect[/* expect */0](result)));
                                  }));
                    }));
      }));

exports.script = script;
exports.encodeOutput = encodeOutput;
/*  Not a pure module */
