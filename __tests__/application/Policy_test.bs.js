// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Policy = require("../../src/application/Policy.bs.js");
var PrimitiveTypes = require("../../src/application/PrimitiveTypes.bs.js");

describe("Unanimous", (function () {
        Jest.test("fulfilled", (function () {
                var arg_000 = PrimitiveTypes.UserId[/* fromString */1]("a");
                var arg_001 = /* :: */[
                  PrimitiveTypes.UserId[/* fromString */1]("b"),
                  /* [] */0
                ];
                var arg = /* :: */[
                  arg_000,
                  arg_001
                ];
                var arg_000$1 = PrimitiveTypes.UserId[/* fromString */1]("a");
                var arg_001$1 = /* :: */[
                  PrimitiveTypes.UserId[/* fromString */1]("b"),
                  /* [] */0
                ];
                var arg$1 = /* :: */[
                  arg_000$1,
                  arg_001$1
                ];
                return Jest.Expect[/* toBe */2](/* true */1, Jest.Expect[/* expect */0]((function (param) {
                                    return Curry._2(Policy.fulfilled(param), arg, arg$1);
                                  })(Policy.absolute)));
              }));
        Jest.test("not fulfilled", (function () {
                var arg_000 = PrimitiveTypes.UserId[/* fromString */1]("a");
                var arg_001 = /* :: */[
                  PrimitiveTypes.UserId[/* fromString */1]("b"),
                  /* [] */0
                ];
                var arg = /* :: */[
                  arg_000,
                  arg_001
                ];
                var arg_000$1 = PrimitiveTypes.UserId[/* fromString */1]("a");
                var arg_001$1 = /* :: */[
                  PrimitiveTypes.UserId[/* fromString */1]("c"),
                  /* [] */0
                ];
                var arg$1 = /* :: */[
                  arg_000$1,
                  arg_001$1
                ];
                return Jest.Expect[/* toBe */2](/* false */0, Jest.Expect[/* expect */0]((function (param) {
                                    return Curry._2(Policy.fulfilled(param), arg, arg$1);
                                  })(Policy.absolute)));
              }));
        return Jest.test("at least one eligable", (function () {
                      return Jest.Expect[/* toBe */2](/* false */0, Jest.Expect[/* expect */0]((function (param) {
                                          return Curry._2(Policy.fulfilled(param), /* [] */0, /* [] */0);
                                        })(Policy.absolute)));
                    }));
      }));

describe("UnanimousMinusOne", (function () {
        Jest.test("fulfilled", (function () {
                var arg_000 = PrimitiveTypes.UserId[/* fromString */1]("a");
                var arg_001 = /* :: */[
                  PrimitiveTypes.UserId[/* fromString */1]("b"),
                  /* [] */0
                ];
                var arg = /* :: */[
                  arg_000,
                  arg_001
                ];
                var arg_000$1 = PrimitiveTypes.UserId[/* fromString */1]("a");
                var arg_001$1 = /* :: */[
                  PrimitiveTypes.UserId[/* fromString */1]("b"),
                  /* [] */0
                ];
                var arg$1 = /* :: */[
                  arg_000$1,
                  arg_001$1
                ];
                return Jest.Expect[/* toBe */2](/* true */1, Jest.Expect[/* expect */0]((function (param) {
                                    return Curry._2(Policy.fulfilled(param), arg, arg$1);
                                  })(Policy.absoluteMinusOne)));
              }));
        Jest.test("fullfilled with minus 1 votes", (function () {
                var arg_000 = PrimitiveTypes.UserId[/* fromString */1]("a");
                var arg_001 = /* :: */[
                  PrimitiveTypes.UserId[/* fromString */1]("b"),
                  /* [] */0
                ];
                var arg = /* :: */[
                  arg_000,
                  arg_001
                ];
                var arg_000$1 = PrimitiveTypes.UserId[/* fromString */1]("a");
                var arg_001$1 = /* :: */[
                  PrimitiveTypes.UserId[/* fromString */1]("c"),
                  /* [] */0
                ];
                var arg$1 = /* :: */[
                  arg_000$1,
                  arg_001$1
                ];
                return Jest.Expect[/* toBe */2](/* true */1, Jest.Expect[/* expect */0]((function (param) {
                                    return Curry._2(Policy.fulfilled(param), arg, arg$1);
                                  })(Policy.absoluteMinusOne)));
              }));
        Jest.test("not fullfilled", (function () {
                var arg_000 = PrimitiveTypes.UserId[/* fromString */1]("a");
                var arg_001 = /* :: */[
                  PrimitiveTypes.UserId[/* fromString */1]("b"),
                  /* :: */[
                    PrimitiveTypes.UserId[/* fromString */1]("c"),
                    /* [] */0
                  ]
                ];
                var arg = /* :: */[
                  arg_000,
                  arg_001
                ];
                var arg_000$1 = PrimitiveTypes.UserId[/* fromString */1]("a");
                var arg$1 = /* :: */[
                  arg_000$1,
                  /* [] */0
                ];
                return Jest.Expect[/* toBe */2](/* false */0, Jest.Expect[/* expect */0]((function (param) {
                                    return Curry._2(Policy.fulfilled(param), arg, arg$1);
                                  })(Policy.absoluteMinusOne)));
              }));
        return Jest.test("at least one eligable", (function () {
                      return Jest.Expect[/* toBe */2](/* false */0, Jest.Expect[/* expect */0]((function (param) {
                                          return Curry._2(Policy.fulfilled(param), /* [] */0, /* [] */0);
                                        })(Policy.absoluteMinusOne)));
                    }));
      }));

/*  Not a pure module */
