// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Event = require("../../../src/application/events/Event.bs.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Generators = require("../../helpers/Generators.bs.js");
var WalletTypes = require("../../../src/application/wallet/WalletTypes.bs.js");
var PrimitiveTypes = require("../../../src/application/PrimitiveTypes.bs.js");
var WatcherHelpers = require("../../helpers/WatcherHelpers.bs.js");
var CustodianKeyChain = require("../../../src/application/wallet/CustodianKeyChain.bs.js");
var Watcher__AccountKeyChain = require("../../../src/application/watcher/Watcher__AccountKeyChain.bs.js");

function keyChainEq(keyChainA, keyChainB) {
  return Caml_obj.caml_equal(CustodianKeyChain.encode(keyChainA), CustodianKeyChain.encode(keyChainB));
}

describe("Updates the key chain when a custodian key chain changes", (function () {
        var user1 = Generators.userSession(PrimitiveTypes.UserId[/* fromString */1]("user1"));
        var log = Generators.Log[/* withAccount */22](user1, Generators.Log[/* withFirstPartner */15](user1)(Generators.Log[/* createVenture */9](user1)));
        var acceptance = Event.getAccountCreationAcceptedExn(Generators.Log[/* lastEvent */4](log));
        var log$1 = Generators.Log[/* withCustodianKeyChain */31](/* None */0, /* None */0, user1, Generators.Log[/* withCustodian */26](user1, /* :: */[
                  user1,
                  /* [] */0
                ], log));
        var watcher = Watcher__AccountKeyChain.make(user1, acceptance, Generators.Log[/* eventLog */5](log$1));
        return WatcherHelpers.testWatcherHasEventPending("AccountKeyChainUpdated", watcher, Generators.Log[/* systemIssuer */2](log$1), (function (param) {
                      if (param.tag === 32) {
                        var match = param[0][/* keyChain */0];
                        if (WalletTypes.AccountIndex[/* eq */7](match[/* accountIdx */0], WalletTypes.AccountIndex[/* default */9]) && WalletTypes.AccountKeyChainIndex[/* eq */7](match[/* keyChainIdx */1], WalletTypes.AccountKeyChainIndex[/* first */2]) && match[/* nCoSigners */2] === 1) {
                          return List.length(match[/* custodianKeyChains */3]) === 1;
                        } else {
                          return false;
                        }
                      } else {
                        return false;
                      }
                    }));
      }));

describe("Increases the AccountKeyChainIndex every time", (function () {
        var match = Generators.twoUserSessions(/* () */0);
        var user2 = match[1];
        var user1 = match[0];
        var log = Generators.Log[/* withAccount */22](user1, Generators.Log[/* withFirstPartner */15](user1)(Generators.Log[/* createVenture */9](user1)));
        var acceptance = Event.getAccountCreationAcceptedExn(Generators.Log[/* lastEvent */4](log));
        var log$1 = Generators.Log[/* withCustodianKeyChain */31](/* None */0, /* None */0, user2, Generators.Log[/* withCustodian */26](user2, /* :: */[
                  user1,
                  /* :: */[
                    user2,
                    /* [] */0
                  ]
                ], Generators.Log[/* withPartner */14](user2, /* :: */[
                      user1,
                      /* [] */0
                    ], Generators.Log[/* withAccountKeyChain */32](Generators.Log[/* withCustodianKeyChain */31](/* None */0, /* None */0, user1, Generators.Log[/* withCustodian */26](user1, /* :: */[
                                  user1,
                                  /* [] */0
                                ], log))))));
        var watcher = Watcher__AccountKeyChain.make(user1, acceptance, Generators.Log[/* eventLog */5](log$1));
        return WatcherHelpers.testWatcherHasEventPending("AccountKeyChainUpdated", watcher, Generators.Log[/* systemIssuer */2](log$1), (function (param) {
                      if (param.tag === 32) {
                        var match = param[0][/* keyChain */0];
                        if (WalletTypes.AccountIndex[/* eq */7](match[/* accountIdx */0], WalletTypes.AccountIndex[/* default */9]) && WalletTypes.AccountKeyChainIndex[/* eq */7](match[/* keyChainIdx */1], WalletTypes.AccountKeyChainIndex[/* next */3](WalletTypes.AccountKeyChainIndex[/* first */2])) && match[/* nCoSigners */2] === 1) {
                          return List.length(match[/* custodianKeyChains */3]) === 2;
                        } else {
                          return false;
                        }
                      } else {
                        return false;
                      }
                    }));
      }));

describe("Idle if user is not a custodian", (function () {
        var match = Generators.twoUserSessions(/* () */0);
        var user2 = match[1];
        var user1 = match[0];
        var log = Generators.Log[/* withAccount */22](user1, Generators.Log[/* withFirstPartner */15](user1)(Generators.Log[/* createVenture */9](user1)));
        var acceptance = Event.getAccountCreationAcceptedExn(Generators.Log[/* lastEvent */4](log));
        var log$1 = Generators.Log[/* withCustodianKeyChain */31](/* None */0, /* None */0, user2, Generators.Log[/* withCustodianRemoved */30](user1, /* :: */[
                  user2,
                  /* [] */0
                ], Generators.Log[/* withCustodian */26](user2, /* :: */[
                      user1,
                      /* :: */[
                        user2,
                        /* [] */0
                      ]
                    ], Generators.Log[/* withPartner */14](user2, /* :: */[
                          user1,
                          /* [] */0
                        ], Generators.Log[/* withAccountKeyChain */32](Generators.Log[/* withCustodianKeyChain */31](/* None */0, /* None */0, user1, Generators.Log[/* withCustodian */26](user1, /* :: */[
                                      user1,
                                      /* [] */0
                                    ], log)))))));
        return WatcherHelpers.testWatcherHasNoEventPending(Watcher__AccountKeyChain.make(user1, acceptance, Generators.Log[/* eventLog */5](log$1)));
      }));

var KeyChain = 0;

var AccountKeyChain = 0;

var G = 0;

var E = 0;

var L = 0;

exports.KeyChain = KeyChain;
exports.AccountKeyChain = AccountKeyChain;
exports.G = G;
exports.E = E;
exports.L = L;
exports.keyChainEq = keyChainEq;
/*  Not a pure module */
