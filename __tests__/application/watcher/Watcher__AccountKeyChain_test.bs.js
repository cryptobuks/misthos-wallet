// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var Event = require("../../../src/application/events/Event.bs.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Fixtures = require("../../helpers/Fixtures.bs.js");
var Generators = require("../../helpers/Generators.bs.js");
var WalletTypes = require("../../../src/application/wallet/WalletTypes.bs.js");
var WatcherHelpers = require("../../helpers/WatcherHelpers.bs.js");
var CustodianKeyChain = require("../../../src/application/wallet/CustodianKeyChain.bs.js");
var Watcher__AccountKeyChain = require("../../../src/application/watcher/Watcher__AccountKeyChain.bs.js");

function keyChainEq(keyChainA, keyChainB) {
  return Caml_obj.caml_equal(CustodianKeyChain.encode(keyChainA), CustodianKeyChain.encode(keyChainB));
}

describe("Identifies a key chain when a custodian key chain changes", (function () {
        var user1 = Fixtures.threeUserSessions[0];
        var log = Generators.Log[/* withAccount */22](user1, Generators.Log[/* withFirstPartner */15](user1)(Fixtures.createVenture(user1)));
        var acceptance = Event.getAccountCreationAcceptedExn(Generators.Log[/* lastEvent */4](log));
        var log$1 = Generators.Log[/* withCustodianKeyChain */31](/* None */0, /* None */0, user1, Generators.Log[/* withCustodian */26](user1, /* :: */[
                  user1,
                  /* [] */0
                ], log));
        var watcher = Watcher__AccountKeyChain.make(user1, acceptance, Generators.Log[/* eventLog */5](log$1));
        return WatcherHelpers.testWatcherHasEventPending("AccountKeyChainIdentified", watcher, Generators.Log[/* systemIssuer */2](log$1), (function (param) {
                      if (param.tag === 30) {
                        var match = param[0];
                        if (WalletTypes.AccountIndex[/* eq */7](match[/* keyChain */1][/* accountIdx */0], WalletTypes.AccountIndex[/* default */9])) {
                          return match[/* identifier */0] === "41f508a17ccd3b6e325be410341fd320d8d72befbb54cddf5723432a340bcc73";
                        } else {
                          return false;
                        }
                      } else {
                        return false;
                      }
                    }));
      }));

describe("Activates a key chain when a custodian key chain changes", (function () {
        var user1 = Fixtures.threeUserSessions[0];
        var log = Generators.Log[/* withAccount */22](user1, Generators.Log[/* withFirstPartner */15](user1)(Fixtures.createVenture(user1)));
        var acceptance = Event.getAccountCreationAcceptedExn(Generators.Log[/* lastEvent */4](log));
        var log$1 = Generators.Log[/* withAccountKeyChainIdentified */32](Generators.Log[/* withCustodianKeyChain */31](/* None */0, /* None */0, user1, Generators.Log[/* withCustodian */26](user1, /* :: */[
                      user1,
                      /* [] */0
                    ], log)));
        var watcher = Watcher__AccountKeyChain.make(user1, acceptance, Generators.Log[/* eventLog */5](log$1));
        return WatcherHelpers.testWatcherHasEventPending("AccountKeyChainActivated", watcher, user1[/* issuerKeyPair */2], (function (param) {
                      if (param.tag === 31) {
                        var match = param[0];
                        if (WalletTypes.AccountIndex[/* eq */7](match[/* accountIdx */0], WalletTypes.AccountIndex[/* default */9]) && match[/* identifier */2] === "41f508a17ccd3b6e325be410341fd320d8d72befbb54cddf5723432a340bcc73") {
                          return match[/* sequence */3] === 0;
                        } else {
                          return false;
                        }
                      } else {
                        return false;
                      }
                    }));
      }));

describe("Is idle when the key chain has been activated", (function () {
        var user1 = Fixtures.threeUserSessions[0];
        var log = Generators.Log[/* withAccount */22](user1, Generators.Log[/* withFirstPartner */15](user1)(Fixtures.createVenture(user1)));
        var acceptance = Event.getAccountCreationAcceptedExn(Generators.Log[/* lastEvent */4](log));
        var log$1 = Generators.Log[/* withAccountKeyChainActivated */33](user1, Generators.Log[/* withAccountKeyChainIdentified */32](Generators.Log[/* withCustodianKeyChain */31](/* None */0, /* None */0, user1, Generators.Log[/* withCustodian */26](user1, /* :: */[
                          user1,
                          /* [] */0
                        ], log))));
        return WatcherHelpers.testWatcherHasNoEventPending(Watcher__AccountKeyChain.make(user1, acceptance, Generators.Log[/* eventLog */5](log$1)));
      }));

describe("Activates a key chain when a custodian is removed", (function () {
        var user2 = Fixtures.threeUserSessions[1];
        var user1 = Fixtures.threeUserSessions[0];
        var log = Generators.Log[/* withAccount */22](user1, Generators.Log[/* withFirstPartner */15](user1)(Fixtures.createVenture(user1)));
        var acceptance = Event.getAccountCreationAcceptedExn(Generators.Log[/* lastEvent */4](log));
        var log$1 = Generators.Log[/* withCustodianRemoved */30](user2, /* :: */[
              user1,
              /* [] */0
            ], Generators.Log[/* withAccountKeyChainActivated */33](user1, Generators.Log[/* withAccountKeyChainIdentified */32](Generators.Log[/* withCustodianKeyChain */31](/* None */0, /* None */0, user2, Generators.Log[/* withCustodian */26](user2, /* :: */[
                              user1,
                              /* :: */[
                                user2,
                                /* [] */0
                              ]
                            ], Generators.Log[/* withPartner */14](user2, /* :: */[
                                  user1,
                                  /* [] */0
                                ], Generators.Log[/* withAccountKeyChainActivated */33](user1, Generators.Log[/* withAccountKeyChainIdentified */32](Generators.Log[/* withCustodianKeyChain */31](/* None */0, /* None */0, user1, Generators.Log[/* withCustodian */26](user1, /* :: */[
                                                  user1,
                                                  /* [] */0
                                                ], log))))))))));
        var watcher = Watcher__AccountKeyChain.make(user1, acceptance, Generators.Log[/* eventLog */5](log$1));
        return WatcherHelpers.testWatcherHasEventPending("AccountKeyChainActivated", watcher, user1[/* issuerKeyPair */2], (function (param) {
                      if (param.tag === 31) {
                        var match = param[0];
                        if (WalletTypes.AccountIndex[/* eq */7](match[/* accountIdx */0], WalletTypes.AccountIndex[/* default */9]) && match[/* identifier */2] === "41f508a17ccd3b6e325be410341fd320d8d72befbb54cddf5723432a340bcc73") {
                          return match[/* sequence */3] === 1;
                        } else {
                          return false;
                        }
                      } else {
                        return false;
                      }
                    }));
      }));

describe("Is idle when the partner is removed", (function () {
        var user2 = Fixtures.threeUserSessions[1];
        var user1 = Fixtures.threeUserSessions[0];
        var log = Generators.Log[/* withAccount */22](user1, Generators.Log[/* withFirstPartner */15](user1)(Fixtures.createVenture(user1)));
        var acceptance = Event.getAccountCreationAcceptedExn(Generators.Log[/* lastEvent */4](log));
        var log$1 = Generators.Log[/* withCustodianKeyChain */31](/* None */0, /* None */0, user2, Generators.Log[/* withPartnerRemoved */19](user1, /* :: */[
                  user2,
                  /* [] */0
                ], Generators.Log[/* withCustodian */26](user2, /* :: */[
                      user1,
                      /* :: */[
                        user2,
                        /* [] */0
                      ]
                    ], Generators.Log[/* withPartner */14](user2, /* :: */[
                          user1,
                          /* [] */0
                        ], Generators.Log[/* withAccountKeyChainActivated */33](user1, Generators.Log[/* withAccountKeyChainIdentified */32](Generators.Log[/* withCustodianKeyChain */31](/* None */0, /* None */0, user1, Generators.Log[/* withCustodian */26](user1, /* :: */[
                                          user1,
                                          /* [] */0
                                        ], log))))))));
        return WatcherHelpers.testWatcherHasNoEventPending(Watcher__AccountKeyChain.make(user1, acceptance, Generators.Log[/* eventLog */5](log$1)));
      }));

var KeyChain = 0;

var AccountKeyChain = 0;

var G = 0;

var E = 0;

var L = 0;

exports.KeyChain = KeyChain;
exports.AccountKeyChain = AccountKeyChain;
exports.G = G;
exports.E = E;
exports.L = L;
exports.keyChainEq = keyChainEq;
/*  Not a pure module */
