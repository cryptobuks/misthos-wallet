// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Generators = require("../helpers/Generators.bs.js");
var PrimitiveTypes = require("../../src/application/PrimitiveTypes.bs.js");
var ValidationHelpers = require("../helpers/ValidationHelpers.bs.js");
var Venture__Validation = require("../../src/application/Venture__Validation.bs.js");

describe("PartnerProposal", (function () {
        describe("when proposing another partner", (function () {
                var match = Generators.twoUserSessions(/* () */0);
                var user2 = match[1];
                var user1 = match[0];
                var log = Generators.Log[/* withFirstPartner */16](user1)(Generators.Log[/* createVenture */10](user1));
                var func = Generators.Log[/* withPartnerProposed */11];
                return ValidationHelpers.testValidationResult(ValidationHelpers.constructState(log), Generators.Log[/* lastItem */3](Curry._1((function (param, param$1, param$2) {
                                        return Curry._5(func, param, param$1, param$2, user1, user2);
                                      })(/* None */0, /* None */0, /* None */0), log)), /* Ok */0);
              }));
        describe("when the prospect is already a partner", (function () {
                var match = Generators.twoUserSessions(/* () */0);
                var user2 = match[1];
                var user1 = match[0];
                var log = Generators.Log[/* withPartner */15](user2, /* :: */[
                      user1,
                      /* [] */0
                    ], Generators.Log[/* withFirstPartner */16](user1)(Generators.Log[/* createVenture */10](user1)));
                var func = Generators.Log[/* withPartnerProposed */11];
                return ValidationHelpers.testValidationResult(ValidationHelpers.constructState(log), Generators.Log[/* lastItem */3](Curry._1((function (param, param$1, param$2) {
                                        return Curry._5(func, param, param$1, param$2, user2, user1);
                                      })(/* None */0, /* None */0, /* None */0), log)), /* BadData */["Partner already exists"]);
              }));
        describe("when the creator proposes themselves", (function () {
                var user1 = Generators.userSession(PrimitiveTypes.UserId[/* fromString */1]("user1"));
                var log = Generators.Log[/* createVenture */10](user1);
                var func = Generators.Log[/* withPartnerProposed */11];
                return ValidationHelpers.testValidationResult(ValidationHelpers.constructState(log), Generators.Log[/* lastItem */3](Curry._1((function (param, param$1, param$2) {
                                        return Curry._5(func, param, param$1, param$2, user1, user1);
                                      })(/* None */0, /* None */0, /* None */0), log)), /* Ok */0);
              }));
        describe("when proposing a partner that was removed", (function () {
                var match = Generators.twoUserSessions(/* () */0);
                var user2 = match[1];
                var user1 = match[0];
                var log = Generators.Log[/* withPartnerRemoved */20](user2, /* :: */[
                      user1,
                      /* [] */0
                    ], Generators.Log[/* withPartner */15](user2, /* :: */[
                          user1,
                          /* [] */0
                        ], Generators.Log[/* withFirstPartner */16](user1)(Generators.Log[/* createVenture */10](user1))));
                var func = Generators.Log[/* withPartnerProposed */11];
                return ValidationHelpers.testValidationResult(ValidationHelpers.constructState(log), Generators.Log[/* lastItem */3](Curry._1((function (param, param$1, param$2) {
                                        return Curry._5(func, param, param$1, param$2, user1, user2);
                                      })(/* None */0, /* None */0, /* None */0), log)), /* Ok */0);
              }));
        describe("when the partner was removed but the proposal doesn't show it", (function () {
                var match = Generators.threeUserSessions(/* () */0);
                var user3 = match[2];
                var user2 = match[1];
                var user1 = match[0];
                var log = Generators.Log[/* withPartnerRemoved */20](user2, /* :: */[
                      user1,
                      /* :: */[
                        user3,
                        /* [] */0
                      ]
                    ], Generators.Log[/* withPartner */15](user3, /* :: */[
                          user1,
                          /* :: */[
                            user2,
                            /* [] */0
                          ]
                        ], Generators.Log[/* withPartner */15](user2, /* :: */[
                              user1,
                              /* [] */0
                            ], Generators.Log[/* withFirstPartner */16](user1)(Generators.Log[/* createVenture */10](user1)))));
                var func = Generators.Log[/* withPartnerProposed */11];
                var arg = function (param, param$1) {
                  return Curry._5(func, /* Some */[false], param, param$1, user3, user2);
                };
                return ValidationHelpers.testValidationResult(ValidationHelpers.constructState(log), Generators.Log[/* lastItem */3]((function (eta) {
                                    return Curry._1(arg(/* None */0, /* None */0), eta);
                                  })(log)), /* BadData */["Last removal doesn't match"]);
              }));
        return /* () */0;
      }));

describe("PartnerRemovalProposal", (function () {
        describe("when proposing another partner", (function () {
                var match = Generators.twoUserSessions(/* () */0);
                var user2 = match[1];
                var user1 = match[0];
                var log = Generators.Log[/* withPartner */15](user2, /* :: */[
                      user1,
                      /* [] */0
                    ], Generators.Log[/* withFirstPartner */16](user1)(Generators.Log[/* createVenture */10](user1)));
                return ValidationHelpers.testValidationResult(ValidationHelpers.constructState(log), Generators.Log[/* lastItem */3](Generators.Log[/* withPartnerRemovalProposed */17](user1, user2, log)), /* Ok */0);
              }));
        describe("validatePartnerRemovalData", (function () {
                describe("when the prospect is not a partner", (function () {
                        var match = Generators.twoUserSessions(/* () */0);
                        var user2 = match[1];
                        var user1 = match[0];
                        var log = Generators.Log[/* withFirstPartner */16](user1)(Generators.Log[/* createVenture */10](user1));
                        return ValidationHelpers.testDataValidation(Venture__Validation.validatePartnerRemovalData, ValidationHelpers.constructState(log), /* record */[
                                    /* id */user2[/* userId */0],
                                    /* lastPartnerProcess */PrimitiveTypes.ProcessId[/* make */7](/* () */0)
                                  ], /* BadData */["Partner with Id '" + (PrimitiveTypes.UserId[/* toString */0](user2[/* userId */0]) + "' doesn't exist")]);
                      }));
                describe("when lastPartnerProcess doesn't match", (function () {
                        var match = Generators.twoUserSessions(/* () */0);
                        var user2 = match[1];
                        var user1 = match[0];
                        var log = Generators.Log[/* withPartner */15](user2, /* :: */[
                              user1,
                              /* [] */0
                            ], Generators.Log[/* withFirstPartner */16](user1)(Generators.Log[/* createVenture */10](user1)));
                        return ValidationHelpers.testDataValidation(Venture__Validation.validatePartnerRemovalData, ValidationHelpers.constructState(log), /* record */[
                                    /* id */user2[/* userId */0],
                                    /* lastPartnerProcess */PrimitiveTypes.ProcessId[/* make */7](/* () */0)
                                  ], /* BadData */["lastPartnerProcess doesn't match"]);
                      }));
                return /* () */0;
              }));
        return /* () */0;
      }));

/*  Not a pure module */
