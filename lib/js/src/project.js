// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Json        = require("bs-json/lib/js/src/Json.js");
var V4          = require("uuid/v4");
var Blockstack  = require("blockstack");
var Json_decode = require("bs-json/lib/js/src/Json_decode.js");
var Json_encode = require("bs-json/lib/js/src/Json_encode.js");

function project(json) {
  return /* record */[
          /* name */Json_decode.field("name", Json_decode.string, json),
          /* id */Json_decode.field("id", Json_decode.string, json)
        ];
}

function index(indexString) {
  return Json_decode.list(project, Json.parseOrRaise(indexString));
}

var Decode = /* module */[
  /* project */project,
  /* index */index
];

function project$1(project$2) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "name",
                project$2[/* name */0]
              ],
              /* :: */[
                /* tuple */[
                  "id",
                  project$2[/* id */1]
                ],
                /* [] */0
              ]
            ]);
}

function index$1(index$2) {
  return Json.stringify(Json_encode.list(project$1, index$2));
}

var Encode = /* module */[
  /* project */project$1,
  /* index */index$1
];

var indexPath = "index.json";

function persistIndex(index) {
  return Blockstack.putFile(indexPath, Json.stringify(Json_encode.list(project$1, index)), false);
}

function loadIndex() {
  return Blockstack.getFile(indexPath, false).then((function (nullProjects) {
                if (nullProjects == null) {
                  return persistIndex(/* [] */0).then((function () {
                                return Promise.resolve(/* [] */0);
                              }));
                } else {
                  return Promise.resolve(Json_decode.list(project, Json.parseOrRaise(nullProjects)));
                }
              }));
}

function createProject(name) {
  var project_001 = /* id */V4();
  var project = /* record */[
    /* name */name,
    project_001
  ];
  return loadIndex(/* () */0).then((function (index) {
                var newIndex = /* :: */[
                  project,
                  index
                ];
                return persistIndex(newIndex).then((function () {
                              return Promise.resolve(newIndex);
                            }));
              }));
}

exports.Decode        = Decode;
exports.Encode        = Encode;
exports.indexPath     = indexPath;
exports.persistIndex  = persistIndex;
exports.loadIndex     = loadIndex;
exports.createProject = createProject;
/* uuid/v4 Not a pure module */
