// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var List        = require("bs-platform/lib/js/list.js");
var $$Array     = require("bs-platform/lib/js/array.js");
var Block       = require("bs-platform/lib/js/block.js");
var Curry       = require("bs-platform/lib/js/curry.js");
var React       = require("react");
var $$String    = require("bs-platform/lib/js/string.js");
var Project     = require("../project.js");
var ReasonReact = require("reason-react/lib/js/src/reasonReact.js");

var component = ReasonReact.reducerComponent("Projects");

function changeNewProject($$event) {
  return /* ChangeNewProject */Block.__(1, [$$event.target.value]);
}

function make() {
  var newrecord = component.slice();
  newrecord[/* didMount */4] = (function () {
      return /* SideEffects */Block.__(2, [(function (param) {
                    var reduce = param[/* reduce */3];
                    Project.loadIndex(/* () */0).then((function (index) {
                            return Promise.resolve(Curry._2(reduce, (function () {
                                              return /* IndexLoaded */Block.__(0, [index]);
                                            }), /* () */0));
                          }));
                    return /* () */0;
                  })]);
    });
  newrecord[/* render */9] = (function (param) {
      var state = param[/* state */4];
      var reduce = param[/* reduce */3];
      var match = state[/* status */0];
      var projectList = $$Array.of_list(List.map((function (param) {
                  return React.createElement("ul", {
                              key: param[1]
                            }, param[0]);
                }), typeof match === "number" ? (
                  match !== 0 ? /* [] */0 : List.map((function (param) {
                            return /* tuple */[
                                    param[/* name */0],
                                    param[/* id */1]
                                  ];
                          }), state[/* index */1])
                ) : /* :: */[
                  /* tuple */[
                    match[0],
                    "new"
                  ],
                  List.map((function (param) {
                          return /* tuple */[
                                  param[/* name */0],
                                  param[/* id */1]
                                ];
                        }), state[/* index */1])
                ]));
      var match$1 = state[/* status */0];
      var status = typeof match$1 === "number" ? (
          match$1 !== 0 ? "Loading Index" : "projects:"
        ) : "Creating project '" + (match$1[0] + "'");
      return React.createElement("div", undefined, React.createElement("h2", undefined, status), projectList, React.createElement("input", {
                      autoFocus: true,
                      placeholder: "Create new Project",
                      value: state[/* newProject */2],
                      onChange: Curry._1(reduce, changeNewProject)
                    }), React.createElement("button", {
                      onClick: Curry._1(reduce, (function () {
                              return /* AddProject */0;
                            }))
                    }, "Add"));
    });
  newrecord[/* initialState */10] = (function () {
      return /* record */[
              /* status : LoadingIndex */1,
              /* index : [] */0,
              /* newProject */""
            ];
    });
  newrecord[/* reducer */12] = (function (action, state) {
      var exit = 0;
      if (typeof action === "number") {
        var nonEmptyValue = $$String.trim(state[/* newProject */2]);
        if (nonEmptyValue === "") {
          return /* NoUpdate */0;
        } else {
          return /* UpdateWithSideEffects */Block.__(3, [
                    /* record */[
                      /* status : CreatingProject */[nonEmptyValue],
                      /* index */state[/* index */1],
                      /* newProject */""
                    ],
                    (function (param) {
                        var reduce = param[/* reduce */3];
                        Project.createProject(nonEmptyValue).then((function (newIndex) {
                                return Promise.resolve(Curry._2(reduce, (function () {
                                                  return /* ProjectCreated */Block.__(2, [newIndex]);
                                                }), /* () */0));
                              }));
                        return /* () */0;
                      })
                  ]);
        }
      } else {
        switch (action.tag | 0) {
          case 1 : 
              return /* Update */Block.__(0, [/* record */[
                          /* status */state[/* status */0],
                          /* index */state[/* index */1],
                          /* newProject */action[0]
                        ]]);
          case 0 : 
          case 2 : 
              exit = 1;
              break;
          
        }
      }
      if (exit === 1) {
        return /* Update */Block.__(0, [/* record */[
                    /* status : None */0,
                    /* index */action[0],
                    /* newProject */state[/* newProject */2]
                  ]]);
      }
      
    });
  return newrecord;
}

exports.component        = component;
exports.changeNewProject = changeNewProject;
exports.make             = make;
/* component Not a pure module */
