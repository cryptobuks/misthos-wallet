// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Jest         = require("bs-jest/lib/js/src/jest.js");
var BitcoinjsLib = require("bitcoinjs-lib");

describe("Crypto", (function () {
        return Jest.test("sha256", (function () {
                      return Jest.Expect[/* toBe */2]("2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824")(Jest.Expect[/* expect */0](BitcoinjsLib.crypto.sha256("hello").toString("hex")));
                    }));
      }));

describe("Networks", (function () {
        return Jest.test("bitcoin", (function () {
                      return Jest.Expect[/* toBe */2]("bc")(Jest.Expect[/* expect */0](BitcoinjsLib.networks.bitcoin.bech32));
                    }));
      }));

describe("ECPair", (function () {
        Jest.test("fromWIF", (function () {
                var keyPair = BitcoinjsLib.ECPair.fromWIF("KwDiBf89QgGbjEhKnhXJuH7LrciVrZi3qYjgd9M7rFU73sVHnoWn");
                return Jest.Expect[/* toBe */2]("1BgGZ9tcN4rm9KBzDn7KprQz87SZ26SAMH")(Jest.Expect[/* expect */0](keyPair.getAddress()));
              }));
        return Jest.test("sign/verify", (function () {
                      var keyPair = BitcoinjsLib.ECPair.makeRandom();
                      var der = keyPair.sign(BitcoinjsLib.crypto.sha256("hello")).toDER().toString("hex");
                      var signature = BitcoinjsLib.ECSignature.fromDER(Buffer.from(der, "hex"));
                      var verified = keyPair.verify(BitcoinjsLib.crypto.sha256("hello"), signature);
                      return Jest.Expect[/* toEqual */12](true)(Jest.Expect[/* expect */0](verified));
                    }));
      }));

describe("TransactionBuilder", (function () {
        return Jest.test("example", (function () {
                      var keyPair = BitcoinjsLib.ECPair.fromWIF("L1uyy5qTuGrVXrmrsvHWHgVzW9kKdrp27wBC7Vs6nZDTF2BRUVwy");
                      var tx = new BitcoinjsLib.TransactionBuilder();
                      tx.addInput("aa94ab02c182214f090e99a0d57021caffd0f195a81c24602b1028b130b63e31", 0);
                      tx.addOutput("1Gokm82v6DmtwKEB8AiVhm82hyFSsEvBDK", 15000);
                      tx.sign(0, keyPair);
                      var hex = tx.build().toHex();
                      return Jest.Expect[/* toMatch */14]("0100000001313eb630b128102b60241ca895f1d0ffca21")(Jest.Expect[/* expect */0](hex));
                    }));
      }));

/*  Not a pure module */
