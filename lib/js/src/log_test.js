// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Log          = require("./log.js");
var Jest         = require("bs-jest/lib/js/src/jest.js");
var Curry        = require("bs-platform/lib/js/curry.js");
var BitcoinjsLib = require("bitcoinjs-lib");

function decode(item, _) {
  return item;
}

function encode(item) {
  return item;
}

function getType() {
  return "string";
}

function canKeySignItem(_, _$1, _$2) {
  return /* true */1;
}

function canKeyWitnessItem(_, _$1, _$2) {
  return /* true */1;
}

function validate(state, _) {
  return /* tuple */[
          /* true */1,
          state
        ];
}

var TestItem = /* module */[
  /* decode */decode,
  /* encode */encode,
  /* getType */getType,
  /* canKeySignItem */canKeySignItem,
  /* canKeyWitnessItem */canKeyWitnessItem,
  /* validate */validate
];

var TestLog = Log.Make([
      getType,
      encode,
      decode,
      canKeyWitnessItem,
      canKeySignItem,
      validate
    ]);

var keyPair = BitcoinjsLib.ECPair.makeRandom();

describe("append", (function () {
        return Jest.test("valid append", (function () {
                      var log = Curry._1(TestLog[/* make */0], 0);
                      var log$1 = Curry._3(TestLog[/* append */2], "hello", keyPair, log);
                      var log$2 = Curry._3(TestLog[/* append */2], " - bye", keyPair, log$1);
                      return Jest.Expect[/* toEqual */12]("hello - bye")(Jest.Expect[/* expect */0](Curry._3(TestLog[/* reduce */3], (function (state, entry) {
                                            return state + entry;
                                          }), "", log$2)));
                    }));
      }));

exports.TestItem = TestItem;
/* TestLog Not a pure module */
