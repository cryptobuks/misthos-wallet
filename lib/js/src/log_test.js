// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Log          = require("./log.js");
var Jest         = require("bs-jest/lib/js/src/jest.js");
var Json         = require("bs-json/lib/js/src/Json.js");
var Block        = require("bs-platform/lib/js/block.js");
var Curry        = require("bs-platform/lib/js/curry.js");
var Json_decode  = require("bs-json/lib/js/src/Json_decode.js");
var Json_encode  = require("bs-json/lib/js/src/Json_encode.js");
var BitcoinjsLib = require("bitcoinjs-lib");

function decode(payload, type_) {
  switch (type_) {
    case "DataEvent" : 
        var json = Json.parseOrRaise(payload);
        return /* DataEvent */Block.__(2, [/* record */[
                    /* text */Json_decode.field("text", Json_decode.string, json),
                    /* number */Json_decode.field("number", Json_decode.$$int, json)
                  ]]);
    case "IntEvent" : 
        return /* IntEvent */Block.__(1, [Json_decode.$$int(Json.parseOrRaise(payload))]);
    case "StringEvent" : 
        return /* StringEvent */Block.__(0, [payload]);
    default:
      return /* StringEvent */Block.__(0, ["Unknown"]);
  }
}

function encode(payload) {
  switch (payload.tag | 0) {
    case 0 : 
        return payload[0];
    case 1 : 
        return Json.stringify(payload[0]);
    case 2 : 
        var d = payload[0];
        return Json.stringify(Json_encode.object_(/* :: */[
                        /* tuple */[
                          "text",
                          d[/* text */0]
                        ],
                        /* :: */[
                          /* tuple */[
                            "number",
                            d[/* number */1]
                          ],
                          /* [] */0
                        ]
                      ]));
    
  }
}

function getType(payload) {
  switch (payload.tag | 0) {
    case 0 : 
        return "StringEvent";
    case 1 : 
        return "IntEvent";
    case 2 : 
        return "DataEvent";
    
  }
}

var TestPayload = /* module */[
  /* decode */decode,
  /* encode */encode,
  /* getType */getType
];

var TestLog = Log.Make([
      encode,
      decode,
      getType
    ]);

var keyPair = BitcoinjsLib.ECPair.makeRandom();

describe("Encode/Decode", (function () {
        Jest.test("StringEvent", (function () {
                var $$event = Curry._2(TestLog[/* createEvent */0], keyPair, /* StringEvent */Block.__(0, ["hello"]));
                var decoded = Curry._1(TestLog[/* Decode */2][/* event */0], Curry._1(TestLog[/* Encode */1][/* event */0], $$event));
                return Jest.Expect[/* toEqual */12](decoded)(Jest.Expect[/* expect */0]($$event));
              }));
        Jest.test("IntEvent", (function () {
                var $$event = Curry._2(TestLog[/* createEvent */0], keyPair, /* IntEvent */Block.__(1, [1]));
                var decoded = Curry._1(TestLog[/* Decode */2][/* event */0], Curry._1(TestLog[/* Encode */1][/* event */0], $$event));
                return Jest.Expect[/* toEqual */12](decoded)(Jest.Expect[/* expect */0]($$event));
              }));
        return Jest.test("DataEvent", (function () {
                      var $$event = Curry._2(TestLog[/* createEvent */0], keyPair, /* DataEvent */Block.__(2, [/* record */[
                                /* text */"text",
                                /* number */1
                              ]]));
                      var decoded = Curry._1(TestLog[/* Decode */2][/* event */0], Curry._1(TestLog[/* Encode */1][/* event */0], $$event));
                      return Jest.Expect[/* toEqual */12](decoded)(Jest.Expect[/* expect */0]($$event));
                    }));
      }));

Jest.test("sign/verify", (function () {
        var $$event = Curry._2(TestLog[/* createEvent */0], keyPair, /* StringEvent */Block.__(0, ["hello"]));
        return Jest.Expect[/* toBe */2](keyPair.sign(Buffer.from("2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824", "hex")).toDER().toString("hex"))(Jest.Expect[/* expect */0]($$event[/* signature */4]));
      }));

exports.TestPayload = TestPayload;
/* TestLog Not a pure module */
